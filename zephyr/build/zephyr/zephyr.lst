
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20002140 	.word	0x20002140
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	0000438d 	.word	0x0000438d
   8:	000099c7 	.word	0x000099c7
   c:	000043c9 	.word	0x000043c9
  10:	000043c9 	.word	0x000043c9
		if (fdtable[fd].obj == NULL) {
  14:	000043c9 	.word	0x000043c9
  18:	000043c9 	.word	0x000043c9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	000043c9 	.word	0x000043c9
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00004155 	.word	0x00004155
  30:	000043c9 	.word	0x000043c9
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00004109 	.word	0x00004109
  3c:	000099b1 	.word	0x000099b1

00000040 <_irq_vector_table>:
  40:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
#define TIMER_ABSTIME 4
#endif

static inline s32_t _ts_to_ms(const struct timespec *to)
{
	return (to->tv_sec * MSEC_PER_SEC) + (to->tv_nsec / NSEC_PER_MSEC);
  60:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
		return 0;
	}

	/* Calculate timer period */
	timer->reload = _ts_to_ms(&value->it_interval);
	timer->interval.tv_sec = value->it_interval.tv_sec;
  70:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 */
__syscall k_ticks_t k_timer_remaining_ticks(struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
  80:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
	/* Calcaulte timer duration */
	duration = _ts_to_ms(&(value->it_value));
	if ((flags & TIMER_ABSTIME) != 0) {
		current = k_timer_remaining_get(&timer->ztimer);

		if (current >= duration) {
  90:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
	z_impl_k_timer_stop(timer);
  a0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
  b0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  c0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  d0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
	if (timer->status == ACTIVE) {
		k_timer_stop(&timer->ztimer);
	}

	timer->status = ACTIVE;
	k_timer_start(&timer->ztimer, K_MSEC(duration), K_MSEC(timer->reload));
  e0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
	return 0;
  f0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 100:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 110:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 120:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 130:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 140:	0000434d                                MC..

Disassembly of section text:

00000148 <__aeabi_ldivmod>:
     148:	b97b      	cbnz	r3, 16a <__aeabi_ldivmod+0x22>
     14a:	b972      	cbnz	r2, 16a <__aeabi_ldivmod+0x22>
     14c:	2900      	cmp	r1, #0
     14e:	bfbe      	ittt	lt
     150:	2000      	movlt	r0, #0
     152:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     156:	e006      	blt.n	166 <__aeabi_ldivmod+0x1e>
     158:	bf08      	it	eq
     15a:	2800      	cmpeq	r0, #0
     15c:	bf1c      	itt	ne
     15e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     162:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     166:	f000 b9bb 	b.w	4e0 <__aeabi_idiv0>
     16a:	f1ad 0c08 	sub.w	ip, sp, #8
     16e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     172:	2900      	cmp	r1, #0
     174:	db09      	blt.n	18a <__aeabi_ldivmod+0x42>
     176:	2b00      	cmp	r3, #0
     178:	db1a      	blt.n	1b0 <__aeabi_ldivmod+0x68>
     17a:	f000 f84d 	bl	218 <__udivmoddi4>
     17e:	f8dd e004 	ldr.w	lr, [sp, #4]
     182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     186:	b004      	add	sp, #16
     188:	4770      	bx	lr
     18a:	4240      	negs	r0, r0
     18c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     190:	2b00      	cmp	r3, #0
     192:	db1b      	blt.n	1cc <__aeabi_ldivmod+0x84>
     194:	f000 f840 	bl	218 <__udivmoddi4>
     198:	f8dd e004 	ldr.w	lr, [sp, #4]
     19c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1a0:	b004      	add	sp, #16
     1a2:	4240      	negs	r0, r0
     1a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1a8:	4252      	negs	r2, r2
     1aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1ae:	4770      	bx	lr
     1b0:	4252      	negs	r2, r2
     1b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1b6:	f000 f82f 	bl	218 <__udivmoddi4>
     1ba:	f8dd e004 	ldr.w	lr, [sp, #4]
     1be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1c2:	b004      	add	sp, #16
     1c4:	4240      	negs	r0, r0
     1c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1ca:	4770      	bx	lr
     1cc:	4252      	negs	r2, r2
     1ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1d2:	f000 f821 	bl	218 <__udivmoddi4>
     1d6:	f8dd e004 	ldr.w	lr, [sp, #4]
     1da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1de:	b004      	add	sp, #16
     1e0:	4252      	negs	r2, r2
     1e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e6:	4770      	bx	lr

000001e8 <__aeabi_uldivmod>:
     1e8:	b953      	cbnz	r3, 200 <CONFIG_SHELL_HISTORY_BUFFER>
     1ea:	b94a      	cbnz	r2, 200 <CONFIG_SHELL_HISTORY_BUFFER>
     1ec:	2900      	cmp	r1, #0
     1ee:	bf08      	it	eq
     1f0:	2800      	cmpeq	r0, #0
     1f2:	bf1c      	itt	ne
     1f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1fc:	f000 b970 	b.w	4e0 <__aeabi_idiv0>
     200:	f1ad 0c08 	sub.w	ip, sp, #8
     204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     208:	f000 f806 	bl	218 <__udivmoddi4>
     20c:	f8dd e004 	ldr.w	lr, [sp, #4]
     210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     214:	b004      	add	sp, #16
     216:	4770      	bx	lr

00000218 <__udivmoddi4>:
     218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     21c:	9e08      	ldr	r6, [sp, #32]
     21e:	460d      	mov	r5, r1
     220:	4604      	mov	r4, r0
     222:	468a      	mov	sl, r1
     224:	2b00      	cmp	r3, #0
     226:	d17f      	bne.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     228:	428a      	cmp	r2, r1
     22a:	4617      	mov	r7, r2
     22c:	d941      	bls.n	2b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x32>
     22e:	fab2 f282 	clz	r2, r2
     232:	b14a      	cbz	r2, 248 <__udivmoddi4+0x30>
     234:	f1c2 0120 	rsb	r1, r2, #32
     238:	fa05 f302 	lsl.w	r3, r5, r2
     23c:	4097      	lsls	r7, r2
     23e:	4094      	lsls	r4, r2
     240:	fa20 f101 	lsr.w	r1, r0, r1
     244:	ea41 0a03 	orr.w	sl, r1, r3
     248:	ea4f 4817 	mov.w	r8, r7, lsr #16
     24c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     250:	fa1f f987 	uxth.w	r9, r7
     254:	fbba fef8 	udiv	lr, sl, r8
     258:	fb08 a31e 	mls	r3, r8, lr, sl
     25c:	fb0e f109 	mul.w	r1, lr, r9
     260:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     264:	4299      	cmp	r1, r3
     266:	d906      	bls.n	276 <__udivmoddi4+0x5e>
     268:	18fb      	adds	r3, r7, r3
     26a:	d202      	bcs.n	272 <__udivmoddi4+0x5a>
     26c:	4299      	cmp	r1, r3
     26e:	f200 8124 	bhi.w	4ba <CONFIG_FLASH_SIZE+0xba>
     272:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
     276:	1a59      	subs	r1, r3, r1
     278:	b2a3      	uxth	r3, r4
     27a:	fbb1 f0f8 	udiv	r0, r1, r8
     27e:	fb08 1110 	mls	r1, r8, r0, r1
     282:	fb00 f909 	mul.w	r9, r0, r9
     286:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     28a:	45a1      	cmp	r9, r4
     28c:	d905      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     28e:	193c      	adds	r4, r7, r4
     290:	d202      	bcs.n	298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     292:	45a1      	cmp	r9, r4
     294:	f200 810e 	bhi.w	4b4 <CONFIG_FLASH_SIZE+0xb4>
     298:	3801      	subs	r0, #1
     29a:	eba4 0409 	sub.w	r4, r4, r9
     29e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2a2:	2100      	movs	r1, #0
     2a4:	b11e      	cbz	r6, 2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     2a6:	40d4      	lsrs	r4, r2
     2a8:	2300      	movs	r3, #0
     2aa:	e9c6 4300 	strd	r4, r3, [r6]
     2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2b2:	b902      	cbnz	r2, 2b6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x36>
     2b4:	deff      	udf	#255	; 0xff
     2b6:	fab2 f282 	clz	r2, r2
     2ba:	2a00      	cmp	r2, #0
     2bc:	d14f      	bne.n	35e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5e>
     2be:	1bcb      	subs	r3, r1, r7
     2c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c4:	fa1f f887 	uxth.w	r8, r7
     2c8:	2101      	movs	r1, #1
     2ca:	0c25      	lsrs	r5, r4, #16
     2cc:	fbb3 fcfe 	udiv	ip, r3, lr
     2d0:	fb0e 301c 	mls	r0, lr, ip, r3
     2d4:	462b      	mov	r3, r5
     2d6:	fb08 f90c 	mul.w	r9, r8, ip
     2da:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     2de:	45a9      	cmp	r9, r5
     2e0:	d90a      	bls.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     2e2:	197d      	adds	r5, r7, r5
     2e4:	bf2c      	ite	cs
     2e6:	2301      	movcs	r3, #1
     2e8:	2300      	movcc	r3, #0
     2ea:	45a9      	cmp	r9, r5
     2ec:	d902      	bls.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     2ee:	2b00      	cmp	r3, #0
     2f0:	f000 80d9 	beq.w	4a6 <CONFIG_FLASH_SIZE+0xa6>
     2f4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     2f8:	eba5 0509 	sub.w	r5, r5, r9
     2fc:	b2a3      	uxth	r3, r4
     2fe:	fbb5 f0fe 	udiv	r0, r5, lr
     302:	fb0e 5510 	mls	r5, lr, r0, r5
     306:	fb08 f800 	mul.w	r8, r8, r0
     30a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     30e:	45a0      	cmp	r8, r4
     310:	d905      	bls.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	193c      	adds	r4, r7, r4
     314:	d202      	bcs.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     316:	45a0      	cmp	r8, r4
     318:	f200 80c9 	bhi.w	4ae <CONFIG_FLASH_SIZE+0xae>
     31c:	3801      	subs	r0, #1
     31e:	eba4 0408 	sub.w	r4, r4, r8
     322:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     326:	e7bd      	b.n	2a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x24>
     328:	428b      	cmp	r3, r1
     32a:	d908      	bls.n	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     32c:	2e00      	cmp	r6, #0
     32e:	f000 80b1 	beq.w	494 <CONFIG_FLASH_SIZE+0x94>
     332:	2100      	movs	r1, #0
     334:	e9c6 0500 	strd	r0, r5, [r6]
     338:	4608      	mov	r0, r1
     33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     33e:	fab3 f183 	clz	r1, r3
     342:	2900      	cmp	r1, #0
     344:	d146      	bne.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     346:	42ab      	cmp	r3, r5
     348:	f0c0 80a7 	bcc.w	49a <CONFIG_FLASH_SIZE+0x9a>
     34c:	4282      	cmp	r2, r0
     34e:	f240 80a4 	bls.w	49a <CONFIG_FLASH_SIZE+0x9a>
     352:	4608      	mov	r0, r1
     354:	2e00      	cmp	r6, #0
     356:	d0aa      	beq.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     358:	e9c6 4a00 	strd	r4, sl, [r6]
     35c:	e7a7      	b.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     35e:	f1c2 0020 	rsb	r0, r2, #32
     362:	4097      	lsls	r7, r2
     364:	fa01 f302 	lsl.w	r3, r1, r2
     368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     36c:	40c1      	lsrs	r1, r0
     36e:	fa24 f500 	lsr.w	r5, r4, r0
     372:	fa1f f887 	uxth.w	r8, r7
     376:	4094      	lsls	r4, r2
     378:	431d      	orrs	r5, r3
     37a:	fbb1 f0fe 	udiv	r0, r1, lr
     37e:	0c2b      	lsrs	r3, r5, #16
     380:	fb0e 1110 	mls	r1, lr, r0, r1
     384:	fb00 fc08 	mul.w	ip, r0, r8
     388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     38c:	459c      	cmp	ip, r3
     38e:	d909      	bls.n	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     390:	18fb      	adds	r3, r7, r3
     392:	bf2c      	ite	cs
     394:	2101      	movcs	r1, #1
     396:	2100      	movcc	r1, #0
     398:	459c      	cmp	ip, r3
     39a:	d902      	bls.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39c:	2900      	cmp	r1, #0
     39e:	f000 8095 	beq.w	4cc <CONFIG_FLASH_SIZE+0xcc>
     3a2:	3801      	subs	r0, #1
     3a4:	eba3 030c 	sub.w	r3, r3, ip
     3a8:	b2ad      	uxth	r5, r5
     3aa:	fbb3 f1fe 	udiv	r1, r3, lr
     3ae:	fb0e 3311 	mls	r3, lr, r1, r3
     3b2:	fb01 fc08 	mul.w	ip, r1, r8
     3b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3ba:	45ac      	cmp	ip, r5
     3bc:	d905      	bls.n	3ca <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xca>
     3be:	197d      	adds	r5, r7, r5
     3c0:	d202      	bcs.n	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
     3c2:	45ac      	cmp	ip, r5
     3c4:	f200 8089 	bhi.w	4da <CONFIG_FLASH_SIZE+0xda>
     3c8:	3901      	subs	r1, #1
     3ca:	eba5 030c 	sub.w	r3, r5, ip
     3ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     3d2:	e77a      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     3d4:	f1c1 0420 	rsb	r4, r1, #32
     3d8:	408b      	lsls	r3, r1
     3da:	fa02 f701 	lsl.w	r7, r2, r1
     3de:	fa05 fc01 	lsl.w	ip, r5, r1
     3e2:	40e2      	lsrs	r2, r4
     3e4:	fa20 f804 	lsr.w	r8, r0, r4
     3e8:	40e5      	lsrs	r5, r4
     3ea:	fa00 fe01 	lsl.w	lr, r0, r1
     3ee:	4313      	orrs	r3, r2
     3f0:	ea48 020c 	orr.w	r2, r8, ip
     3f4:	ea4f 4813 	mov.w	r8, r3, lsr #16
     3f8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     3fc:	fa1f f983 	uxth.w	r9, r3
     400:	fbb5 faf8 	udiv	sl, r5, r8
     404:	fb08 551a 	mls	r5, r8, sl, r5
     408:	fb0a f009 	mul.w	r0, sl, r9
     40c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     410:	4560      	cmp	r0, ip
     412:	d90a      	bls.n	42a <CONFIG_FLASH_SIZE+0x2a>
     414:	eb13 0c0c 	adds.w	ip, r3, ip
     418:	bf2c      	ite	cs
     41a:	2501      	movcs	r5, #1
     41c:	2500      	movcc	r5, #0
     41e:	4560      	cmp	r0, ip
     420:	d901      	bls.n	426 <CONFIG_FLASH_SIZE+0x26>
     422:	2d00      	cmp	r5, #0
     424:	d055      	beq.n	4d2 <CONFIG_FLASH_SIZE+0xd2>
     426:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     42a:	ebac 0c00 	sub.w	ip, ip, r0
     42e:	b292      	uxth	r2, r2
     430:	fbbc f0f8 	udiv	r0, ip, r8
     434:	fb08 cc10 	mls	ip, r8, r0, ip
     438:	fb00 f909 	mul.w	r9, r0, r9
     43c:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     440:	45e1      	cmp	r9, ip
     442:	d905      	bls.n	450 <CONFIG_FLASH_SIZE+0x50>
     444:	eb13 0c0c 	adds.w	ip, r3, ip
     448:	d201      	bcs.n	44e <CONFIG_FLASH_SIZE+0x4e>
     44a:	45e1      	cmp	r9, ip
     44c:	d83b      	bhi.n	4c6 <CONFIG_FLASH_SIZE+0xc6>
     44e:	3801      	subs	r0, #1
     450:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     454:	ebac 0c09 	sub.w	ip, ip, r9
     458:	fba0 8907 	umull	r8, r9, r0, r7
     45c:	45cc      	cmp	ip, r9
     45e:	4645      	mov	r5, r8
     460:	464a      	mov	r2, r9
     462:	d302      	bcc.n	46a <CONFIG_FLASH_SIZE+0x6a>
     464:	d106      	bne.n	474 <CONFIG_FLASH_SIZE+0x74>
     466:	45c6      	cmp	lr, r8
     468:	d204      	bcs.n	474 <CONFIG_FLASH_SIZE+0x74>
     46a:	3801      	subs	r0, #1
     46c:	ebb8 0507 	subs.w	r5, r8, r7
     470:	eb69 0203 	sbc.w	r2, r9, r3
     474:	b32e      	cbz	r6, 4c2 <CONFIG_FLASH_SIZE+0xc2>
     476:	ebbe 0305 	subs.w	r3, lr, r5
     47a:	eb6c 0c02 	sbc.w	ip, ip, r2
     47e:	fa23 f201 	lsr.w	r2, r3, r1
     482:	fa0c f404 	lsl.w	r4, ip, r4
     486:	fa2c f301 	lsr.w	r3, ip, r1
     48a:	2100      	movs	r1, #0
     48c:	4314      	orrs	r4, r2
     48e:	e9c6 4300 	strd	r4, r3, [r6]
     492:	e70c      	b.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     494:	4631      	mov	r1, r6
     496:	4630      	mov	r0, r6
     498:	e709      	b.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     49a:	1a84      	subs	r4, r0, r2
     49c:	eb65 0303 	sbc.w	r3, r5, r3
     4a0:	2001      	movs	r0, #1
     4a2:	469a      	mov	sl, r3
     4a4:	e756      	b.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     4a6:	f1ac 0c02 	sub.w	ip, ip, #2
     4aa:	443d      	add	r5, r7
     4ac:	e724      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     4ae:	3802      	subs	r0, #2
     4b0:	443c      	add	r4, r7
     4b2:	e734      	b.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     4b4:	3802      	subs	r0, #2
     4b6:	443c      	add	r4, r7
     4b8:	e6ef      	b.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     4ba:	f1ae 0e02 	sub.w	lr, lr, #2
     4be:	443b      	add	r3, r7
     4c0:	e6d9      	b.n	276 <__udivmoddi4+0x5e>
     4c2:	4631      	mov	r1, r6
     4c4:	e6f3      	b.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     4c6:	3802      	subs	r0, #2
     4c8:	449c      	add	ip, r3
     4ca:	e7c1      	b.n	450 <CONFIG_FLASH_SIZE+0x50>
     4cc:	3802      	subs	r0, #2
     4ce:	443b      	add	r3, r7
     4d0:	e768      	b.n	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     4d2:	f1aa 0a02 	sub.w	sl, sl, #2
     4d6:	449c      	add	ip, r3
     4d8:	e7a7      	b.n	42a <CONFIG_FLASH_SIZE+0x2a>
     4da:	3902      	subs	r1, #2
     4dc:	443d      	add	r5, r7
     4de:	e774      	b.n	3ca <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xca>

000004e0 <__aeabi_idiv0>:
     4e0:	4770      	bx	lr
     4e2:	bf00      	nop
     4e4:	0000      	movs	r0, r0
	...

000004e8 <clock_settime>:
 */
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;

	if (clock_id != CLOCK_REALTIME) {
     4e8:	2801      	cmp	r0, #1
{
     4ea:	b570      	push	{r4, r5, r6, lr}
     4ec:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
     4ee:	d006      	beq.n	4fe <clock_settime+0x16>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
     4f0:	f005 ff14 	bl	631c <z_impl_z_errno>
		errno = EINVAL;
     4f4:	2316      	movs	r3, #22
     4f6:	6003      	str	r3, [r0, #0]
		return -1;
     4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	base.tv_nsec = delta % NSEC_PER_SEC;

	rt_clock_base = base;

	return 0;
}
     4fc:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_uptime_ticks();
     4fe:	f009 ffa1 	bl	a444 <z_impl_k_uptime_ticks>
	s64_t delta = (s64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
     502:	4b1b      	ldr	r3, [pc, #108]	; (570 <clock_settime+0x88>)
     504:	6834      	ldr	r4, [r6, #0]
     506:	460a      	mov	r2, r1
     508:	fba4 4503 	umull	r4, r5, r4, r3
     50c:	6871      	ldr	r1, [r6, #4]
     50e:	fb03 5501 	mla	r5, r3, r1, r5
     512:	68b3      	ldr	r3, [r6, #8]
     514:	18e4      	adds	r4, r4, r3
     516:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
     51a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     51e:	fba0 0103 	umull	r0, r1, r0, r3
     522:	fb03 1102 	mla	r1, r3, r2, r1
     526:	0bc2      	lsrs	r2, r0, #15
     528:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     52c:	0bc8      	lsrs	r0, r1, #15
		- elapsed_msecs * USEC_PER_MSEC * NSEC_PER_USEC;
     52e:	4911      	ldr	r1, [pc, #68]	; (574 <clock_settime+0x8c>)
     530:	fba2 2301 	umull	r2, r3, r2, r1
     534:	fb01 3300 	mla	r3, r1, r0, r3
     538:	1aa6      	subs	r6, r4, r2
     53a:	eb65 0503 	sbc.w	r5, r5, r3
	base.tv_sec = delta / NSEC_PER_SEC;
     53e:	4630      	mov	r0, r6
     540:	a309      	add	r3, pc, #36	; (adr r3, 568 <clock_settime+0x80>)
     542:	e9d3 2300 	ldrd	r2, r3, [r3]
     546:	4629      	mov	r1, r5
     548:	f7ff fdfe 	bl	148 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
     54c:	a306      	add	r3, pc, #24	; (adr r3, 568 <clock_settime+0x80>)
     54e:	e9d3 2300 	ldrd	r2, r3, [r3]
	rt_clock_base = base;
     552:	4c09      	ldr	r4, [pc, #36]	; (578 <clock_settime+0x90>)
     554:	e9c4 0100 	strd	r0, r1, [r4]
	base.tv_nsec = delta % NSEC_PER_SEC;
     558:	4630      	mov	r0, r6
     55a:	4629      	mov	r1, r5
     55c:	f7ff fdf4 	bl	148 <__aeabi_ldivmod>
	return 0;
     560:	2000      	movs	r0, #0
	base.tv_nsec = delta % NSEC_PER_SEC;
     562:	60a2      	str	r2, [r4, #8]
	return 0;
     564:	e7ca      	b.n	4fc <clock_settime+0x14>
     566:	bf00      	nop
     568:	3b9aca00 	.word	0x3b9aca00
     56c:	00000000 	.word	0x00000000
     570:	3b9aca00 	.word	0x3b9aca00
     574:	000f4240 	.word	0x000f4240
     578:	200002e8 	.word	0x200002e8

0000057c <timer_expired_handler>:
LOG_MODULE_REGISTER(app);

extern void foo(void);

void timer_expired_handler(struct k_timer *timer)
{
     57c:	b508      	push	{r3, lr}
	LOG_INF("Timer expired.");
     57e:	4b0a      	ldr	r3, [pc, #40]	; (5a8 <timer_expired_handler+0x2c>)
     580:	681b      	ldr	r3, [r3, #0]
     582:	f003 0307 	and.w	r3, r3, #7
     586:	2b02      	cmp	r3, #2
     588:	d909      	bls.n	59e <timer_expired_handler+0x22>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     58a:	4908      	ldr	r1, [pc, #32]	; (5ac <timer_expired_handler+0x30>)
     58c:	4b08      	ldr	r3, [pc, #32]	; (5b0 <timer_expired_handler+0x34>)
     58e:	4809      	ldr	r0, [pc, #36]	; (5b4 <timer_expired_handler+0x38>)
     590:	1ac9      	subs	r1, r1, r3
     592:	08c9      	lsrs	r1, r1, #3
     594:	0189      	lsls	r1, r1, #6
     596:	f041 0103 	orr.w	r1, r1, #3
     59a:	f007 ff17 	bl	83cc <log_0>

	/* Call another module to present logging from multiple sources. */
	foo();
}
     59e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	foo();
     5a2:	f000 b995 	b.w	8d0 <foo>
     5a6:	bf00      	nop
     5a8:	20000194 	.word	0x20000194
     5ac:	0000a974 	.word	0x0000a974
     5b0:	0000a974 	.word	0x0000a974
     5b4:	0000b430 	.word	0x0000b430

000005b8 <cmd_demo_ping>:
);

SHELL_CMD_REGISTER(log_test, &sub_log_test, "Log test", NULL);

static int cmd_demo_ping(const struct shell *shell, size_t argc, char **argv)
{
     5b8:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "pong");
     5ba:	2100      	movs	r1, #0
     5bc:	4a02      	ldr	r2, [pc, #8]	; (5c8 <cmd_demo_ping+0x10>)
     5be:	f008 fa9a 	bl	8af6 <shell_fprintf>

	return 0;
}
     5c2:	2000      	movs	r0, #0
     5c4:	bd08      	pop	{r3, pc}
     5c6:	bf00      	nop
     5c8:	0000b43f 	.word	0x0000b43f

000005cc <cmd_demo_params>:

static int cmd_demo_params(const struct shell *shell, size_t argc, char **argv)
{
     5cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	shell_print(shell, "argc = %d", argc);
     5d0:	460b      	mov	r3, r1
{
     5d2:	460d      	mov	r5, r1
     5d4:	4617      	mov	r7, r2
	shell_print(shell, "argc = %d", argc);
     5d6:	2100      	movs	r1, #0
     5d8:	4a0b      	ldr	r2, [pc, #44]	; (608 <cmd_demo_params+0x3c>)
{
     5da:	4606      	mov	r6, r0
	for (size_t cnt = 0; cnt < argc; cnt++) {
     5dc:	2400      	movs	r4, #0
	shell_print(shell, "argc = %d", argc);
     5de:	f008 fa8a 	bl	8af6 <shell_fprintf>
		shell_print(shell, "  argv[%d] = %s", cnt, argv[cnt]);
     5e2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 60c <cmd_demo_params+0x40>
	for (size_t cnt = 0; cnt < argc; cnt++) {
     5e6:	42ac      	cmp	r4, r5
     5e8:	d103      	bne.n	5f2 <cmd_demo_params+0x26>
	}

	return 0;
}
     5ea:	2000      	movs	r0, #0
     5ec:	b002      	add	sp, #8
     5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_print(shell, "  argv[%d] = %s", cnt, argv[cnt]);
     5f2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
     5f6:	4642      	mov	r2, r8
     5f8:	9300      	str	r3, [sp, #0]
     5fa:	2100      	movs	r1, #0
     5fc:	4623      	mov	r3, r4
     5fe:	4630      	mov	r0, r6
     600:	f008 fa79 	bl	8af6 <shell_fprintf>
	for (size_t cnt = 0; cnt < argc; cnt++) {
     604:	3401      	adds	r4, #1
     606:	e7ee      	b.n	5e6 <cmd_demo_params+0x1a>
     608:	0000b445 	.word	0x0000b445
     60c:	0000b450 	.word	0x0000b450

00000610 <cmd_version>:

	return 0;
}

static int cmd_version(const struct shell *shell, size_t argc, char **argv)
{
     610:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %s", KERNEL_VERSION_STRING);
     612:	2100      	movs	r1, #0
     614:	4b02      	ldr	r3, [pc, #8]	; (620 <cmd_version+0x10>)
     616:	4a03      	ldr	r2, [pc, #12]	; (624 <cmd_version+0x14>)
     618:	f008 fa6d 	bl	8af6 <shell_fprintf>

	return 0;
}
     61c:	2000      	movs	r0, #0
     61e:	bd08      	pop	{r3, pc}
     620:	0000b461 	.word	0x0000b461
     624:	0000b46b 	.word	0x0000b46b

00000628 <cmd_demo_hexdump>:
{
     628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	shell_print(shell, "argc = %d", argc);
     62c:	460b      	mov	r3, r1
{
     62e:	460d      	mov	r5, r1
     630:	4617      	mov	r7, r2
	shell_print(shell, "argc = %d", argc);
     632:	2100      	movs	r1, #0
     634:	4a0e      	ldr	r2, [pc, #56]	; (670 <cmd_demo_hexdump+0x48>)
{
     636:	4606      	mov	r6, r0
	for (size_t cnt = 0; cnt < argc; cnt++) {
     638:	2400      	movs	r4, #0
	shell_print(shell, "argc = %d", argc);
     63a:	f008 fa5c 	bl	8af6 <shell_fprintf>
		shell_print(shell, "argv[%d]", cnt);
     63e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 674 <cmd_demo_hexdump+0x4c>
	for (size_t cnt = 0; cnt < argc; cnt++) {
     642:	42ac      	cmp	r4, r5
     644:	d102      	bne.n	64c <cmd_demo_hexdump+0x24>
}
     646:	2000      	movs	r0, #0
     648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		shell_print(shell, "argv[%d]", cnt);
     64c:	4623      	mov	r3, r4
     64e:	464a      	mov	r2, r9
     650:	2100      	movs	r1, #0
     652:	4630      	mov	r0, r6
     654:	f008 fa4f 	bl	8af6 <shell_fprintf>
		shell_hexdump(shell, argv[cnt], strlen(argv[cnt]));
     658:	f857 8024 	ldr.w	r8, [r7, r4, lsl #2]
	for (size_t cnt = 0; cnt < argc; cnt++) {
     65c:	3401      	adds	r4, #1
		shell_hexdump(shell, argv[cnt], strlen(argv[cnt]));
     65e:	4640      	mov	r0, r8
     660:	f009 faa3 	bl	9baa <strlen>
     664:	4641      	mov	r1, r8
     666:	4602      	mov	r2, r0
     668:	4630      	mov	r0, r6
     66a:	f002 fd85 	bl	3178 <shell_hexdump>
	for (size_t cnt = 0; cnt < argc; cnt++) {
     66e:	e7e8      	b.n	642 <cmd_demo_hexdump+0x1a>
     670:	0000b445 	.word	0x0000b445
     674:	0000b47e 	.word	0x0000b47e

00000678 <cmd_power>:
#define MAX_CHANNEL_NUM 	7	// we have 8 channels (0-7)
#define MAX_TARGET_NUM		3	// we have 4 targets (0-3)
#define MAX_ADC_NUM			15	// we have 16 ADC channels (0-15)

static int cmd_power(const struct shell *shell, size_t argc, char **argv)
{
     678:	b5f0      	push	{r4, r5, r6, r7, lr}
     67a:	4614      	mov	r4, r2
	char *after_num = NULL;
     67c:	2700      	movs	r7, #0
{
     67e:	b085      	sub	sp, #20
     680:	4605      	mov	r5, r0
	int channel = strtol(argv[1], &after_num, 10);
     682:	220a      	movs	r2, #10
     684:	6860      	ldr	r0, [r4, #4]
     686:	a903      	add	r1, sp, #12
	char *after_num = NULL;
     688:	9703      	str	r7, [sp, #12]
	int channel = strtol(argv[1], &after_num, 10);
     68a:	f009 f9cd 	bl	9a28 <strtol>
	if (channel < 0 || channel > MAX_TARGET_NUM) {
     68e:	2803      	cmp	r0, #3
	int channel = strtol(argv[1], &after_num, 10);
     690:	4606      	mov	r6, r0
	if (channel < 0 || channel > MAX_TARGET_NUM) {
     692:	d908      	bls.n	6a6 <cmd_power+0x2e>
		shell_print(shell, "wrong parameter <target> \nERROR");
     694:	4a13      	ldr	r2, [pc, #76]	; (6e4 <cmd_power+0x6c>)
		return -1;
	}
	if (strcmp("off", argv[2]) != 0 && strcmp("ppk", argv[2]) != 0 && strcmp("on", argv[1]) != 0) 
	{
		shell_print(shell, "wrong parameter <state> \nERROR");
     696:	4628      	mov	r0, r5
     698:	4639      	mov	r1, r7
     69a:	f008 fa2c 	bl	8af6 <shell_fprintf>
		return -1;
     69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
	char *state = argv[2];
	shell_print(shell, "Received command: power state: %s on target: %d", state, channel);
	shell_print(shell, "OK");
	return 0;
}
     6a2:	b005      	add	sp, #20
     6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp("off", argv[2]) != 0 && strcmp("ppk", argv[2]) != 0 && strcmp("on", argv[1]) != 0) 
     6a6:	68a1      	ldr	r1, [r4, #8]
     6a8:	480f      	ldr	r0, [pc, #60]	; (6e8 <cmd_power+0x70>)
     6aa:	f009 fa85 	bl	9bb8 <strcmp>
     6ae:	b158      	cbz	r0, 6c8 <cmd_power+0x50>
     6b0:	68a1      	ldr	r1, [r4, #8]
     6b2:	480e      	ldr	r0, [pc, #56]	; (6ec <cmd_power+0x74>)
     6b4:	f009 fa80 	bl	9bb8 <strcmp>
     6b8:	b130      	cbz	r0, 6c8 <cmd_power+0x50>
     6ba:	6861      	ldr	r1, [r4, #4]
     6bc:	480c      	ldr	r0, [pc, #48]	; (6f0 <cmd_power+0x78>)
     6be:	f009 fa7b 	bl	9bb8 <strcmp>
     6c2:	b108      	cbz	r0, 6c8 <cmd_power+0x50>
		shell_print(shell, "wrong parameter <state> \nERROR");
     6c4:	4a0b      	ldr	r2, [pc, #44]	; (6f4 <cmd_power+0x7c>)
     6c6:	e7e6      	b.n	696 <cmd_power+0x1e>
	shell_print(shell, "Received command: power state: %s on target: %d", state, channel);
     6c8:	2100      	movs	r1, #0
     6ca:	4628      	mov	r0, r5
     6cc:	68a3      	ldr	r3, [r4, #8]
     6ce:	4a0a      	ldr	r2, [pc, #40]	; (6f8 <cmd_power+0x80>)
     6d0:	9600      	str	r6, [sp, #0]
     6d2:	f008 fa10 	bl	8af6 <shell_fprintf>
	shell_print(shell, "OK");
     6d6:	4628      	mov	r0, r5
     6d8:	2100      	movs	r1, #0
     6da:	4a08      	ldr	r2, [pc, #32]	; (6fc <cmd_power+0x84>)
     6dc:	f008 fa0b 	bl	8af6 <shell_fprintf>
	return 0;
     6e0:	2000      	movs	r0, #0
     6e2:	e7de      	b.n	6a2 <cmd_power+0x2a>
     6e4:	0000b488 	.word	0x0000b488
     6e8:	0000b4a9 	.word	0x0000b4a9
     6ec:	0000b4ad 	.word	0x0000b4ad
     6f0:	0000b718 	.word	0x0000b718
     6f4:	0000b4b1 	.word	0x0000b4b1
     6f8:	0000b4d1 	.word	0x0000b4d1
     6fc:	0000b502 	.word	0x0000b502

00000700 <cmd_adc>:
	return 0;
}
SHELL_CMD_ARG_REGISTER(reset, NULL, "parameters: <channel num (0-7)>", cmd_reset, 2, 0);

static int cmd_adc(const struct shell *shell, size_t argc, char **argv)
{
     700:	4613      	mov	r3, r2
     702:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char *after_num = NULL;
     704:	2400      	movs	r4, #0
{
     706:	4605      	mov	r5, r0
	int channel = strtol(argv[1], &after_num, 10);
     708:	220a      	movs	r2, #10
     70a:	6858      	ldr	r0, [r3, #4]
     70c:	a901      	add	r1, sp, #4
	char *after_num = NULL;
     70e:	9401      	str	r4, [sp, #4]
	int channel = strtol(argv[1], &after_num, 10);
     710:	f009 f98a 	bl	9a28 <strtol>
	if (channel < 0 || channel > MAX_ADC_NUM) {
     714:	280f      	cmp	r0, #15
	int channel = strtol(argv[1], &after_num, 10);
     716:	4603      	mov	r3, r0
	if (channel < 0 || channel > MAX_ADC_NUM) {
     718:	d908      	bls.n	72c <cmd_adc+0x2c>
		shell_print(shell, "ERROR: wrong parameter <channel>");
     71a:	4628      	mov	r0, r5
     71c:	4621      	mov	r1, r4
     71e:	4a07      	ldr	r2, [pc, #28]	; (73c <cmd_adc+0x3c>)
     720:	f008 f9e9 	bl	8af6 <shell_fprintf>
     724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		shell_print(shell, "ERROR: wrong parameter <channel>");
		return -1;
	}
	shell_print(shell, "Received command: adc channel %d.", channel);
	return 0;
}
     728:	b003      	add	sp, #12
     72a:	bd30      	pop	{r4, r5, pc}
	shell_print(shell, "Received command: adc channel %d.", channel);
     72c:	4628      	mov	r0, r5
     72e:	4621      	mov	r1, r4
     730:	4a03      	ldr	r2, [pc, #12]	; (740 <cmd_adc+0x40>)
     732:	f008 f9e0 	bl	8af6 <shell_fprintf>
	return 0;
     736:	4620      	mov	r0, r4
     738:	e7f6      	b.n	728 <cmd_adc+0x28>
     73a:	bf00      	nop
     73c:	0000b506 	.word	0x0000b506
     740:	0000b528 	.word	0x0000b528

00000744 <cmd_jtag>:
{
     744:	b573      	push	{r0, r1, r4, r5, r6, lr}
     746:	4605      	mov	r5, r0
	if (strcmp("off", argv[1]) == 0) 
     748:	6851      	ldr	r1, [r2, #4]
     74a:	4813      	ldr	r0, [pc, #76]	; (798 <cmd_jtag+0x54>)
{
     74c:	4616      	mov	r6, r2
	if (strcmp("off", argv[1]) == 0) 
     74e:	f009 fa33 	bl	9bb8 <strcmp>
     752:	4604      	mov	r4, r0
     754:	b938      	cbnz	r0, 766 <cmd_jtag+0x22>
		shell_print(shell, "Received command: jtag all lines off.");
     756:	4601      	mov	r1, r0
     758:	4a10      	ldr	r2, [pc, #64]	; (79c <cmd_jtag+0x58>)
     75a:	4628      	mov	r0, r5
     75c:	f008 f9cb 	bl	8af6 <shell_fprintf>
}
     760:	4620      	mov	r0, r4
     762:	b002      	add	sp, #8
     764:	bd70      	pop	{r4, r5, r6, pc}
		char *after_num = NULL;
     766:	2400      	movs	r4, #0
		int channel = strtol(argv[1], &after_num, 10);
     768:	220a      	movs	r2, #10
     76a:	6870      	ldr	r0, [r6, #4]
     76c:	a901      	add	r1, sp, #4
		char *after_num = NULL;
     76e:	9401      	str	r4, [sp, #4]
		int channel = strtol(argv[1], &after_num, 10);
     770:	f009 f95a 	bl	9a28 <strtol>
		if (channel < 0 || channel > MAX_CHANNEL_NUM) {
     774:	2807      	cmp	r0, #7
		int channel = strtol(argv[1], &after_num, 10);
     776:	4603      	mov	r3, r0
		if (channel < 0 || channel > MAX_CHANNEL_NUM) {
     778:	d907      	bls.n	78a <cmd_jtag+0x46>
			shell_print(shell, "ERROR: wrong parameter <channel>");
     77a:	4621      	mov	r1, r4
     77c:	4628      	mov	r0, r5
     77e:	4a08      	ldr	r2, [pc, #32]	; (7a0 <cmd_jtag+0x5c>)
     780:	f008 f9b9 	bl	8af6 <shell_fprintf>
     784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     788:	e7ea      	b.n	760 <cmd_jtag+0x1c>
		shell_print(shell, "Received command: jtag channel %d on.", channel);
     78a:	4621      	mov	r1, r4
     78c:	4628      	mov	r0, r5
     78e:	4a05      	ldr	r2, [pc, #20]	; (7a4 <cmd_jtag+0x60>)
     790:	f008 f9b1 	bl	8af6 <shell_fprintf>
     794:	e7e4      	b.n	760 <cmd_jtag+0x1c>
     796:	bf00      	nop
     798:	0000b4a9 	.word	0x0000b4a9
     79c:	0000b54b 	.word	0x0000b54b
     7a0:	0000b506 	.word	0x0000b506
     7a4:	0000b572 	.word	0x0000b572

000007a8 <cmd_led>:
SHELL_CMD_ARG_REGISTER(adc, NULL, "parameters: <adc channel num (0-15)>", cmd_adc, 2, 0);

static int cmd_led(const struct shell *shell, size_t argc, char **argv)
{
     7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7aa:	4614      	mov	r4, r2
	char *after_num = NULL;
     7ac:	2700      	movs	r7, #0
{
     7ae:	b085      	sub	sp, #20
     7b0:	4605      	mov	r5, r0
	int channel = strtol(argv[1], &after_num, 10);
     7b2:	220a      	movs	r2, #10
     7b4:	6860      	ldr	r0, [r4, #4]
     7b6:	a903      	add	r1, sp, #12
	char *after_num = NULL;
     7b8:	9703      	str	r7, [sp, #12]
	int channel = strtol(argv[1], &after_num, 10);
     7ba:	f009 f935 	bl	9a28 <strtol>
	if (channel < 0 || channel > MAX_CHANNEL_NUM) {
     7be:	2807      	cmp	r0, #7
	int channel = strtol(argv[1], &after_num, 10);
     7c0:	4606      	mov	r6, r0
	if (channel < 0 || channel > MAX_CHANNEL_NUM) {
     7c2:	d908      	bls.n	7d6 <cmd_led+0x2e>
		shell_print(shell, "ERROR: wrong parameter <channel>");
     7c4:	4a0e      	ldr	r2, [pc, #56]	; (800 <CONFIG_ISR_STACK_SIZE>)
		return -1;
	}
	if (strcmp("off", argv[2]) != 0 && strcmp("on", argv[1]) != 0) 
	{
		shell_print(shell, "wrong parameter <state> \nERROR");
     7c6:	4628      	mov	r0, r5
     7c8:	4639      	mov	r1, r7
     7ca:	f008 f994 	bl	8af6 <shell_fprintf>
     7ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}
	char *state = argv[2];
	shell_print(shell, "Received command: led state: %s on channel: %d", state, channel);
	return 0;
}
     7d2:	b005      	add	sp, #20
     7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp("off", argv[2]) != 0 && strcmp("on", argv[1]) != 0) 
     7d6:	68a1      	ldr	r1, [r4, #8]
     7d8:	480a      	ldr	r0, [pc, #40]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7da:	f009 f9ed 	bl	9bb8 <strcmp>
     7de:	b130      	cbz	r0, 7ee <cmd_led+0x46>
     7e0:	6861      	ldr	r1, [r4, #4]
     7e2:	4809      	ldr	r0, [pc, #36]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7e4:	f009 f9e8 	bl	9bb8 <strcmp>
     7e8:	b108      	cbz	r0, 7ee <cmd_led+0x46>
		shell_print(shell, "wrong parameter <state> \nERROR");
     7ea:	4a08      	ldr	r2, [pc, #32]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7ec:	e7eb      	b.n	7c6 <cmd_led+0x1e>
	shell_print(shell, "Received command: led state: %s on channel: %d", state, channel);
     7ee:	4628      	mov	r0, r5
     7f0:	2100      	movs	r1, #0
     7f2:	68a3      	ldr	r3, [r4, #8]
     7f4:	4a06      	ldr	r2, [pc, #24]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7f6:	9600      	str	r6, [sp, #0]
     7f8:	f008 f97d 	bl	8af6 <shell_fprintf>
	return 0;
     7fc:	2000      	movs	r0, #0
     7fe:	e7e8      	b.n	7d2 <cmd_led+0x2a>
     800:	0000b506 	.word	0x0000b506
     804:	0000b4a9 	.word	0x0000b4a9
     808:	0000b718 	.word	0x0000b718
     80c:	0000b4b1 	.word	0x0000b4b1
     810:	0000b599 	.word	0x0000b599

00000814 <cmd_log_test_stop>:
{
     814:	b510      	push	{r4, lr}
     816:	4604      	mov	r4, r0
	z_impl_k_timer_stop(timer);
     818:	4804      	ldr	r0, [pc, #16]	; (82c <cmd_log_test_stop+0x18>)
     81a:	f009 fe21 	bl	a460 <z_impl_k_timer_stop>
	shell_print(shell, "Log test stopped");
     81e:	4620      	mov	r0, r4
     820:	2100      	movs	r1, #0
     822:	4a03      	ldr	r2, [pc, #12]	; (830 <cmd_log_test_stop+0x1c>)
     824:	f008 f967 	bl	8af6 <shell_fprintf>
}
     828:	2000      	movs	r0, #0
     82a:	bd10      	pop	{r4, pc}
     82c:	200001c8 	.word	0x200001c8
     830:	0000b5c9 	.word	0x0000b5c9

00000834 <cmd_log_test_start_demo>:
{
     834:	b513      	push	{r0, r1, r4, lr}
     836:	f641 129a 	movw	r2, #6554	; 0x199a
     83a:	4604      	mov	r4, r0
			return (u32_t)((t * to_hz + off) / from_hz);
     83c:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
     83e:	4806      	ldr	r0, [pc, #24]	; (858 <cmd_log_test_start_demo+0x24>)
     840:	e9cd 2300 	strd	r2, r3, [sp]
     844:	f006 ff0e 	bl	7664 <z_impl_k_timer_start>
	shell_print(shell, "Log test started\n");
     848:	4620      	mov	r0, r4
     84a:	2100      	movs	r1, #0
     84c:	4a03      	ldr	r2, [pc, #12]	; (85c <cmd_log_test_start_demo+0x28>)
     84e:	f008 f952 	bl	8af6 <shell_fprintf>
}
     852:	2000      	movs	r0, #0
     854:	b002      	add	sp, #8
     856:	bd10      	pop	{r4, pc}
     858:	200001c8 	.word	0x200001c8
     85c:	0000b5db 	.word	0x0000b5db

00000860 <cmd_log_test_start_flood>:
{
     860:	b513      	push	{r0, r1, r4, lr}
     862:	f44f 72a4 	mov.w	r2, #328	; 0x148
     866:	4604      	mov	r4, r0
     868:	2300      	movs	r3, #0
     86a:	4806      	ldr	r0, [pc, #24]	; (884 <cmd_log_test_start_flood+0x24>)
     86c:	e9cd 2300 	strd	r2, r3, [sp]
     870:	f006 fef8 	bl	7664 <z_impl_k_timer_start>
	shell_print(shell, "Log test started\n");
     874:	4620      	mov	r0, r4
     876:	2100      	movs	r1, #0
     878:	4a03      	ldr	r2, [pc, #12]	; (888 <cmd_log_test_start_flood+0x28>)
     87a:	f008 f93c 	bl	8af6 <shell_fprintf>
}
     87e:	2000      	movs	r0, #0
     880:	b002      	add	sp, #8
     882:	bd10      	pop	{r4, pc}
     884:	200001c8 	.word	0x200001c8
     888:	0000b5db 	.word	0x0000b5db

0000088c <cmd_reset>:
{
     88c:	4613      	mov	r3, r2
     88e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char *after_num = NULL;
     890:	2400      	movs	r4, #0
{
     892:	4605      	mov	r5, r0
	int channel = strtol(argv[1], &after_num, 10);
     894:	220a      	movs	r2, #10
     896:	6858      	ldr	r0, [r3, #4]
     898:	a901      	add	r1, sp, #4
	char *after_num = NULL;
     89a:	9401      	str	r4, [sp, #4]
	int channel = strtol(argv[1], &after_num, 10);
     89c:	f009 f8c4 	bl	9a28 <strtol>
	if (channel < 0 || channel > MAX_CHANNEL_NUM) {
     8a0:	2807      	cmp	r0, #7
	int channel = strtol(argv[1], &after_num, 10);
     8a2:	4603      	mov	r3, r0
	if (channel < 0 || channel > MAX_CHANNEL_NUM) {
     8a4:	d908      	bls.n	8b8 <cmd_reset+0x2c>
		shell_print(shell, "ERROR: wrong parameter <channel>");
     8a6:	4628      	mov	r0, r5
     8a8:	4621      	mov	r1, r4
     8aa:	4a07      	ldr	r2, [pc, #28]	; (8c8 <cmd_reset+0x3c>)
     8ac:	f008 f923 	bl	8af6 <shell_fprintf>
     8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     8b4:	b003      	add	sp, #12
     8b6:	bd30      	pop	{r4, r5, pc}
	shell_print(shell, "Received command: reset channel %d.", channel);
     8b8:	4628      	mov	r0, r5
     8ba:	4621      	mov	r1, r4
     8bc:	4a03      	ldr	r2, [pc, #12]	; (8cc <cmd_reset+0x40>)
     8be:	f008 f91a 	bl	8af6 <shell_fprintf>
	return 0;
     8c2:	4620      	mov	r0, r4
     8c4:	e7f6      	b.n	8b4 <cmd_reset+0x28>
     8c6:	bf00      	nop
     8c8:	0000b506 	.word	0x0000b506
     8cc:	0000b5ee 	.word	0x0000b5ee

000008d0 <foo>:

#include <logging/log.h>
LOG_MODULE_REGISTER(app_test);

void foo(void)
{
     8d0:	b510      	push	{r4, lr}
	LOG_INF("info message");
     8d2:	4c17      	ldr	r4, [pc, #92]	; (930 <foo+0x60>)
     8d4:	6823      	ldr	r3, [r4, #0]
     8d6:	f003 0307 	and.w	r3, r3, #7
     8da:	2b02      	cmp	r3, #2
     8dc:	d909      	bls.n	8f2 <foo+0x22>
     8de:	4915      	ldr	r1, [pc, #84]	; (934 <foo+0x64>)
     8e0:	4b15      	ldr	r3, [pc, #84]	; (938 <foo+0x68>)
     8e2:	4816      	ldr	r0, [pc, #88]	; (93c <foo+0x6c>)
     8e4:	1ac9      	subs	r1, r1, r3
     8e6:	08c9      	lsrs	r1, r1, #3
     8e8:	0189      	lsls	r1, r1, #6
     8ea:	f041 0103 	orr.w	r1, r1, #3
     8ee:	f007 fd6d 	bl	83cc <log_0>
	LOG_WRN("warning message");
     8f2:	6823      	ldr	r3, [r4, #0]
     8f4:	f013 0f06 	tst.w	r3, #6
     8f8:	d009      	beq.n	90e <foo+0x3e>
     8fa:	490e      	ldr	r1, [pc, #56]	; (934 <foo+0x64>)
     8fc:	4b0e      	ldr	r3, [pc, #56]	; (938 <foo+0x68>)
     8fe:	4810      	ldr	r0, [pc, #64]	; (940 <foo+0x70>)
     900:	1ac9      	subs	r1, r1, r3
     902:	08c9      	lsrs	r1, r1, #3
     904:	0189      	lsls	r1, r1, #6
     906:	f041 0102 	orr.w	r1, r1, #2
     90a:	f007 fd5f 	bl	83cc <log_0>
	LOG_ERR("err message");
     90e:	6823      	ldr	r3, [r4, #0]
     910:	075b      	lsls	r3, r3, #29
     912:	d00b      	beq.n	92c <foo+0x5c>
}
     914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     918:	4906      	ldr	r1, [pc, #24]	; (934 <foo+0x64>)
     91a:	4b07      	ldr	r3, [pc, #28]	; (938 <foo+0x68>)
	LOG_ERR("err message");
     91c:	4809      	ldr	r0, [pc, #36]	; (944 <foo+0x74>)
     91e:	1ac9      	subs	r1, r1, r3
     920:	08c9      	lsrs	r1, r1, #3
     922:	0189      	lsls	r1, r1, #6
     924:	f041 0101 	orr.w	r1, r1, #1
     928:	f007 bd50 	b.w	83cc <log_0>
}
     92c:	bd10      	pop	{r4, pc}
     92e:	bf00      	nop
     930:	20000198 	.word	0x20000198
     934:	0000a97c 	.word	0x0000a97c
     938:	0000a974 	.word	0x0000a974
     93c:	0000b82e 	.word	0x0000b82e
     940:	0000b83b 	.word	0x0000b83b
     944:	0000b84b 	.word	0x0000b84b

00000948 <dynamic_cmd_get>:
}

/* dynamic command creation */
static void dynamic_cmd_get(size_t idx, struct shell_static_entry *entry)
{
	if (idx < dynamic_cmd_cnt) {
     948:	4b08      	ldr	r3, [pc, #32]	; (96c <dynamic_cmd_get+0x24>)
     94a:	781b      	ldrb	r3, [r3, #0]
     94c:	4283      	cmp	r3, r0
     94e:	d90a      	bls.n	966 <dynamic_cmd_get+0x1e>
		/* m_dynamic_cmd_buffer must be sorted alphabetically to ensure
		 * correct CLI completion
		 */
		entry->syntax = dynamic_cmd_buffer[idx];
     950:	4b07      	ldr	r3, [pc, #28]	; (970 <dynamic_cmd_get+0x28>)
     952:	eb00 1040 	add.w	r0, r0, r0, lsl #5
     956:	4418      	add	r0, r3
		entry->handler  = NULL;
     958:	2300      	movs	r3, #0
		entry->subcmd = NULL;
     95a:	e9c1 3302 	strd	r3, r3, [r1, #8]
		entry->help = "Show dynamic command name.";
     95e:	4b05      	ldr	r3, [pc, #20]	; (974 <dynamic_cmd_get+0x2c>)
		entry->syntax = dynamic_cmd_buffer[idx];
     960:	6008      	str	r0, [r1, #0]
		entry->help = "Show dynamic command name.";
     962:	604b      	str	r3, [r1, #4]
     964:	4770      	bx	lr
	} else {
		/* if there are no more dynamic commands available syntax
		 * must be set to NULL.
		 */
		entry->syntax = NULL;
     966:	2300      	movs	r3, #0
     968:	600b      	str	r3, [r1, #0]
	}
}
     96a:	4770      	bx	lr
     96c:	20001190 	.word	0x20001190
     970:	20000efc 	.word	0x20000efc
     974:	0000b860 	.word	0x0000b860

00000978 <cmd_dynamic_show>:
{
     978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (dynamic_cmd_cnt == 0U) {
     97c:	4d12      	ldr	r5, [pc, #72]	; (9c8 <cmd_dynamic_show+0x50>)
{
     97e:	4606      	mov	r6, r0
	if (dynamic_cmd_cnt == 0U) {
     980:	782a      	ldrb	r2, [r5, #0]
     982:	b942      	cbnz	r2, 996 <cmd_dynamic_show+0x1e>
		shell_warn(shell, "Please add some commands first.");
     984:	2104      	movs	r1, #4
     986:	4a11      	ldr	r2, [pc, #68]	; (9cc <cmd_dynamic_show+0x54>)
     988:	f008 f8b5 	bl	8af6 <shell_fprintf>
     98c:	f06f 0007 	mvn.w	r0, #7
}
     990:	b002      	add	sp, #8
     992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	shell_print(shell, "Dynamic command list:");
     996:	2100      	movs	r1, #0
     998:	4a0d      	ldr	r2, [pc, #52]	; (9d0 <cmd_dynamic_show+0x58>)
     99a:	f008 f8ac 	bl	8af6 <shell_fprintf>
	for (u8_t i = 0; i < dynamic_cmd_cnt; i++) {
     99e:	2400      	movs	r4, #0
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
     9a0:	4f0c      	ldr	r7, [pc, #48]	; (9d4 <cmd_dynamic_show+0x5c>)
     9a2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9d8 <cmd_dynamic_show+0x60>
	for (u8_t i = 0; i < dynamic_cmd_cnt; i++) {
     9a6:	7829      	ldrb	r1, [r5, #0]
     9a8:	b2e3      	uxtb	r3, r4
     9aa:	4299      	cmp	r1, r3
     9ac:	d801      	bhi.n	9b2 <cmd_dynamic_show+0x3a>
	return 0;
     9ae:	2000      	movs	r0, #0
     9b0:	e7ee      	b.n	990 <cmd_dynamic_show+0x18>
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
     9b2:	eb03 1143 	add.w	r1, r3, r3, lsl #5
     9b6:	4439      	add	r1, r7
     9b8:	9100      	str	r1, [sp, #0]
     9ba:	4642      	mov	r2, r8
     9bc:	2100      	movs	r1, #0
     9be:	4630      	mov	r0, r6
     9c0:	f008 f899 	bl	8af6 <shell_fprintf>
	for (u8_t i = 0; i < dynamic_cmd_cnt; i++) {
     9c4:	3401      	adds	r4, #1
     9c6:	e7ee      	b.n	9a6 <cmd_dynamic_show+0x2e>
     9c8:	20001190 	.word	0x20001190
     9cc:	0000b87b 	.word	0x0000b87b
     9d0:	0000b89c 	.word	0x0000b89c
     9d4:	20000efc 	.word	0x20000efc
     9d8:	0000b8b3 	.word	0x0000b8b3

000009dc <cmd_dynamic_execute>:
{
     9dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
     9e0:	4606      	mov	r6, r0
     9e2:	4615      	mov	r5, r2
	for (u8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
     9e4:	2700      	movs	r7, #0
     9e6:	f8df 8058 	ldr.w	r8, [pc, #88]	; a40 <cmd_dynamic_execute+0x64>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
     9ea:	f8df 9058 	ldr.w	r9, [pc, #88]	; a44 <cmd_dynamic_execute+0x68>
	for (u8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
     9ee:	f898 2000 	ldrb.w	r2, [r8]
     9f2:	b2fb      	uxtb	r3, r7
     9f4:	429a      	cmp	r2, r3
     9f6:	6869      	ldr	r1, [r5, #4]
     9f8:	d809      	bhi.n	a0e <cmd_dynamic_execute+0x32>
	shell_error(shell, "%s: uknown parameter: %s", argv[0], argv[1]);
     9fa:	9100      	str	r1, [sp, #0]
     9fc:	4630      	mov	r0, r6
     9fe:	2102      	movs	r1, #2
     a00:	682b      	ldr	r3, [r5, #0]
     a02:	4a0d      	ldr	r2, [pc, #52]	; (a38 <cmd_dynamic_execute+0x5c>)
     a04:	f008 f877 	bl	8af6 <shell_fprintf>
	return -ENOEXEC;
     a08:	f06f 0407 	mvn.w	r4, #7
     a0c:	e00f      	b.n	a2e <cmd_dynamic_execute+0x52>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
     a0e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
     a12:	eb09 0003 	add.w	r0, r9, r3
     a16:	f009 f8cf 	bl	9bb8 <strcmp>
     a1a:	3701      	adds	r7, #1
     a1c:	4604      	mov	r4, r0
     a1e:	2800      	cmp	r0, #0
     a20:	d1e5      	bne.n	9ee <cmd_dynamic_execute+0x12>
			shell_print(shell, "dynamic command: %s", argv[1]);
     a22:	4601      	mov	r1, r0
     a24:	686b      	ldr	r3, [r5, #4]
     a26:	4630      	mov	r0, r6
     a28:	4a04      	ldr	r2, [pc, #16]	; (a3c <cmd_dynamic_execute+0x60>)
     a2a:	f008 f864 	bl	8af6 <shell_fprintf>
}
     a2e:	4620      	mov	r0, r4
     a30:	b003      	add	sp, #12
     a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     a36:	bf00      	nop
     a38:	0000b8d2 	.word	0x0000b8d2
     a3c:	0000b8bd 	.word	0x0000b8bd
     a40:	20001190 	.word	0x20001190
     a44:	20000efc 	.word	0x20000efc

00000a48 <cmd_dynamic_remove>:
{
     a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (u8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
     a4c:	f8df a08c 	ldr.w	sl, [pc, #140]	; adc <cmd_dynamic_remove+0x94>
{
     a50:	4693      	mov	fp, r2
     a52:	4606      	mov	r6, r0
	for (u8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
     a54:	2200      	movs	r2, #0
     a56:	46d0      	mov	r8, sl
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
     a58:	f8df 9084 	ldr.w	r9, [pc, #132]	; ae0 <cmd_dynamic_remove+0x98>
	for (u8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
     a5c:	f89a 1000 	ldrb.w	r1, [sl]
     a60:	b2d4      	uxtb	r4, r2
     a62:	42a1      	cmp	r1, r4
     a64:	f8db 3004 	ldr.w	r3, [fp, #4]
     a68:	d807      	bhi.n	a7a <cmd_dynamic_remove+0x32>
	shell_error(shell, "did not find command: %s", argv[1]);
     a6a:	2102      	movs	r1, #2
     a6c:	4630      	mov	r0, r6
     a6e:	4a19      	ldr	r2, [pc, #100]	; (ad4 <cmd_dynamic_remove+0x8c>)
     a70:	f008 f841 	bl	8af6 <shell_fprintf>
	return -ENOEXEC;
     a74:	f06f 0507 	mvn.w	r5, #7
     a78:	e01a      	b.n	ab0 <cmd_dynamic_remove+0x68>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
     a7a:	eb04 1744 	add.w	r7, r4, r4, lsl #5
     a7e:	444f      	add	r7, r9
     a80:	4619      	mov	r1, r3
     a82:	4638      	mov	r0, r7
     a84:	9201      	str	r2, [sp, #4]
     a86:	f009 f897 	bl	9bb8 <strcmp>
     a8a:	9a01      	ldr	r2, [sp, #4]
     a8c:	4605      	mov	r5, r0
     a8e:	3201      	adds	r2, #1
     a90:	2800      	cmp	r0, #0
     a92:	d1e3      	bne.n	a5c <cmd_dynamic_remove+0x14>
			if (idx == MAX_CMD_CNT - 1) {
     a94:	2c13      	cmp	r4, #19
     a96:	d10f      	bne.n	ab8 <cmd_dynamic_remove+0x70>
				dynamic_cmd_buffer[idx][0] = '\0';
     a98:	f889 0273 	strb.w	r0, [r9, #627]	; 0x273
			--dynamic_cmd_cnt;
     a9c:	f898 3000 	ldrb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
     aa0:	2100      	movs	r1, #0
			--dynamic_cmd_cnt;
     aa2:	3b01      	subs	r3, #1
			shell_print(shell, "command removed successfully");
     aa4:	4630      	mov	r0, r6
     aa6:	4a0c      	ldr	r2, [pc, #48]	; (ad8 <cmd_dynamic_remove+0x90>)
			--dynamic_cmd_cnt;
     aa8:	f888 3000 	strb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
     aac:	f008 f823 	bl	8af6 <shell_fprintf>
}
     ab0:	4628      	mov	r0, r5
     ab2:	b003      	add	sp, #12
     ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(dynamic_cmd_cnt - idx));
     ab8:	f89a 2000 	ldrb.w	r2, [sl]
				memmove(dynamic_cmd_buffer[idx],
     abc:	4638      	mov	r0, r7
					(dynamic_cmd_cnt - idx));
     abe:	1b12      	subs	r2, r2, r4
					dynamic_cmd_buffer[idx + 1],
     ac0:	3401      	adds	r4, #1
     ac2:	eb04 1444 	add.w	r4, r4, r4, lsl #5
				memmove(dynamic_cmd_buffer[idx],
     ac6:	eb02 1242 	add.w	r2, r2, r2, lsl #5
     aca:	eb09 0104 	add.w	r1, r9, r4
     ace:	f009 f89e 	bl	9c0e <memmove>
     ad2:	e7e3      	b.n	a9c <cmd_dynamic_remove+0x54>
     ad4:	0000b90a 	.word	0x0000b90a
     ad8:	0000b8ec 	.word	0x0000b8ec
     adc:	20001190 	.word	0x20001190
     ae0:	20000efc 	.word	0x20000efc

00000ae4 <cmd_dynamic_add>:
{
     ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
     ae8:	4d29      	ldr	r5, [pc, #164]	; (b90 <cmd_dynamic_add+0xac>)
{
     aea:	4604      	mov	r4, r0
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
     aec:	782b      	ldrb	r3, [r5, #0]
{
     aee:	4616      	mov	r6, r2
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
     af0:	2b13      	cmp	r3, #19
     af2:	d907      	bls.n	b04 <cmd_dynamic_add+0x20>
		shell_error(shell, "command limit reached");
     af4:	2102      	movs	r1, #2
     af6:	4a27      	ldr	r2, [pc, #156]	; (b94 <cmd_dynamic_add+0xb0>)
			shell_error(shell, "duplicated command");
     af8:	f007 fffd 	bl	8af6 <shell_fprintf>
			return -ENOEXEC;
     afc:	f06f 0007 	mvn.w	r0, #7
}
     b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	cmd_len = strlen(argv[1]);
     b04:	6850      	ldr	r0, [r2, #4]
     b06:	f009 f850 	bl	9baa <strlen>
     b0a:	b280      	uxth	r0, r0
	if (cmd_len >= MAX_CMD_LEN) {
     b0c:	2820      	cmp	r0, #32
     b0e:	d80f      	bhi.n	b30 <cmd_dynamic_add+0x4c>
     b10:	2300      	movs	r3, #0
     b12:	6877      	ldr	r7, [r6, #4]
	for (idx = 0U; idx < cmd_len; idx++) {
     b14:	b29a      	uxth	r2, r3
     b16:	4290      	cmp	r0, r2
     b18:	d80e      	bhi.n	b38 <cmd_dynamic_add+0x54>
     b1a:	4f1f      	ldr	r7, [pc, #124]	; (b98 <cmd_dynamic_add+0xb4>)
     b1c:	f04f 0800 	mov.w	r8, #0
     b20:	46b9      	mov	r9, r7
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
     b22:	4638      	mov	r0, r7
     b24:	6871      	ldr	r1, [r6, #4]
     b26:	f009 f847 	bl	9bb8 <strcmp>
     b2a:	b990      	cbnz	r0, b52 <cmd_dynamic_add+0x6e>
			shell_error(shell, "duplicated command");
     b2c:	4a1b      	ldr	r2, [pc, #108]	; (b9c <cmd_dynamic_add+0xb8>)
     b2e:	e000      	b.n	b32 <cmd_dynamic_add+0x4e>
		shell_error(shell, "too long command");
     b30:	4a1b      	ldr	r2, [pc, #108]	; (ba0 <cmd_dynamic_add+0xbc>)
			shell_error(shell, "duplicated command");
     b32:	2102      	movs	r1, #2
     b34:	4620      	mov	r0, r4
     b36:	e7df      	b.n	af8 <cmd_dynamic_add+0x14>
		if (!isalnum((int)(argv[1][idx]))) {
     b38:	5cfa      	ldrb	r2, [r7, r3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
     b3a:	f042 0120 	orr.w	r1, r2, #32
     b3e:	3961      	subs	r1, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
     b40:	2919      	cmp	r1, #25
     b42:	d904      	bls.n	b4e <cmd_dynamic_add+0x6a>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     b44:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
     b46:	2a09      	cmp	r2, #9
     b48:	d901      	bls.n	b4e <cmd_dynamic_add+0x6a>
			shell_error(shell,
     b4a:	4a16      	ldr	r2, [pc, #88]	; (ba4 <cmd_dynamic_add+0xc0>)
     b4c:	e7f1      	b.n	b32 <cmd_dynamic_add+0x4e>
	for (idx = 0U; idx < cmd_len; idx++) {
     b4e:	3301      	adds	r3, #1
     b50:	e7e0      	b.n	b14 <cmd_dynamic_add+0x30>
	for (idx = 0U; idx < MAX_CMD_CNT; idx++) {
     b52:	f108 0801 	add.w	r8, r8, #1
     b56:	f1b8 0f14 	cmp.w	r8, #20
     b5a:	f107 0721 	add.w	r7, r7, #33	; 0x21
     b5e:	d1e0      	bne.n	b22 <cmd_dynamic_add+0x3e>
	sprintf(dynamic_cmd_buffer[dynamic_cmd_cnt++], "%s", argv[1]);
     b60:	7828      	ldrb	r0, [r5, #0]
     b62:	6872      	ldr	r2, [r6, #4]
     b64:	1c43      	adds	r3, r0, #1
     b66:	eb00 1040 	add.w	r0, r0, r0, lsl #5
     b6a:	490f      	ldr	r1, [pc, #60]	; (ba8 <cmd_dynamic_add+0xc4>)
     b6c:	4448      	add	r0, r9
     b6e:	702b      	strb	r3, [r5, #0]
     b70:	f004 fe2e 	bl	57d0 <sprintf>
	qsort(dynamic_cmd_buffer, dynamic_cmd_cnt,
     b74:	2221      	movs	r2, #33	; 0x21
     b76:	4b0d      	ldr	r3, [pc, #52]	; (bac <cmd_dynamic_add+0xc8>)
     b78:	7829      	ldrb	r1, [r5, #0]
     b7a:	4807      	ldr	r0, [pc, #28]	; (b98 <cmd_dynamic_add+0xb4>)
     b7c:	f007 f80e 	bl	7b9c <qsort>
	shell_print(shell, "command added successfully");
     b80:	4620      	mov	r0, r4
     b82:	2100      	movs	r1, #0
     b84:	4a0a      	ldr	r2, [pc, #40]	; (bb0 <cmd_dynamic_add+0xcc>)
     b86:	f007 ffb6 	bl	8af6 <shell_fprintf>
	return 0;
     b8a:	2000      	movs	r0, #0
     b8c:	e7b8      	b.n	b00 <cmd_dynamic_add+0x1c>
     b8e:	bf00      	nop
     b90:	20001190 	.word	0x20001190
     b94:	0000b924 	.word	0x0000b924
     b98:	20000efc 	.word	0x20000efc
     b9c:	0000b98b 	.word	0x0000b98b
     ba0:	0000b93b 	.word	0x0000b93b
     ba4:	0000b94d 	.word	0x0000b94d
     ba8:	0000c13e 	.word	0x0000c13e
     bac:	00007b43 	.word	0x00007b43
     bb0:	0000b99f 	.word	0x0000b99f

00000bb4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bb8:	b085      	sub	sp, #20
     bba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     bbc:	469b      	mov	fp, r3
     bbe:	2c01      	cmp	r4, #1
     bc0:	bfb8      	it	lt
     bc2:	2401      	movlt	r4, #1
     bc4:	2b01      	cmp	r3, #1
     bc6:	bf0c      	ite	eq
     bc8:	2330      	moveq	r3, #48	; 0x30
     bca:	2320      	movne	r3, #32
     bcc:	4615      	mov	r5, r2
     bce:	4606      	mov	r6, r0
     bd0:	468a      	mov	sl, r1
     bd2:	2701      	movs	r7, #1
     bd4:	f04f 080a 	mov.w	r8, #10
     bd8:	2200      	movs	r2, #0
     bda:	f8df 9070 	ldr.w	r9, [pc, #112]	; c4c <_printk_dec_ulong+0x98>
     bde:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     be0:	fbb5 f3f9 	udiv	r3, r5, r9
     be4:	9301      	str	r3, [sp, #4]
     be6:	b90a      	cbnz	r2, bec <_printk_dec_ulong+0x38>
     be8:	45a9      	cmp	r9, r5
     bea:	d81e      	bhi.n	c2a <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     bec:	9b01      	ldr	r3, [sp, #4]
     bee:	4651      	mov	r1, sl
     bf0:	f103 0030 	add.w	r0, r3, #48	; 0x30
     bf4:	47b0      	blx	r6
			found_largest_digit = 1;
     bf6:	2201      	movs	r2, #1
			digits++;
     bf8:	3701      	adds	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     bfa:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     bfc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		remainder %= pos;
     c00:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
     c04:	230a      	movs	r3, #10
	while (pos >= 10) {
     c06:	f1b8 0f01 	cmp.w	r8, #1
		pos /= 10;
     c0a:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     c0e:	d1e7      	bne.n	be0 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c10:	4651      	mov	r1, sl
     c12:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c16:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
     c18:	f1bb 0f03 	cmp.w	fp, #3
     c1c:	d102      	bne.n	c24 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c1e:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
     c20:	2c00      	cmp	r4, #0
     c22:	dc0e      	bgt.n	c42 <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
     c24:	b005      	add	sp, #20
     c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     c2a:	4544      	cmp	r4, r8
     c2c:	dbe5      	blt.n	bfa <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
     c2e:	f1bb 0f02 	cmp.w	fp, #2
     c32:	d8e2      	bhi.n	bfa <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     c34:	4651      	mov	r1, sl
     c36:	9802      	ldr	r0, [sp, #8]
     c38:	9203      	str	r2, [sp, #12]
			digits++;
     c3a:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     c3c:	47b0      	blx	r6
			digits++;
     c3e:	9a03      	ldr	r2, [sp, #12]
     c40:	e7db      	b.n	bfa <_printk_dec_ulong+0x46>
			out(' ', ctx);
     c42:	4651      	mov	r1, sl
     c44:	2020      	movs	r0, #32
     c46:	47b0      	blx	r6
     c48:	3c01      	subs	r4, #1
     c4a:	e7e9      	b.n	c20 <_printk_dec_ulong+0x6c>
     c4c:	3b9aca00 	.word	0x3b9aca00

00000c50 <__printk_hook_install>:
	_char_out = fn;
     c50:	4b01      	ldr	r3, [pc, #4]	; (c58 <__printk_hook_install+0x8>)
     c52:	6018      	str	r0, [r3, #0]
}
     c54:	4770      	bx	lr
     c56:	bf00      	nop
     c58:	20000000 	.word	0x20000000

00000c5c <z_vprintk>:
{
     c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     c60:	2700      	movs	r7, #0
{
     c62:	4605      	mov	r5, r0
     c64:	468b      	mov	fp, r1
	int min_width = -1;
     c66:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     c6a:	46b8      	mov	r8, r7
{
     c6c:	461c      	mov	r4, r3
     c6e:	b08d      	sub	sp, #52	; 0x34
     c70:	1e53      	subs	r3, r2, #1
     c72:	9303      	str	r3, [sp, #12]
			might_format = 0;
     c74:	2600      	movs	r6, #0
					break;
     c76:	e005      	b.n	c84 <z_vprintk+0x28>
		if (!might_format) {
     c78:	b96e      	cbnz	r6, c96 <z_vprintk+0x3a>
			if (*fmt != '%') {
     c7a:	2825      	cmp	r0, #37	; 0x25
     c7c:	f000 8171 	beq.w	f62 <z_vprintk+0x306>
				out((int)*fmt, ctx);
     c80:	4659      	mov	r1, fp
     c82:	47a8      	blx	r5
	while (*fmt) {
     c84:	9b03      	ldr	r3, [sp, #12]
     c86:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     c8a:	9303      	str	r3, [sp, #12]
     c8c:	2800      	cmp	r0, #0
     c8e:	d1f3      	bne.n	c78 <z_vprintk+0x1c>
}
     c90:	b00d      	add	sp, #52	; 0x34
     c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     c96:	287a      	cmp	r0, #122	; 0x7a
     c98:	d80a      	bhi.n	cb0 <z_vprintk+0x54>
     c9a:	2862      	cmp	r0, #98	; 0x62
     c9c:	d810      	bhi.n	cc0 <z_vprintk+0x64>
     c9e:	2830      	cmp	r0, #48	; 0x30
     ca0:	d054      	beq.n	d4c <z_vprintk+0xf0>
     ca2:	d845      	bhi.n	d30 <z_vprintk+0xd4>
     ca4:	2825      	cmp	r0, #37	; 0x25
     ca6:	f000 815a 	beq.w	f5e <z_vprintk+0x302>
     caa:	282d      	cmp	r0, #45	; 0x2d
     cac:	f000 815f 	beq.w	f6e <z_vprintk+0x312>
					out((int)'%', ctx);
     cb0:	4659      	mov	r1, fp
     cb2:	2025      	movs	r0, #37	; 0x25
     cb4:	47a8      	blx	r5
					out((int)*fmt, ctx);
     cb6:	4659      	mov	r1, fp
     cb8:	9b03      	ldr	r3, [sp, #12]
     cba:	7818      	ldrb	r0, [r3, #0]
     cbc:	47a8      	blx	r5
     cbe:	e7d9      	b.n	c74 <z_vprintk+0x18>
     cc0:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     cc4:	2b17      	cmp	r3, #23
     cc6:	d8f3      	bhi.n	cb0 <z_vprintk+0x54>
     cc8:	a201      	add	r2, pc, #4	; (adr r2, cd0 <z_vprintk+0x74>)
     cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cce:	bf00      	nop
     cd0:	00000f57 	.word	0x00000f57
     cd4:	00000d9b 	.word	0x00000d9b
     cd8:	00000cb1 	.word	0x00000cb1
     cdc:	00000cb1 	.word	0x00000cb1
     ce0:	00000cb1 	.word	0x00000cb1
     ce4:	00000d7d 	.word	0x00000d7d
     ce8:	00000d9b 	.word	0x00000d9b
     cec:	00000cb1 	.word	0x00000cb1
     cf0:	00000cb1 	.word	0x00000cb1
     cf4:	00000d7d 	.word	0x00000d7d
     cf8:	00000cb1 	.word	0x00000cb1
     cfc:	00000cb1 	.word	0x00000cb1
     d00:	00000cb1 	.word	0x00000cb1
     d04:	00000e3d 	.word	0x00000e3d
     d08:	00000cb1 	.word	0x00000cb1
     d0c:	00000cb1 	.word	0x00000cb1
     d10:	00000f27 	.word	0x00000f27
     d14:	00000cb1 	.word	0x00000cb1
     d18:	00000e0b 	.word	0x00000e0b
     d1c:	00000cb1 	.word	0x00000cb1
     d20:	00000cb1 	.word	0x00000cb1
     d24:	00000d39 	.word	0x00000d39
     d28:	00000cb1 	.word	0x00000cb1
     d2c:	00000d7d 	.word	0x00000d7d
			switch (*fmt) {
     d30:	2839      	cmp	r0, #57	; 0x39
     d32:	d91a      	bls.n	d6a <z_vprintk+0x10e>
     d34:	2858      	cmp	r0, #88	; 0x58
     d36:	d1bb      	bne.n	cb0 <z_vprintk+0x54>
				if (*fmt == 'p') {
     d38:	9b03      	ldr	r3, [sp, #12]
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b70      	cmp	r3, #112	; 0x70
     d3e:	f040 8088 	bne.w	e52 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
     d42:	f854 3b04 	ldr.w	r3, [r4], #4
     d46:	2200      	movs	r2, #0
     d48:	9306      	str	r3, [sp, #24]
     d4a:	e090      	b.n	e6e <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
     d4c:	f1b9 0f00 	cmp.w	r9, #0
     d50:	da0e      	bge.n	d70 <z_vprintk+0x114>
     d52:	f1b8 0f00 	cmp.w	r8, #0
     d56:	f000 810d 	beq.w	f74 <z_vprintk+0x318>
					min_width = *fmt - '0';
     d5a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     d5e:	f1b8 0f00 	cmp.w	r8, #0
     d62:	bf08      	it	eq
     d64:	f04f 0802 	moveq.w	r8, #2
     d68:	e78c      	b.n	c84 <z_vprintk+0x28>
				if (min_width < 0) {
     d6a:	f1b9 0f00 	cmp.w	r9, #0
     d6e:	dbf4      	blt.n	d5a <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
     d70:	230a      	movs	r3, #10
     d72:	fb03 0909 	mla	r9, r3, r9, r0
     d76:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     d7a:	e7f0      	b.n	d5e <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
     d7c:	2868      	cmp	r0, #104	; 0x68
     d7e:	d103      	bne.n	d88 <z_vprintk+0x12c>
     d80:	2f68      	cmp	r7, #104	; 0x68
     d82:	d106      	bne.n	d92 <z_vprintk+0x136>
					length_mod = 'H';
     d84:	2748      	movs	r7, #72	; 0x48
     d86:	e77d      	b.n	c84 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
     d88:	286c      	cmp	r0, #108	; 0x6c
     d8a:	d102      	bne.n	d92 <z_vprintk+0x136>
     d8c:	2f6c      	cmp	r7, #108	; 0x6c
     d8e:	f000 80f4 	beq.w	f7a <z_vprintk+0x31e>
				} else if (length_mod == 0) {
     d92:	2f00      	cmp	r7, #0
     d94:	d18c      	bne.n	cb0 <z_vprintk+0x54>
     d96:	4607      	mov	r7, r0
     d98:	e774      	b.n	c84 <z_vprintk+0x28>
				if (length_mod == 'z') {
     d9a:	2f7a      	cmp	r7, #122	; 0x7a
     d9c:	d102      	bne.n	da4 <z_vprintk+0x148>
					d = va_arg(ap, int);
     d9e:	f854 6b04 	ldr.w	r6, [r4], #4
     da2:	e021      	b.n	de8 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
     da4:	2f6c      	cmp	r7, #108	; 0x6c
     da6:	d0fa      	beq.n	d9e <z_vprintk+0x142>
				} else if (length_mod == 'L') {
     da8:	2f4c      	cmp	r7, #76	; 0x4c
     daa:	d1f8      	bne.n	d9e <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
     dac:	3407      	adds	r4, #7
     dae:	f024 0407 	bic.w	r4, r4, #7
     db2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     db6:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
     dba:	9b04      	ldr	r3, [sp, #16]
     dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     dc0:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
     dc4:	9b05      	ldr	r3, [sp, #20]
     dc6:	9108      	str	r1, [sp, #32]
     dc8:	f143 0100 	adc.w	r1, r3, #0
     dcc:	9109      	str	r1, [sp, #36]	; 0x24
     dce:	2100      	movs	r1, #0
     dd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     dd4:	4299      	cmp	r1, r3
     dd6:	bf08      	it	eq
     dd8:	4290      	cmpeq	r0, r2
     dda:	d204      	bcs.n	de6 <z_vprintk+0x18a>
						print_err(out, ctx);
     ddc:	4659      	mov	r1, fp
     dde:	4628      	mov	r0, r5
     de0:	f007 f90d 	bl	7ffe <print_err>
						break;
     de4:	e746      	b.n	c74 <z_vprintk+0x18>
					d = lld;
     de6:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
     de8:	2e00      	cmp	r6, #0
     dea:	da05      	bge.n	df8 <z_vprintk+0x19c>
					out((int)'-', ctx);
     dec:	4659      	mov	r1, fp
     dee:	202d      	movs	r0, #45	; 0x2d
     df0:	47a8      	blx	r5
					d = -d;
     df2:	4276      	negs	r6, r6
					min_width--;
     df4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     df8:	4643      	mov	r3, r8
     dfa:	4632      	mov	r2, r6
     dfc:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
     e00:	4659      	mov	r1, fp
     e02:	4628      	mov	r0, r5
     e04:	f7ff fed6 	bl	bb4 <_printk_dec_ulong>
				break;
     e08:	e734      	b.n	c74 <z_vprintk+0x18>
				if (length_mod == 'z') {
     e0a:	2f7a      	cmp	r7, #122	; 0x7a
     e0c:	d102      	bne.n	e14 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
     e0e:	f854 2b04 	ldr.w	r2, [r4], #4
     e12:	e00f      	b.n	e34 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
     e14:	2f6c      	cmp	r7, #108	; 0x6c
     e16:	d0fa      	beq.n	e0e <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
     e18:	2f4c      	cmp	r7, #76	; 0x4c
     e1a:	d1f8      	bne.n	e0e <z_vprintk+0x1b2>
					if (llu > ~0UL) {
     e1c:	2100      	movs	r1, #0
     e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
     e22:	3407      	adds	r4, #7
     e24:	f024 0407 	bic.w	r4, r4, #7
     e28:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
     e2c:	4299      	cmp	r1, r3
     e2e:	bf08      	it	eq
     e30:	4290      	cmpeq	r0, r2
     e32:	d3d3      	bcc.n	ddc <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
     e34:	4643      	mov	r3, r8
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	e7e1      	b.n	e00 <z_vprintk+0x1a4>
				out('0', ctx);
     e3c:	4659      	mov	r1, fp
     e3e:	2030      	movs	r0, #48	; 0x30
     e40:	47a8      	blx	r5
				out('x', ctx);
     e42:	4659      	mov	r1, fp
     e44:	2078      	movs	r0, #120	; 0x78
     e46:	47a8      	blx	r5
					min_width = 8;
     e48:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
     e4c:	f04f 0801 	mov.w	r8, #1
     e50:	e772      	b.n	d38 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     e52:	2f6c      	cmp	r7, #108	; 0x6c
     e54:	f43f af75 	beq.w	d42 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
     e58:	2f4c      	cmp	r7, #76	; 0x4c
     e5a:	f47f af72 	bne.w	d42 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
     e5e:	1de3      	adds	r3, r4, #7
     e60:	f023 0307 	bic.w	r3, r3, #7
     e64:	461c      	mov	r4, r3
     e66:	f854 2b08 	ldr.w	r2, [r4], #8
     e6a:	9206      	str	r2, [sp, #24]
     e6c:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
     e6e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
     e70:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
     e72:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
     e76:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
     e78:	9107      	str	r1, [sp, #28]
		shift -= 4;
     e7a:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
     e7e:	9906      	ldr	r1, [sp, #24]
     e80:	f1ca 0e20 	rsb	lr, sl, #32
     e84:	f1aa 0c20 	sub.w	ip, sl, #32
     e88:	fa21 f00a 	lsr.w	r0, r1, sl
     e8c:	fa02 fe0e 	lsl.w	lr, r2, lr
     e90:	ea40 000e 	orr.w	r0, r0, lr
     e94:	fa22 fc0c 	lsr.w	ip, r2, ip
     e98:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
     e9c:	f010 000f 	ands.w	r0, r0, #15
     ea0:	d107      	bne.n	eb2 <z_vprintk+0x256>
     ea2:	9907      	ldr	r1, [sp, #28]
     ea4:	b911      	cbnz	r1, eac <z_vprintk+0x250>
     ea6:	f1ba 0f00 	cmp.w	sl, #0
     eaa:	d125      	bne.n	ef8 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
     eac:	f04f 0c30 	mov.w	ip, #48	; 0x30
     eb0:	e005      	b.n	ebe <z_vprintk+0x262>
     eb2:	2809      	cmp	r0, #9
     eb4:	bf8c      	ite	hi
     eb6:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     eba:	f04f 0c30 	movls.w	ip, #48	; 0x30
     ebe:	4460      	add	r0, ip
			out((int)nibble, ctx);
     ec0:	4659      	mov	r1, fp
     ec2:	b240      	sxtb	r0, r0
     ec4:	920a      	str	r2, [sp, #40]	; 0x28
     ec6:	9307      	str	r3, [sp, #28]
     ec8:	47a8      	blx	r5
			digits++;
     eca:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
     ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
     ece:	3301      	adds	r3, #1
     ed0:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
     ed2:	9b07      	ldr	r3, [sp, #28]
     ed4:	f1ba 0f00 	cmp.w	sl, #0
     ed8:	d123      	bne.n	f22 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
     eda:	f1b8 0f03 	cmp.w	r8, #3
     ede:	f47f aec9 	bne.w	c74 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
     ee2:	9b04      	ldr	r3, [sp, #16]
     ee4:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
     ee8:	2e00      	cmp	r6, #0
     eea:	f77f aec3 	ble.w	c74 <z_vprintk+0x18>
			out(' ', ctx);
     eee:	4659      	mov	r1, fp
     ef0:	2020      	movs	r0, #32
     ef2:	47a8      	blx	r5
     ef4:	3e01      	subs	r6, #1
     ef6:	e7f7      	b.n	ee8 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
     ef8:	1e59      	subs	r1, r3, #1
     efa:	4599      	cmp	r9, r3
     efc:	910a      	str	r1, [sp, #40]	; 0x28
     efe:	db07      	blt.n	f10 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
     f00:	f1b8 0f01 	cmp.w	r8, #1
     f04:	d106      	bne.n	f14 <z_vprintk+0x2b8>
				out('0', ctx);
     f06:	4659      	mov	r1, fp
     f08:	2030      	movs	r0, #48	; 0x30
     f0a:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
     f0c:	47a8      	blx	r5
     f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
     f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f12:	e7b2      	b.n	e7a <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
     f14:	f1b8 0f02 	cmp.w	r8, #2
     f18:	d1fa      	bne.n	f10 <z_vprintk+0x2b4>
				out(' ', ctx);
     f1a:	4659      	mov	r1, fp
     f1c:	2020      	movs	r0, #32
     f1e:	920b      	str	r2, [sp, #44]	; 0x2c
     f20:	e7f4      	b.n	f0c <z_vprintk+0x2b0>
			found_largest_digit = 1;
     f22:	9607      	str	r6, [sp, #28]
     f24:	e7a9      	b.n	e7a <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
     f26:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
     f2a:	46b2      	mov	sl, r6
     f2c:	4653      	mov	r3, sl
     f2e:	f81a 0b01 	ldrb.w	r0, [sl], #1
     f32:	b968      	cbnz	r0, f50 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
     f34:	f1b8 0f03 	cmp.w	r8, #3
     f38:	d121      	bne.n	f7e <z_vprintk+0x322>
					int remaining = min_width - (s - start);
     f3a:	1b9e      	subs	r6, r3, r6
     f3c:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
     f40:	2e00      	cmp	r6, #0
     f42:	f77f ae97 	ble.w	c74 <z_vprintk+0x18>
						out(' ', ctx);
     f46:	4659      	mov	r1, fp
     f48:	2020      	movs	r0, #32
     f4a:	47a8      	blx	r5
     f4c:	3e01      	subs	r6, #1
     f4e:	e7f7      	b.n	f40 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
     f50:	4659      	mov	r1, fp
     f52:	47a8      	blx	r5
     f54:	e7ea      	b.n	f2c <z_vprintk+0x2d0>
				out(c, ctx);
     f56:	4659      	mov	r1, fp
     f58:	f854 0b04 	ldr.w	r0, [r4], #4
     f5c:	e6ae      	b.n	cbc <z_vprintk+0x60>
				out((int)'%', ctx);
     f5e:	4659      	mov	r1, fp
     f60:	e6ac      	b.n	cbc <z_vprintk+0x60>
				length_mod = 0;
     f62:	4637      	mov	r7, r6
				padding = PAD_NONE;
     f64:	46b0      	mov	r8, r6
				min_width = -1;
     f66:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f6a:	2601      	movs	r6, #1
     f6c:	e68a      	b.n	c84 <z_vprintk+0x28>
			switch (*fmt) {
     f6e:	f04f 0803 	mov.w	r8, #3
     f72:	e687      	b.n	c84 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
     f74:	f04f 0801 	mov.w	r8, #1
     f78:	e684      	b.n	c84 <z_vprintk+0x28>
					length_mod = 'L';
     f7a:	274c      	movs	r7, #76	; 0x4c
     f7c:	e682      	b.n	c84 <z_vprintk+0x28>
			might_format = 0;
     f7e:	4606      	mov	r6, r0
		++fmt;
     f80:	e680      	b.n	c84 <z_vprintk+0x28>
     f82:	bf00      	nop

00000f84 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     f84:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     f86:	2500      	movs	r5, #0
{
     f88:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     f8a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     f8e:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     f90:	a901      	add	r1, sp, #4
     f92:	4805      	ldr	r0, [pc, #20]	; (fa8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     f94:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     f96:	f7ff fe61 	bl	c5c <z_vprintk>

	if (ctx.count < ctx.max) {
     f9a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     f9e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fa0:	bfb8      	it	lt
     fa2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fa4:	b005      	add	sp, #20
     fa6:	bd30      	pop	{r4, r5, pc}
     fa8:	0000801b 	.word	0x0000801b

00000fac <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

s64_t timeutil_timegm64(const struct tm *tm)
{
     fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s64_t y = 1900 + (s64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
     fb0:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
     fb2:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
     fb4:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
     fb8:	1e63      	subs	r3, r4, #1
	s64_t y = 1900 + (s64_t)tm->tm_year;
     fba:	f240 746c 	movw	r4, #1900	; 0x76c
     fbe:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
     fc0:	9301      	str	r3, [sp, #4]
	s64_t y = 1900 + (s64_t)tm->tm_year;
     fc2:	6943      	ldr	r3, [r0, #20]
{
     fc4:	4680      	mov	r8, r0
	s64_t y = 1900 + (s64_t)tm->tm_year;
     fc6:	18e4      	adds	r4, r4, r3
     fc8:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
     fcc:	f1b9 0f02 	cmp.w	r9, #2
     fd0:	bf8c      	ite	hi
     fd2:	2300      	movhi	r3, #0
     fd4:	2301      	movls	r3, #1
     fd6:	1ae4      	subs	r4, r4, r3
     fd8:	f165 0500 	sbc.w	r5, r5, #0
	s64_t era = (y >= 0 ? y : y - 399) / 400;
     fdc:	2c00      	cmp	r4, #0
     fde:	f175 0300 	sbcs.w	r3, r5, #0
     fe2:	da57      	bge.n	1094 <timeutil_timegm64+0xe8>
     fe4:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
     fe8:	f44f 72c8 	mov.w	r2, #400	; 0x190
     fec:	2300      	movs	r3, #0
     fee:	1820      	adds	r0, r4, r0
     ff0:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
     ff4:	f7ff f8a8 	bl	148 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
     ff8:	4b29      	ldr	r3, [pc, #164]	; (10a0 <timeutil_timegm64+0xf4>)
	s64_t ndays = time_days_from_civil(y, m, d);
	s64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
     ffa:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
     ffe:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    1002:	e9d8 5300 	ldrd	r5, r3, [r8]
    1006:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    1008:	f1b9 0f02 	cmp.w	r9, #2
    100c:	bf8c      	ite	hi
    100e:	f06f 0e02 	mvnhi.w	lr, #2
    1012:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    1016:	ea4f 7be3 	mov.w	fp, r3, asr #31
    101a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    101e:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    1020:	fbcc ab03 	smlal	sl, fp, ip, r3
    1024:	fbaa 230c 	umull	r2, r3, sl, ip
    1028:	fb0c 330b 	mla	r3, ip, fp, r3
    102c:	1952      	adds	r2, r2, r5
    102e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    1032:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    1036:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    103a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    103e:	fb05 cc04 	mla	ip, r5, r4, ip
    1042:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    1044:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    1048:	4465      	add	r5, ip
    104a:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    104e:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    1052:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    1056:	f10e 0e02 	add.w	lr, lr, #2
    105a:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
    105e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 10ac <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    1062:	1b2c      	subs	r4, r5, r4
    1064:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
    1066:	fba0 450c 	umull	r4, r5, r0, ip
    106a:	fb0c 5501 	mla	r5, ip, r1, r5
    106e:	490d      	ldr	r1, [pc, #52]	; (10a4 <timeutil_timegm64+0xf8>)
    1070:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
    1072:	490d      	ldr	r1, [pc, #52]	; (10a8 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
    1074:	f145 37ff 	adc.w	r7, r5, #4294967295	; 0xffffffff
    1078:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
    107c:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
    1080:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
    1084:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
    1088:	18a0      	adds	r0, r4, r2
    108a:	eb45 0103 	adc.w	r1, r5, r3
    108e:	b003      	add	sp, #12
    1090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t era = (y >= 0 ? y : y - 399) / 400;
    1094:	f44f 72c8 	mov.w	r2, #400	; 0x190
    1098:	2300      	movs	r3, #0
    109a:	4620      	mov	r0, r4
    109c:	4629      	mov	r1, r5
    109e:	e7a9      	b.n	ff4 <timeutil_timegm64+0x48>
    10a0:	fffffe70 	.word	0xfffffe70
    10a4:	fff50594 	.word	0xfff50594
    10a8:	00015180 	.word	0x00015180
    10ac:	00023ab1 	.word	0x00023ab1

000010b0 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    10b0:	f04f 0220 	mov.w	r2, #32
    10b4:	f3ef 8311 	mrs	r3, BASEPRI
    10b8:	f382 8811 	msr	BASEPRI, r2
    10bc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    10c0:	2101      	movs	r1, #1
    10c2:	4a04      	ldr	r2, [pc, #16]	; (10d4 <nordicsemi_nrf91_init+0x24>)
    10c4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    10c8:	f383 8811 	msr	BASEPRI, r3
    10cc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    10d0:	2000      	movs	r0, #0
    10d2:	4770      	bx	lr
    10d4:	50039000 	.word	0x50039000

000010d8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    10d8:	b120      	cbz	r0, 10e4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    10da:	4b03      	ldr	r3, [pc, #12]	; (10e8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    10dc:	0180      	lsls	r0, r0, #6
    10de:	f043 0301 	orr.w	r3, r3, #1
    10e2:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop
    10e8:	0000aad0 	.word	0x0000aad0

000010ec <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    10ec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    10ee:	2200      	movs	r2, #0
{
    10f0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    10f2:	490f      	ldr	r1, [pc, #60]	; (1130 <enable_logger+0x44>)
    10f4:	480f      	ldr	r0, [pc, #60]	; (1134 <enable_logger+0x48>)
    10f6:	f009 f9a7 	bl	a448 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    10fa:	2200      	movs	r2, #0
    10fc:	2300      	movs	r3, #0
    10fe:	2400      	movs	r4, #0
    1100:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1104:	230e      	movs	r3, #14
    1106:	4d0c      	ldr	r5, [pc, #48]	; (1138 <enable_logger+0x4c>)
    1108:	e9cd 3403 	strd	r3, r4, [sp, #12]
    110c:	f44f 7240 	mov.w	r2, #768	; 0x300
    1110:	4628      	mov	r0, r5
    1112:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1116:	4b09      	ldr	r3, [pc, #36]	; (113c <enable_logger+0x50>)
    1118:	4909      	ldr	r1, [pc, #36]	; (1140 <enable_logger+0x54>)
    111a:	9400      	str	r4, [sp, #0]
    111c:	f006 f8c8 	bl	72b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    1120:	4908      	ldr	r1, [pc, #32]	; (1144 <enable_logger+0x58>)
    1122:	4628      	mov	r0, r5
    1124:	f006 f82c 	bl	7180 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1128:	4620      	mov	r0, r4
    112a:	b009      	add	sp, #36	; 0x24
    112c:	bd30      	pop	{r4, r5, pc}
    112e:	bf00      	nop
    1130:	00001149 	.word	0x00001149
    1134:	200002b8 	.word	0x200002b8
    1138:	20000330 	.word	0x20000330
    113c:	000016a5 	.word	0x000016a5
    1140:	20001240 	.word	0x20001240
    1144:	0000bebf 	.word	0x0000bebf

00001148 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1148:	4801      	ldr	r0, [pc, #4]	; (1150 <log_process_thread_timer_expiry_fn+0x8>)
    114a:	f005 bf91 	b.w	7070 <z_impl_k_sem_give>
    114e:	bf00      	nop
    1150:	20000214 	.word	0x20000214

00001154 <log_core_init>:
{
    1154:	b538      	push	{r3, r4, r5, lr}
		log_msg_pool_init();
    1156:	f000 fb03 	bl	1760 <log_msg_pool_init>
		log_list_init(&list);
    115a:	4813      	ldr	r0, [pc, #76]	; (11a8 <log_core_init+0x54>)
    115c:	f007 f8ee 	bl	833c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1160:	4912      	ldr	r1, [pc, #72]	; (11ac <log_core_init+0x58>)
    1162:	2304      	movs	r3, #4
    1164:	2228      	movs	r2, #40	; 0x28
    1166:	4812      	ldr	r0, [pc, #72]	; (11b0 <log_core_init+0x5c>)
    1168:	f008 ffb7 	bl	a0da <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    116c:	4b11      	ldr	r3, [pc, #68]	; (11b4 <log_core_init+0x60>)
    116e:	4a12      	ldr	r2, [pc, #72]	; (11b8 <log_core_init+0x64>)
	log_output_timestamp_freq_set(freq);
    1170:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    1174:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1176:	f000 fd39 	bl	1bec <log_output_timestamp_freq_set>
		for (int i = 0; i < log_sources_count(); i++) {
    117a:	2100      	movs	r1, #0
    117c:	480f      	ldr	r0, [pc, #60]	; (11bc <log_core_init+0x68>)
    117e:	4b10      	ldr	r3, [pc, #64]	; (11c0 <log_core_init+0x6c>)
    1180:	4c10      	ldr	r4, [pc, #64]	; (11c4 <log_core_init+0x70>)
    1182:	1a1b      	subs	r3, r3, r0
    1184:	08db      	lsrs	r3, r3, #3
	return __log_const_start[source_id].level;
    1186:	3004      	adds	r0, #4
    1188:	4299      	cmp	r1, r3
    118a:	d100      	bne.n	118e <log_core_init+0x3a>
}
    118c:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
    118e:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    1192:	6825      	ldr	r5, [r4, #0]
    1194:	f002 0207 	and.w	r2, r2, #7
    1198:	f025 0507 	bic.w	r5, r5, #7
    119c:	432a      	orrs	r2, r5
    119e:	f844 2b04 	str.w	r2, [r4], #4
		for (int i = 0; i < log_sources_count(); i++) {
    11a2:	3101      	adds	r1, #1
    11a4:	e7f0      	b.n	1188 <log_core_init+0x34>
    11a6:	bf00      	nop
    11a8:	2000030c 	.word	0x2000030c
    11ac:	20002a80 	.word	0x20002a80
    11b0:	20000314 	.word	0x20000314
    11b4:	20000004 	.word	0x20000004
    11b8:	0000837b 	.word	0x0000837b
    11bc:	0000a974 	.word	0x0000a974
    11c0:	0000a9d4 	.word	0x0000a9d4
    11c4:	20000194 	.word	0x20000194

000011c8 <dropped_notify>:
{
    11c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    11ca:	2500      	movs	r5, #0
    11cc:	4b0c      	ldr	r3, [pc, #48]	; (1200 <dropped_notify+0x38>)
    11ce:	e8d3 7fef 	ldaex	r7, [r3]
    11d2:	e8c3 5fe2 	stlex	r2, r5, [r3]
    11d6:	2a00      	cmp	r2, #0
    11d8:	d1f9      	bne.n	11ce <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    11da:	4c0a      	ldr	r4, [pc, #40]	; (1204 <dropped_notify+0x3c>)
    11dc:	4e0a      	ldr	r6, [pc, #40]	; (1208 <dropped_notify+0x40>)
    11de:	1b36      	subs	r6, r6, r4
    11e0:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    11e2:	42b5      	cmp	r5, r6
    11e4:	db00      	blt.n	11e8 <dropped_notify+0x20>
}
    11e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    11e8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    11ea:	795b      	ldrb	r3, [r3, #5]
    11ec:	b12b      	cbz	r3, 11fa <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    11ee:	6823      	ldr	r3, [r4, #0]
    11f0:	68db      	ldr	r3, [r3, #12]
    11f2:	b113      	cbz	r3, 11fa <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    11f4:	4639      	mov	r1, r7
    11f6:	4620      	mov	r0, r4
    11f8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    11fa:	3501      	adds	r5, #1
    11fc:	3410      	adds	r4, #16
    11fe:	e7f0      	b.n	11e2 <dropped_notify+0x1a>
    1200:	20000304 	.word	0x20000304
    1204:	0000a9d4 	.word	0x0000a9d4
    1208:	0000a9e4 	.word	0x0000a9e4

0000120c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    120c:	4b04      	ldr	r3, [pc, #16]	; (1220 <log_dropped+0x14>)
    120e:	e8d3 2fef 	ldaex	r2, [r3]
    1212:	3201      	adds	r2, #1
    1214:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1218:	2900      	cmp	r1, #0
    121a:	d1f8      	bne.n	120e <log_dropped+0x2>
}
    121c:	4770      	bx	lr
    121e:	bf00      	nop
    1220:	20000304 	.word	0x20000304

00001224 <log_source_name_get>:
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1224:	4a04      	ldr	r2, [pc, #16]	; (1238 <log_source_name_get+0x14>)
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <log_source_name_get+0x18>)
    1228:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    122a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    122e:	bf34      	ite	cc
    1230:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    1234:	2000      	movcs	r0, #0
}
    1236:	4770      	bx	lr
    1238:	0000a974 	.word	0x0000a974
    123c:	0000a9d4 	.word	0x0000a9d4

00001240 <z_impl_log_filter_set>:
{
    1240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1244:	4689      	mov	r9, r1
    1246:	4616      	mov	r6, r2
    1248:	4698      	mov	r8, r3
		if (backend == NULL) {
    124a:	4604      	mov	r4, r0
    124c:	b9b0      	cbnz	r0, 127c <z_impl_log_filter_set+0x3c>
	return __log_backends_end - __log_backends_start;
    124e:	4b21      	ldr	r3, [pc, #132]	; (12d4 <z_impl_log_filter_set+0x94>)
			u32_t max = 0U;
    1250:	4605      	mov	r5, r0
    1252:	469a      	mov	sl, r3
    1254:	4f20      	ldr	r7, [pc, #128]	; (12d8 <z_impl_log_filter_set+0x98>)
    1256:	1aff      	subs	r7, r7, r3
    1258:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
    125a:	42bc      	cmp	r4, r7
    125c:	db02      	blt.n	1264 <z_impl_log_filter_set+0x24>
}
    125e:	4628      	mov	r0, r5
    1260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (u32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&src_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
    1264:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    1268:	4643      	mov	r3, r8
    126a:	4632      	mov	r2, r6
    126c:	4649      	mov	r1, r9
    126e:	f7ff ffe7 	bl	1240 <z_impl_log_filter_set>
				max = MAX(current, max);
    1272:	4285      	cmp	r5, r0
    1274:	bf38      	it	cc
    1276:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    1278:	3401      	adds	r4, #1
    127a:	e7ee      	b.n	125a <z_impl_log_filter_set+0x1a>
	return __log_const_start[source_id].level;
    127c:	4b17      	ldr	r3, [pc, #92]	; (12dc <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    127e:	4918      	ldr	r1, [pc, #96]	; (12e0 <z_impl_log_filter_set+0xa0>)
    1280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    1284:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    1286:	6843      	ldr	r3, [r0, #4]
			level = MIN(level, max);
    1288:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    128a:	791a      	ldrb	r2, [r3, #4]
    128c:	f04f 0307 	mov.w	r3, #7
			level = MIN(level, max);
    1290:	bf28      	it	cs
    1292:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    1294:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1298:	fa03 f002 	lsl.w	r0, r3, r2
    129c:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
    12a0:	ea23 0300 	bic.w	r3, r3, r0
    12a4:	f005 0007 	and.w	r0, r5, #7
    12a8:	fa00 f202 	lsl.w	r2, r0, r2
    12ac:	4313      	orrs	r3, r2
	u32_t max_filter = LOG_LEVEL_NONE;
    12ae:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
    12b0:	2203      	movs	r2, #3
		u32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    12b2:	fa23 f402 	lsr.w	r4, r3, r2
    12b6:	f004 0407 	and.w	r4, r4, #7
    12ba:	42a0      	cmp	r0, r4
    12bc:	f102 0203 	add.w	r2, r2, #3
    12c0:	bf38      	it	cc
    12c2:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    12c4:	2a1e      	cmp	r2, #30
    12c6:	d1f4      	bne.n	12b2 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    12c8:	f023 0307 	bic.w	r3, r3, #7
    12cc:	4303      	orrs	r3, r0
    12ce:	f841 3026 	str.w	r3, [r1, r6, lsl #2]
	return level;
    12d2:	e7c4      	b.n	125e <z_impl_log_filter_set+0x1e>
    12d4:	0000a9d4 	.word	0x0000a9d4
    12d8:	0000a9e4 	.word	0x0000a9e4
    12dc:	0000a974 	.word	0x0000a974
    12e0:	20000194 	.word	0x20000194

000012e4 <backend_filter_set>:
{
    12e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12e6:	4606      	mov	r6, r0
    12e8:	460f      	mov	r7, r1
		for (int i = 0; i < log_sources_count(); i++) {
    12ea:	2500      	movs	r5, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    12ec:	4c07      	ldr	r4, [pc, #28]	; (130c <backend_filter_set+0x28>)
    12ee:	4b08      	ldr	r3, [pc, #32]	; (1310 <backend_filter_set+0x2c>)
    12f0:	1ae4      	subs	r4, r4, r3
    12f2:	08e4      	lsrs	r4, r4, #3
    12f4:	42a5      	cmp	r5, r4
    12f6:	d100      	bne.n	12fa <backend_filter_set+0x16>
}
    12f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12fa:	2100      	movs	r1, #0
    12fc:	462a      	mov	r2, r5
    12fe:	463b      	mov	r3, r7
    1300:	4630      	mov	r0, r6
    1302:	f7ff ff9d 	bl	1240 <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    1306:	3501      	adds	r5, #1
    1308:	e7f4      	b.n	12f4 <backend_filter_set+0x10>
    130a:	bf00      	nop
    130c:	0000a9d4 	.word	0x0000a9d4
    1310:	0000a974 	.word	0x0000a974

00001314 <log_backend_enable>:
	id += backend - log_backend_get(0);
    1314:	4b0c      	ldr	r3, [pc, #48]	; (1348 <log_backend_enable+0x34>)
{
    1316:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    1318:	1ac3      	subs	r3, r0, r3
	log_backend_id_set(backend, id);
    131a:	6846      	ldr	r6, [r0, #4]
	id += backend - log_backend_get(0);
    131c:	111b      	asrs	r3, r3, #4
{
    131e:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    1320:	3301      	adds	r3, #1
{
    1322:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    1324:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    1326:	4611      	mov	r1, r2
    1328:	f7ff ffdc 	bl	12e4 <backend_filter_set>
	backend->cb->active = true;
    132c:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    132e:	6863      	ldr	r3, [r4, #4]
	if (!backend_attached) {
    1330:	4c06      	ldr	r4, [pc, #24]	; (134c <log_backend_enable+0x38>)
    1332:	715a      	strb	r2, [r3, #5]
    1334:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    1336:	601d      	str	r5, [r3, #0]
    1338:	b912      	cbnz	r2, 1340 <log_backend_enable+0x2c>
    133a:	4805      	ldr	r0, [pc, #20]	; (1350 <log_backend_enable+0x3c>)
    133c:	f005 fe98 	bl	7070 <z_impl_k_sem_give>
	backend_attached = true;
    1340:	2301      	movs	r3, #1
    1342:	7023      	strb	r3, [r4, #0]
}
    1344:	bd70      	pop	{r4, r5, r6, pc}
    1346:	bf00      	nop
    1348:	0000a9d4 	.word	0x0000a9d4
    134c:	20001191 	.word	0x20001191
    1350:	20000214 	.word	0x20000214

00001354 <log_init>:
{
    1354:	b570      	push	{r4, r5, r6, lr}
    1356:	4b0f      	ldr	r3, [pc, #60]	; (1394 <log_init+0x40>)
    1358:	e8d3 5fef 	ldaex	r5, [r3]
    135c:	1c6a      	adds	r2, r5, #1
    135e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1362:	2900      	cmp	r1, #0
    1364:	d1f8      	bne.n	1358 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    1366:	b92d      	cbnz	r5, 1374 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    1368:	4c0b      	ldr	r4, [pc, #44]	; (1398 <log_init+0x44>)
    136a:	4e0c      	ldr	r6, [pc, #48]	; (139c <log_init+0x48>)
    136c:	1b36      	subs	r6, r6, r4
    136e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1370:	42b5      	cmp	r5, r6
    1372:	db00      	blt.n	1376 <log_init+0x22>
}
    1374:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1376:	7b23      	ldrb	r3, [r4, #12]
    1378:	b143      	cbz	r3, 138c <log_init+0x38>
			if (backend->api->init != NULL) {
    137a:	6823      	ldr	r3, [r4, #0]
    137c:	695b      	ldr	r3, [r3, #20]
    137e:	b103      	cbz	r3, 1382 <log_init+0x2e>
				backend->api->init();
    1380:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1382:	2204      	movs	r2, #4
    1384:	2100      	movs	r1, #0
    1386:	4620      	mov	r0, r4
    1388:	f7ff ffc4 	bl	1314 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    138c:	3501      	adds	r5, #1
    138e:	3410      	adds	r4, #16
    1390:	e7ee      	b.n	1370 <log_init+0x1c>
    1392:	bf00      	nop
    1394:	20000308 	.word	0x20000308
    1398:	0000a9d4 	.word	0x0000a9d4
    139c:	0000a9e4 	.word	0x0000a9e4

000013a0 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    13a0:	b153      	cbz	r3, 13b8 <log_filter_get+0x18>
	return backend->cb->id;
    13a2:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    13a4:	4907      	ldr	r1, [pc, #28]	; (13c4 <log_filter_get+0x24>)
    13a6:	7918      	ldrb	r0, [r3, #4]
    13a8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    13ac:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    13b0:	40d8      	lsrs	r0, r3
    13b2:	f000 0007 	and.w	r0, r0, #7
    13b6:	4770      	bx	lr
	return __log_const_start[source_id].level;
    13b8:	4b03      	ldr	r3, [pc, #12]	; (13c8 <log_filter_get+0x28>)
    13ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    13be:	7910      	ldrb	r0, [r2, #4]
}
    13c0:	4770      	bx	lr
    13c2:	bf00      	nop
    13c4:	20000194 	.word	0x20000194
    13c8:	0000a974 	.word	0x0000a974

000013cc <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    13cc:	4b14      	ldr	r3, [pc, #80]	; (1420 <log_strdup+0x54>)
{
    13ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    13d0:	4298      	cmp	r0, r3
{
    13d2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    13d4:	d302      	bcc.n	13dc <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    13d6:	4b13      	ldr	r3, [pc, #76]	; (1424 <log_strdup+0x58>)
    13d8:	4298      	cmp	r0, r3
    13da:	d31c      	bcc.n	1416 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    13dc:	2200      	movs	r2, #0
    13de:	2300      	movs	r3, #0
    13e0:	4811      	ldr	r0, [pc, #68]	; (1428 <log_strdup+0x5c>)
    13e2:	a901      	add	r1, sp, #4
    13e4:	f005 f922 	bl	662c <k_mem_slab_alloc>
	if (err != 0) {
    13e8:	4605      	mov	r5, r0
    13ea:	b9b8      	cbnz	r0, 141c <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    13ec:	2201      	movs	r2, #1
    13ee:	9b01      	ldr	r3, [sp, #4]
    13f0:	e8d3 1fef 	ldaex	r1, [r3]
    13f4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    13f8:	2800      	cmp	r0, #0
    13fa:	d1f9      	bne.n	13f0 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    13fc:	9801      	ldr	r0, [sp, #4]
    13fe:	4621      	mov	r1, r4
    1400:	221f      	movs	r2, #31
    1402:	3004      	adds	r0, #4
    1404:	f008 fbb0 	bl	9b68 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1408:	237e      	movs	r3, #126	; 0x7e
    140a:	9c01      	ldr	r4, [sp, #4]
    140c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1410:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    1414:	3404      	adds	r4, #4
}
    1416:	4620      	mov	r0, r4
    1418:	b003      	add	sp, #12
    141a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    141c:	4c03      	ldr	r4, [pc, #12]	; (142c <log_strdup+0x60>)
    141e:	e7fa      	b.n	1416 <log_strdup+0x4a>
    1420:	0000a704 	.word	0x0000a704
    1424:	0000d098 	.word	0x0000d098
    1428:	20000314 	.word	0x20000314
    142c:	0000bb4c 	.word	0x0000bb4c

00001430 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    1430:	b148      	cbz	r0, 1446 <log_is_strdup+0x16>
    1432:	4b05      	ldr	r3, [pc, #20]	; (1448 <log_is_strdup+0x18>)
    1434:	4298      	cmp	r0, r3
    1436:	d305      	bcc.n	1444 <log_is_strdup+0x14>
    1438:	33a0      	adds	r3, #160	; 0xa0
    143a:	4298      	cmp	r0, r3
    143c:	bf2c      	ite	cs
    143e:	2000      	movcs	r0, #0
    1440:	2001      	movcc	r0, #1
    1442:	4770      	bx	lr
    1444:	2000      	movs	r0, #0
}
    1446:	4770      	bx	lr
    1448:	20002a80 	.word	0x20002a80

0000144c <z_impl_log_process>:
{
    144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    1450:	4b55      	ldr	r3, [pc, #340]	; (15a8 <z_impl_log_process+0x15c>)
{
    1452:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    1454:	781b      	ldrb	r3, [r3, #0]
{
    1456:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    1458:	b903      	cbnz	r3, 145c <z_impl_log_process+0x10>
    145a:	b340      	cbz	r0, 14ae <z_impl_log_process+0x62>
	__asm__ volatile(
    145c:	f04f 0320 	mov.w	r3, #32
    1460:	f3ef 8611 	mrs	r6, BASEPRI
    1464:	f383 8811 	msr	BASEPRI, r3
    1468:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    146c:	484f      	ldr	r0, [pc, #316]	; (15ac <z_impl_log_process+0x160>)
    146e:	f006 ff75 	bl	835c <log_list_head_get>
    1472:	4604      	mov	r4, r0
	__asm__ volatile(
    1474:	f386 8811 	msr	BASEPRI, r6
    1478:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    147c:	b158      	cbz	r0, 1496 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    147e:	4b4c      	ldr	r3, [pc, #304]	; (15b0 <z_impl_log_process+0x164>)
    1480:	e8d3 2fef 	ldaex	r2, [r3]
    1484:	3a01      	subs	r2, #1
    1486:	e8c3 2fe1 	stlex	r1, r2, [r3]
    148a:	2900      	cmp	r1, #0
    148c:	d1f8      	bne.n	1480 <z_impl_log_process+0x34>
	if (!bypass) {
    148e:	b195      	cbz	r5, 14b6 <z_impl_log_process+0x6a>
	log_msg_put(msg);
    1490:	4620      	mov	r0, r4
    1492:	f007 f86f 	bl	8574 <log_msg_put>
	if (!bypass && dropped_cnt) {
    1496:	b925      	cbnz	r5, 14a2 <z_impl_log_process+0x56>
    1498:	4b46      	ldr	r3, [pc, #280]	; (15b4 <z_impl_log_process+0x168>)
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	b10b      	cbz	r3, 14a2 <z_impl_log_process+0x56>
		dropped_notify();
    149e:	f7ff fe93 	bl	11c8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    14a2:	4842      	ldr	r0, [pc, #264]	; (15ac <z_impl_log_process+0x160>)
    14a4:	f006 ff58 	bl	8358 <log_list_head_peek>
    14a8:	1e05      	subs	r5, r0, #0
    14aa:	bf18      	it	ne
    14ac:	2501      	movne	r5, #1
}
    14ae:	4628      	mov	r0, r5
    14b0:	b005      	add	sp, #20
    14b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    14b6:	4b40      	ldr	r3, [pc, #256]	; (15b8 <z_impl_log_process+0x16c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	b9cb      	cbnz	r3, 14f0 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    14bc:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
    14be:	07da      	lsls	r2, r3, #31
    14c0:	d416      	bmi.n	14f0 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    14c2:	f007 f866 	bl	8592 <log_msg_str_get>
    14c6:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    14c8:	4620      	mov	r0, r4
    14ca:	f007 f831 	bl	8530 <log_msg_nargs_get>
    14ce:	4601      	mov	r1, r0
    14d0:	4640      	mov	r0, r8
    14d2:	f006 ff56 	bl	8382 <z_log_get_s_mask>
    14d6:	4606      	mov	r6, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    14d8:	4f38      	ldr	r7, [pc, #224]	; (15bc <z_impl_log_process+0x170>)
    14da:	4b39      	ldr	r3, [pc, #228]	; (15c0 <z_impl_log_process+0x174>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    14dc:	f8df b100 	ldr.w	fp, [pc, #256]	; 15e0 <z_impl_log_process+0x194>
    14e0:	1bdb      	subs	r3, r3, r7
    14e2:	08db      	lsrs	r3, r3, #3
    14e4:	9303      	str	r3, [sp, #12]
    14e6:	4b37      	ldr	r3, [pc, #220]	; (15c4 <z_impl_log_process+0x178>)
    14e8:	1bdb      	subs	r3, r3, r7
    14ea:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    14ee:	b946      	cbnz	r6, 1502 <z_impl_log_process+0xb6>
	return __log_backends_end - __log_backends_start;
    14f0:	4e35      	ldr	r6, [pc, #212]	; (15c8 <z_impl_log_process+0x17c>)
    14f2:	4f36      	ldr	r7, [pc, #216]	; (15cc <z_impl_log_process+0x180>)
    14f4:	f04f 0800 	mov.w	r8, #0
    14f8:	1bbf      	subs	r7, r7, r6
		return LOG_FILTER_SLOT_GET(filters,
    14fa:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 15e4 <z_impl_log_process+0x198>
    14fe:	113f      	asrs	r7, r7, #4
    1500:	e04e      	b.n	15a0 <z_impl_log_process+0x154>
		idx = 31 - __builtin_clz(mask);
    1502:	fab6 f186 	clz	r1, r6
    1506:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    150a:	4649      	mov	r1, r9
    150c:	4620      	mov	r0, r4
    150e:	f007 f812 	bl	8536 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    1512:	4b2f      	ldr	r3, [pc, #188]	; (15d0 <z_impl_log_process+0x184>)
		str = (const char *)log_msg_arg_get(msg, idx);
    1514:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1516:	4298      	cmp	r0, r3
    1518:	d302      	bcc.n	1520 <z_impl_log_process+0xd4>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    151a:	4b2e      	ldr	r3, [pc, #184]	; (15d4 <z_impl_log_process+0x188>)
    151c:	4298      	cmp	r0, r3
    151e:	d31e      	bcc.n	155e <z_impl_log_process+0x112>
    1520:	4608      	mov	r0, r1
    1522:	f7ff ff85 	bl	1430 <log_is_strdup>
    1526:	4602      	mov	r2, r0
    1528:	b9c8      	cbnz	r0, 155e <z_impl_log_process+0x112>
    152a:	4b2b      	ldr	r3, [pc, #172]	; (15d8 <z_impl_log_process+0x18c>)
    152c:	4299      	cmp	r1, r3
    152e:	d016      	beq.n	155e <z_impl_log_process+0x112>
	return msg->hdr.ids.source_id;
    1530:	8963      	ldrh	r3, [r4, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1532:	9903      	ldr	r1, [sp, #12]
    1534:	f3c3 1389 	ubfx	r3, r3, #6, #10
    1538:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    153a:	bf38      	it	cc
    153c:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    1540:	f8db 3000 	ldr.w	r3, [fp]
    1544:	075b      	lsls	r3, r3, #29
    1546:	d00a      	beq.n	155e <z_impl_log_process+0x112>
    1548:	ea4f 138a 	mov.w	r3, sl, lsl #6
    154c:	f043 0301 	orr.w	r3, r3, #1
    1550:	f8ad 3000 	strh.w	r3, [sp]
    1554:	4649      	mov	r1, r9
    1556:	4643      	mov	r3, r8
    1558:	4820      	ldr	r0, [pc, #128]	; (15dc <z_impl_log_process+0x190>)
    155a:	f006 ff71 	bl	8440 <log_3>
		mask &= ~BIT(idx);
    155e:	2101      	movs	r1, #1
    1560:	fa01 f109 	lsl.w	r1, r1, r9
    1564:	ea26 0601 	bic.w	r6, r6, r1
    1568:	e7c1      	b.n	14ee <z_impl_log_process+0xa2>
			if (log_backend_is_active(backend) &&
    156a:	6873      	ldr	r3, [r6, #4]
    156c:	795a      	ldrb	r2, [r3, #5]
    156e:	b1a2      	cbz	r2, 159a <z_impl_log_process+0x14e>
    1570:	8960      	ldrh	r0, [r4, #10]
		return LOG_FILTER_SLOT_GET(filters,
    1572:	791b      	ldrb	r3, [r3, #4]
    1574:	f3c0 1089 	ubfx	r0, r0, #6, #10
    1578:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    157c:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
	return msg->hdr.ids.level;
    1580:	7aa1      	ldrb	r1, [r4, #10]
    1582:	40d3      	lsrs	r3, r2
    1584:	f001 0107 	and.w	r1, r1, #7
    1588:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
    158c:	4299      	cmp	r1, r3
    158e:	d804      	bhi.n	159a <z_impl_log_process+0x14e>
	backend->api->put(backend, msg);
    1590:	6833      	ldr	r3, [r6, #0]
    1592:	4621      	mov	r1, r4
    1594:	4630      	mov	r0, r6
    1596:	681b      	ldr	r3, [r3, #0]
    1598:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    159a:	f108 0801 	add.w	r8, r8, #1
    159e:	3610      	adds	r6, #16
    15a0:	45b8      	cmp	r8, r7
    15a2:	dbe2      	blt.n	156a <z_impl_log_process+0x11e>
    15a4:	e774      	b.n	1490 <z_impl_log_process+0x44>
    15a6:	bf00      	nop
    15a8:	20001191 	.word	0x20001191
    15ac:	2000030c 	.word	0x2000030c
    15b0:	20000300 	.word	0x20000300
    15b4:	20000304 	.word	0x20000304
    15b8:	20001192 	.word	0x20001192
    15bc:	0000a974 	.word	0x0000a974
    15c0:	0000a9d4 	.word	0x0000a9d4
    15c4:	0000a994 	.word	0x0000a994
    15c8:	0000a9d4 	.word	0x0000a9d4
    15cc:	0000a9e4 	.word	0x0000a9e4
    15d0:	0000a704 	.word	0x0000a704
    15d4:	0000d098 	.word	0x0000d098
    15d8:	0000bb4c 	.word	0x0000bb4c
    15dc:	0000bb66 	.word	0x0000bb66
    15e0:	200001a4 	.word	0x200001a4
    15e4:	20000194 	.word	0x20000194

000015e8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    15e8:	4b27      	ldr	r3, [pc, #156]	; (1688 <msg_finalize+0xa0>)
{
    15ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    15ec:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    15ee:	8141      	strh	r1, [r0, #10]
{
    15f0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    15f2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    15f4:	4d25      	ldr	r5, [pc, #148]	; (168c <msg_finalize+0xa4>)
    15f6:	60e0      	str	r0, [r4, #12]
    15f8:	e8d5 3fef 	ldaex	r3, [r5]
    15fc:	3301      	adds	r3, #1
    15fe:	e8c5 3fe2 	stlex	r2, r3, [r5]
    1602:	2a00      	cmp	r2, #0
    1604:	d1f8      	bne.n	15f8 <msg_finalize+0x10>
	__asm__ volatile(
    1606:	f04f 0320 	mov.w	r3, #32
    160a:	f3ef 8611 	mrs	r6, BASEPRI
    160e:	f383 8811 	msr	BASEPRI, r3
    1612:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1616:	481e      	ldr	r0, [pc, #120]	; (1690 <msg_finalize+0xa8>)
    1618:	4621      	mov	r1, r4
    161a:	f006 fe93 	bl	8344 <log_list_add_tail>
	__asm__ volatile(
    161e:	f386 8811 	msr	BASEPRI, r6
    1622:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    1626:	4b1b      	ldr	r3, [pc, #108]	; (1694 <msg_finalize+0xac>)
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	b183      	cbz	r3, 164e <msg_finalize+0x66>
	__asm__ volatile(
    162c:	f04f 0320 	mov.w	r3, #32
    1630:	f3ef 8411 	mrs	r4, BASEPRI
    1634:	f383 8811 	msr	BASEPRI, r3
    1638:	f3bf 8f6f 	isb	sy
	return z_impl_log_process(bypass);
    163c:	2000      	movs	r0, #0
    163e:	f7ff ff05 	bl	144c <z_impl_log_process>
	__asm__ volatile(
    1642:	f384 8811 	msr	BASEPRI, r4
    1646:	f3bf 8f6f 	isb	sy
}
    164a:	b002      	add	sp, #8
    164c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    164e:	4a12      	ldr	r2, [pc, #72]	; (1698 <msg_finalize+0xb0>)
    1650:	682b      	ldr	r3, [r5, #0]
    1652:	6812      	ldr	r2, [r2, #0]
    1654:	2a00      	cmp	r2, #0
    1656:	d0f8      	beq.n	164a <msg_finalize+0x62>
    1658:	2b01      	cmp	r3, #1
    165a:	d10a      	bne.n	1672 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    165c:	2200      	movs	r2, #0
    165e:	2300      	movs	r3, #0
    1660:	480e      	ldr	r0, [pc, #56]	; (169c <msg_finalize+0xb4>)
    1662:	e9cd 2300 	strd	r2, r3, [sp]
    1666:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    166a:	2300      	movs	r3, #0
    166c:	f005 fffa 	bl	7664 <z_impl_k_timer_start>
    1670:	e7eb      	b.n	164a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1672:	2b0a      	cmp	r3, #10
    1674:	d1e9      	bne.n	164a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    1676:	4809      	ldr	r0, [pc, #36]	; (169c <msg_finalize+0xb4>)
    1678:	f008 fef2 	bl	a460 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    167c:	4808      	ldr	r0, [pc, #32]	; (16a0 <msg_finalize+0xb8>)
}
    167e:	b002      	add	sp, #8
    1680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1684:	f005 bcf4 	b.w	7070 <z_impl_k_sem_give>
    1688:	20000004 	.word	0x20000004
    168c:	20000300 	.word	0x20000300
    1690:	2000030c 	.word	0x2000030c
    1694:	20001192 	.word	0x20001192
    1698:	200003d8 	.word	0x200003d8
    169c:	200002b8 	.word	0x200002b8
    16a0:	20000214 	.word	0x20000214

000016a4 <log_process_thread_func>:
{
    16a4:	b510      	push	{r4, lr}
	log_init();
    16a6:	f7ff fe55 	bl	1354 <log_init>
	return z_impl_k_current_get();
    16aa:	f005 fcdb 	bl	7064 <z_impl_k_current_get>
	proc_tid = process_tid;
    16ae:	4b0c      	ldr	r3, [pc, #48]	; (16e0 <log_process_thread_func+0x3c>)
    16b0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    16b2:	b130      	cbz	r0, 16c2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    16b4:	4b0b      	ldr	r3, [pc, #44]	; (16e4 <log_process_thread_func+0x40>)
	    process_tid &&
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	2b09      	cmp	r3, #9
    16ba:	dd02      	ble.n	16c2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    16bc:	480a      	ldr	r0, [pc, #40]	; (16e8 <log_process_thread_func+0x44>)
    16be:	f005 fcd7 	bl	7070 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    16c2:	4c09      	ldr	r4, [pc, #36]	; (16e8 <log_process_thread_func+0x44>)
    16c4:	2000      	movs	r0, #0
    16c6:	f7ff fec1 	bl	144c <z_impl_log_process>
		if (log_process(false) == false) {
    16ca:	2800      	cmp	r0, #0
    16cc:	d1fa      	bne.n	16c4 <log_process_thread_func+0x20>
    16ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    16d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    16d6:	4620      	mov	r0, r4
    16d8:	f005 fcf0 	bl	70bc <z_impl_k_sem_take>
    16dc:	e7f2      	b.n	16c4 <log_process_thread_func+0x20>
    16de:	bf00      	nop
    16e0:	200003d8 	.word	0x200003d8
    16e4:	20000300 	.word	0x20000300
    16e8:	20000214 	.word	0x20000214

000016ec <z_impl_log_panic>:
{
    16ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    16ee:	4f0e      	ldr	r7, [pc, #56]	; (1728 <z_impl_log_panic+0x3c>)
    16f0:	783d      	ldrb	r5, [r7, #0]
    16f2:	b975      	cbnz	r5, 1712 <z_impl_log_panic+0x26>
	log_init();
    16f4:	f7ff fe2e 	bl	1354 <log_init>
	return __log_backends_end - __log_backends_start;
    16f8:	4c0c      	ldr	r4, [pc, #48]	; (172c <z_impl_log_panic+0x40>)
    16fa:	4e0d      	ldr	r6, [pc, #52]	; (1730 <z_impl_log_panic+0x44>)
    16fc:	1b36      	subs	r6, r6, r4
    16fe:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1700:	42b5      	cmp	r5, r6
    1702:	db07      	blt.n	1714 <z_impl_log_panic+0x28>
    1704:	2000      	movs	r0, #0
    1706:	f7ff fea1 	bl	144c <z_impl_log_process>
		while (log_process(false) == true) {
    170a:	2800      	cmp	r0, #0
    170c:	d1fa      	bne.n	1704 <z_impl_log_panic+0x18>
	panic_mode = true;
    170e:	2301      	movs	r3, #1
    1710:	703b      	strb	r3, [r7, #0]
}
    1712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1714:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1716:	795b      	ldrb	r3, [r3, #5]
    1718:	b11b      	cbz	r3, 1722 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    171a:	6823      	ldr	r3, [r4, #0]
    171c:	4620      	mov	r0, r4
    171e:	691b      	ldr	r3, [r3, #16]
    1720:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1722:	3501      	adds	r5, #1
    1724:	3410      	adds	r4, #16
    1726:	e7eb      	b.n	1700 <z_impl_log_panic+0x14>
    1728:	20001192 	.word	0x20001192
    172c:	0000a9d4 	.word	0x0000a9d4
    1730:	0000a9e4 	.word	0x0000a9e4

00001734 <log_free>:
{
    1734:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1736:	3804      	subs	r0, #4
    1738:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    173a:	e8d0 3fef 	ldaex	r3, [r0]
    173e:	1e5a      	subs	r2, r3, #1
    1740:	e8c0 2fe1 	stlex	r1, r2, [r0]
    1744:	2900      	cmp	r1, #0
    1746:	d1f8      	bne.n	173a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    1748:	2b01      	cmp	r3, #1
    174a:	d103      	bne.n	1754 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    174c:	4803      	ldr	r0, [pc, #12]	; (175c <log_free+0x28>)
    174e:	a901      	add	r1, sp, #4
    1750:	f004 ff9e 	bl	6690 <k_mem_slab_free>
}
    1754:	b003      	add	sp, #12
    1756:	f85d fb04 	ldr.w	pc, [sp], #4
    175a:	bf00      	nop
    175c:	20000314 	.word	0x20000314

00001760 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1760:	2320      	movs	r3, #32
    1762:	4902      	ldr	r1, [pc, #8]	; (176c <log_msg_pool_init+0xc>)
    1764:	461a      	mov	r2, r3
    1766:	4802      	ldr	r0, [pc, #8]	; (1770 <log_msg_pool_init+0x10>)
    1768:	f008 bcb7 	b.w	a0da <k_mem_slab_init>
    176c:	20002b20 	.word	0x20002b20
    1770:	200003dc 	.word	0x200003dc

00001774 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    1774:	2300      	movs	r3, #0
{
    1776:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    1778:	4d09      	ldr	r5, [pc, #36]	; (17a0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    177a:	9301      	str	r3, [sp, #4]
    177c:	2001      	movs	r0, #1
    177e:	f7ff fe65 	bl	144c <z_impl_log_process>
    1782:	4604      	mov	r4, r0
			log_dropped();
    1784:	f7ff fd42 	bl	120c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1788:	2200      	movs	r2, #0
    178a:	2300      	movs	r3, #0
    178c:	4628      	mov	r0, r5
    178e:	a901      	add	r1, sp, #4
    1790:	f004 ff4c 	bl	662c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1794:	b108      	cbz	r0, 179a <log_msg_no_space_handle+0x26>
    1796:	2c00      	cmp	r4, #0
    1798:	d1f0      	bne.n	177c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    179a:	9801      	ldr	r0, [sp, #4]
    179c:	b003      	add	sp, #12
    179e:	bd30      	pop	{r4, r5, pc}
    17a0:	200003dc 	.word	0x200003dc

000017a4 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    17a4:	2300      	movs	r3, #0
{
    17a6:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    17a8:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    17aa:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    17ac:	4806      	ldr	r0, [pc, #24]	; (17c8 <log_msg_chunk_alloc+0x24>)
    17ae:	2300      	movs	r3, #0
    17b0:	a901      	add	r1, sp, #4
    17b2:	f004 ff3b 	bl	662c <k_mem_slab_alloc>
	if (err != 0) {
    17b6:	b110      	cbz	r0, 17be <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    17b8:	f7ff ffdc 	bl	1774 <log_msg_no_space_handle>
    17bc:	9001      	str	r0, [sp, #4]
}
    17be:	9801      	ldr	r0, [sp, #4]
    17c0:	b003      	add	sp, #12
    17c2:	f85d fb04 	ldr.w	pc, [sp], #4
    17c6:	bf00      	nop
    17c8:	200003dc 	.word	0x200003dc

000017cc <msg_free>:
{
    17cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    17ce:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    17d0:	7a45      	ldrb	r5, [r0, #9]
{
    17d2:	b085      	sub	sp, #20
    17d4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    17d6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    17d8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    17dc:	d41c      	bmi.n	1818 <msg_free+0x4c>
    17de:	b1dd      	cbz	r5, 1818 <msg_free+0x4c>
		u32_t smask = 0;
    17e0:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    17e2:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    17e4:	4631      	mov	r1, r6
    17e6:	9801      	ldr	r0, [sp, #4]
    17e8:	f006 fea5 	bl	8536 <log_msg_arg_get>
    17ec:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    17ee:	f7ff fe1f 	bl	1430 <log_is_strdup>
    17f2:	b170      	cbz	r0, 1812 <msg_free+0x46>
				if (smask == 0) {
    17f4:	b934      	cbnz	r4, 1804 <msg_free+0x38>
					smask = z_log_get_s_mask(
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	4629      	mov	r1, r5
    17fa:	6918      	ldr	r0, [r3, #16]
    17fc:	f006 fdc1 	bl	8382 <z_log_get_s_mask>
					if (smask == 0) {
    1800:	4604      	mov	r4, r0
    1802:	b148      	cbz	r0, 1818 <msg_free+0x4c>
				if (smask & BIT(i)) {
    1804:	fa24 f306 	lsr.w	r3, r4, r6
    1808:	07d9      	lsls	r1, r3, #31
    180a:	d502      	bpl.n	1812 <msg_free+0x46>
					log_free(buf);
    180c:	4638      	mov	r0, r7
    180e:	f7ff ff91 	bl	1734 <log_free>
		for (i = 0; i < nargs; i++) {
    1812:	3601      	adds	r6, #1
    1814:	42ae      	cmp	r6, r5
    1816:	d3e5      	bcc.n	17e4 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    1818:	9b01      	ldr	r3, [sp, #4]
    181a:	7a1a      	ldrb	r2, [r3, #8]
    181c:	0792      	lsls	r2, r2, #30
    181e:	d504      	bpl.n	182a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    1820:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1822:	4c08      	ldr	r4, [pc, #32]	; (1844 <msg_free+0x78>)
    1824:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    1826:	9b03      	ldr	r3, [sp, #12]
    1828:	b92b      	cbnz	r3, 1836 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    182a:	4806      	ldr	r0, [pc, #24]	; (1844 <msg_free+0x78>)
    182c:	a901      	add	r1, sp, #4
    182e:	f004 ff2f 	bl	6690 <k_mem_slab_free>
}
    1832:	b005      	add	sp, #20
    1834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    1836:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1838:	4620      	mov	r0, r4
    183a:	a903      	add	r1, sp, #12
    183c:	f004 ff28 	bl	6690 <k_mem_slab_free>
		cont = next;
    1840:	9503      	str	r5, [sp, #12]
    1842:	e7f0      	b.n	1826 <msg_free+0x5a>
    1844:	200003dc 	.word	0x200003dc

00001848 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1848:	b40e      	push	{r1, r2, r3}
    184a:	b503      	push	{r0, r1, lr}
    184c:	ab03      	add	r3, sp, #12
    184e:	f853 2b04 	ldr.w	r2, [r3], #4
    1852:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1854:	4804      	ldr	r0, [pc, #16]	; (1868 <print_formatted+0x20>)
	va_start(args, fmt);
    1856:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1858:	f7ff fa00 	bl	c5c <z_vprintk>
#endif
	va_end(args);

	return length;
}
    185c:	2000      	movs	r0, #0
    185e:	b002      	add	sp, #8
    1860:	f85d eb04 	ldr.w	lr, [sp], #4
    1864:	b003      	add	sp, #12
    1866:	4770      	bx	lr
    1868:	00008893 	.word	0x00008893

0000186c <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    1870:	f011 0402 	ands.w	r4, r1, #2
{
    1874:	b085      	sub	sp, #20
    1876:	4690      	mov	r8, r2
    1878:	4606      	mov	r6, r0
    187a:	461a      	mov	r2, r3
    187c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1880:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1884:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    1888:	d007      	beq.n	189a <prefix_print+0x2e>
	if (!format) {
    188a:	f011 0f44 	tst.w	r1, #68	; 0x44
    188e:	d137      	bne.n	1900 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1890:	4932      	ldr	r1, [pc, #200]	; (195c <prefix_print+0xf0>)
    1892:	f7ff ffd9 	bl	1848 <print_formatted>
			length = print_formatted(log_output,
    1896:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    1898:	460c      	mov	r4, r1
	if (color) {
    189a:	f1b9 0f00 	cmp.w	r9, #0
    189e:	d00a      	beq.n	18b6 <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    18a0:	4b2f      	ldr	r3, [pc, #188]	; (1960 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    18a2:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
    18a4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    18a8:	4b2e      	ldr	r3, [pc, #184]	; (1964 <prefix_print+0xf8>)
    18aa:	492f      	ldr	r1, [pc, #188]	; (1968 <prefix_print+0xfc>)
    18ac:	2a00      	cmp	r2, #0
    18ae:	bf08      	it	eq
    18b0:	461a      	moveq	r2, r3
    18b2:	f7ff ffc9 	bl	1848 <print_formatted>
	if (level_on) {
    18b6:	b13d      	cbz	r5, 18c8 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    18b8:	4b2c      	ldr	r3, [pc, #176]	; (196c <prefix_print+0x100>)
    18ba:	4630      	mov	r0, r6
    18bc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    18c0:	492b      	ldr	r1, [pc, #172]	; (1970 <prefix_print+0x104>)
    18c2:	f7ff ffc1 	bl	1848 <print_formatted>
    18c6:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    18c8:	f1b8 0f00 	cmp.w	r8, #0
    18cc:	d043      	beq.n	1956 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    18ce:	2301      	movs	r3, #1
    18d0:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    18d4:	4b27      	ldr	r3, [pc, #156]	; (1974 <prefix_print+0x108>)
    18d6:	f017 0f10 	tst.w	r7, #16
    18da:	4f27      	ldr	r7, [pc, #156]	; (1978 <prefix_print+0x10c>)
    18dc:	bf18      	it	ne
    18de:	461f      	movne	r7, r3
    18e0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    18e4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    18e8:	f7ff fc9c 	bl	1224 <log_source_name_get>
    18ec:	4639      	mov	r1, r7
    18ee:	4602      	mov	r2, r0
    18f0:	4630      	mov	r0, r6
    18f2:	f7ff ffa9 	bl	1848 <print_formatted>
    18f6:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    18f8:	4420      	add	r0, r4
    18fa:	b005      	add	sp, #20
    18fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    1900:	4b1e      	ldr	r3, [pc, #120]	; (197c <prefix_print+0x110>)
    1902:	6819      	ldr	r1, [r3, #0]
    1904:	2900      	cmp	r1, #0
    1906:	d0c7      	beq.n	1898 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    1908:	4b1d      	ldr	r3, [pc, #116]	; (1980 <prefix_print+0x114>)
    190a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    190e:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
    1910:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1914:	fbb2 f3f3 	udiv	r3, r2, r3
		seconds = timestamp / freq;
    1918:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    191c:	fbb4 f2fe 	udiv	r2, r4, lr
    1920:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    1924:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    1928:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    192c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    1930:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1934:	fb01 441b 	mls	r4, r1, fp, r4
    1938:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    193c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1940:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    1944:	e9cd b101 	strd	fp, r1, [sp, #4]
    1948:	fb0a e113 	mls	r1, sl, r3, lr
    194c:	9100      	str	r1, [sp, #0]
    194e:	490d      	ldr	r1, [pc, #52]	; (1984 <prefix_print+0x118>)
    1950:	f7ff ff7a 	bl	1848 <print_formatted>
    1954:	e79f      	b.n	1896 <prefix_print+0x2a>
	total += print_formatted(log_output,
    1956:	4f08      	ldr	r7, [pc, #32]	; (1978 <prefix_print+0x10c>)
    1958:	e7c2      	b.n	18e0 <prefix_print+0x74>
    195a:	bf00      	nop
    195c:	0000bbb7 	.word	0x0000bbb7
    1960:	0000ace0 	.word	0x0000ace0
    1964:	0000bba9 	.word	0x0000bba9
    1968:	0000c13e 	.word	0x0000c13e
    196c:	0000acf4 	.word	0x0000acf4
    1970:	0000bbdc 	.word	0x0000bbdc
    1974:	0000bbb3 	.word	0x0000bbb3
    1978:	0000bbae 	.word	0x0000bbae
    197c:	200003f8 	.word	0x200003f8
    1980:	200003fc 	.word	0x200003fc
    1984:	0000bbc0 	.word	0x0000bbc0

00001988 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    1988:	b538      	push	{r3, r4, r5, lr}
    198a:	460c      	mov	r4, r1
	if (color) {
    198c:	07e1      	lsls	r1, r4, #31
{
    198e:	4605      	mov	r5, r0
	if (color) {
    1990:	d503      	bpl.n	199a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    1992:	4a08      	ldr	r2, [pc, #32]	; (19b4 <postfix_print+0x2c>)
    1994:	4908      	ldr	r1, [pc, #32]	; (19b8 <postfix_print+0x30>)
    1996:	f7ff ff57 	bl	1848 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    199a:	06e2      	lsls	r2, r4, #27
    199c:	d408      	bmi.n	19b0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    199e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    19a0:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    19a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    19a6:	bf4c      	ite	mi
    19a8:	4904      	ldrmi	r1, [pc, #16]	; (19bc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    19aa:	4905      	ldrpl	r1, [pc, #20]	; (19c0 <postfix_print+0x38>)
    19ac:	f7ff bf4c 	b.w	1848 <print_formatted>
}
    19b0:	bd38      	pop	{r3, r4, r5, pc}
    19b2:	bf00      	nop
    19b4:	0000bba9 	.word	0x0000bba9
    19b8:	0000c13e 	.word	0x0000c13e
    19bc:	0000c04f 	.word	0x0000c04f
    19c0:	0000bc5c 	.word	0x0000bc5c

000019c4 <hexdump_line_print>:
{
    19c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19c8:	461d      	mov	r5, r3
    19ca:	9b08      	ldr	r3, [sp, #32]
    19cc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    19ce:	06da      	lsls	r2, r3, #27
{
    19d0:	4604      	mov	r4, r0
    19d2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    19d4:	d405      	bmi.n	19e2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    19d6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    19d8:	bf4c      	ite	mi
    19da:	492a      	ldrmi	r1, [pc, #168]	; (1a84 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    19dc:	492a      	ldrpl	r1, [pc, #168]	; (1a88 <hexdump_line_print+0xc4>)
    19de:	f7ff ff33 	bl	1848 <print_formatted>
{
    19e2:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    19e6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1a90 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    19ea:	45a8      	cmp	r8, r5
    19ec:	db2a      	blt.n	1a44 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    19ee:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    19f0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1a94 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    19f4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1a98 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    19f8:	f8df a094 	ldr.w	sl, [pc, #148]	; 1a90 <hexdump_line_print+0xcc>
		if (i < length) {
    19fc:	42bd      	cmp	r5, r7
    19fe:	d22f      	bcs.n	1a60 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    1a00:	4649      	mov	r1, r9
    1a02:	4620      	mov	r0, r4
    1a04:	5d72      	ldrb	r2, [r6, r5]
    1a06:	f7ff ff1f 	bl	1848 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a0a:	3501      	adds	r5, #1
    1a0c:	2d10      	cmp	r5, #16
    1a0e:	d120      	bne.n	1a52 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    1a10:	4620      	mov	r0, r4
    1a12:	491e      	ldr	r1, [pc, #120]	; (1a8c <hexdump_line_print+0xc8>)
    1a14:	f7ff ff18 	bl	1848 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a18:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    1a1a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1a90 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    1a1e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1a9c <hexdump_line_print+0xd8>
		if (i < length) {
    1a22:	42af      	cmp	r7, r5
    1a24:	d928      	bls.n	1a78 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1a26:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    1a28:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    1a2a:	f1a2 0320 	sub.w	r3, r2, #32
    1a2e:	2b5f      	cmp	r3, #95	; 0x5f
    1a30:	bf28      	it	cs
    1a32:	222e      	movcs	r2, #46	; 0x2e
    1a34:	4620      	mov	r0, r4
    1a36:	f7ff ff07 	bl	1848 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a3a:	3501      	adds	r5, #1
    1a3c:	2d10      	cmp	r5, #16
    1a3e:	d114      	bne.n	1a6a <hexdump_line_print+0xa6>
}
    1a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    1a44:	4649      	mov	r1, r9
    1a46:	4620      	mov	r0, r4
    1a48:	f7ff fefe 	bl	1848 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1a4c:	f108 0801 	add.w	r8, r8, #1
    1a50:	e7cb      	b.n	19ea <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1a52:	076a      	lsls	r2, r5, #29
    1a54:	d1d2      	bne.n	19fc <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    1a56:	4651      	mov	r1, sl
    1a58:	4620      	mov	r0, r4
    1a5a:	f7ff fef5 	bl	1848 <print_formatted>
    1a5e:	e7cd      	b.n	19fc <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    1a60:	4641      	mov	r1, r8
    1a62:	4620      	mov	r0, r4
    1a64:	f7ff fef0 	bl	1848 <print_formatted>
    1a68:	e7cf      	b.n	1a0a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1a6a:	076b      	lsls	r3, r5, #29
    1a6c:	d1d9      	bne.n	1a22 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1a6e:	4641      	mov	r1, r8
    1a70:	4620      	mov	r0, r4
    1a72:	f7ff fee9 	bl	1848 <print_formatted>
    1a76:	e7d4      	b.n	1a22 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1a78:	4641      	mov	r1, r8
    1a7a:	4620      	mov	r0, r4
    1a7c:	f7ff fee4 	bl	1848 <print_formatted>
    1a80:	e7db      	b.n	1a3a <hexdump_line_print+0x76>
    1a82:	bf00      	nop
    1a84:	0000c04f 	.word	0x0000c04f
    1a88:	0000bc5c 	.word	0x0000bc5c
    1a8c:	0000bbec 	.word	0x0000bbec
    1a90:	0000bbea 	.word	0x0000bbea
    1a94:	0000bbe8 	.word	0x0000bbe8
    1a98:	0000bbe2 	.word	0x0000bbe2
    1a9c:	0000c376 	.word	0x0000c376

00001aa0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    1aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1aa4:	7a8b      	ldrb	r3, [r1, #10]
    1aa6:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1aa8:	f013 0807 	ands.w	r8, r3, #7
{
    1aac:	4605      	mov	r5, r0
    1aae:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1ab0:	7a0a      	ldrb	r2, [r1, #8]
    1ab2:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1ab4:	d021      	beq.n	1afa <log_output_msg_process+0x5a>
    1ab6:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    1ab8:	8949      	ldrh	r1, [r1, #10]
    1aba:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1abe:	f3c1 1189 	ubfx	r1, r1, #6, #10
    1ac2:	e9cd 8300 	strd	r8, r3, [sp]
    1ac6:	9102      	str	r1, [sp, #8]
    1ac8:	68f3      	ldr	r3, [r6, #12]
    1aca:	4639      	mov	r1, r7
    1acc:	f002 0201 	and.w	r2, r2, #1
    1ad0:	f7ff fecc 	bl	186c <prefix_print>
    1ad4:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1ad6:	7a34      	ldrb	r4, [r6, #8]
    1ad8:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    1ada:	f014 0401 	ands.w	r4, r4, #1
    1ade:	d00e      	beq.n	1afe <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    1ae0:	4629      	mov	r1, r5
    1ae2:	4630      	mov	r0, r6
    1ae4:	f006 fd6b 	bl	85be <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    1ae8:	f1b8 0f00 	cmp.w	r8, #0
    1aec:	d02b      	beq.n	1b46 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    1aee:	4642      	mov	r2, r8
    1af0:	4639      	mov	r1, r7
    1af2:	4628      	mov	r0, r5
    1af4:	f7ff ff48 	bl	1988 <postfix_print>
    1af8:	e025      	b.n	1b46 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1afa:	46c1      	mov	r9, r8
    1afc:	e7eb      	b.n	1ad6 <log_output_msg_process+0x36>
	} else if (raw_string) {
    1afe:	f1b8 0f00 	cmp.w	r8, #0
    1b02:	d126      	bne.n	1b52 <log_output_msg_process+0xb2>
	size_t offset = 0;
    1b04:	4627      	mov	r7, r4
		length = log_output->size;
    1b06:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1b08:	aa06      	add	r2, sp, #24
		length = log_output->size;
    1b0a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1b0c:	4630      	mov	r0, r6
    1b0e:	463b      	mov	r3, r7
    1b10:	68a9      	ldr	r1, [r5, #8]
    1b12:	f006 fd40 	bl	8596 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    1b16:	9a06      	ldr	r2, [sp, #24]
    1b18:	686b      	ldr	r3, [r5, #4]
    1b1a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1b1c:	b13a      	cbz	r2, 1b2e <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    1b1e:	68ab      	ldr	r3, [r5, #8]
    1b20:	4413      	add	r3, r2
    1b22:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    1b26:	f1a4 030a 	sub.w	r3, r4, #10
    1b2a:	425c      	negs	r4, r3
    1b2c:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    1b2e:	4628      	mov	r0, r5
    1b30:	f006 fea2 	bl	8878 <log_output_flush>
		offset += length;
    1b34:	9b06      	ldr	r3, [sp, #24]
    1b36:	441f      	add	r7, r3
	} while (length > 0);
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d1e4      	bne.n	1b06 <log_output_msg_process+0x66>
	if (eol) {
    1b3c:	b11c      	cbz	r4, 1b46 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    1b3e:	4628      	mov	r0, r5
    1b40:	4913      	ldr	r1, [pc, #76]	; (1b90 <log_output_msg_process+0xf0>)
    1b42:	f7ff fe81 	bl	1848 <print_formatted>
	}

	log_output_flush(log_output);
    1b46:	4628      	mov	r0, r5
    1b48:	f006 fe96 	bl	8878 <log_output_flush>
}
    1b4c:	b00a      	add	sp, #40	; 0x28
    1b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1b52:	4630      	mov	r0, r6
    1b54:	f006 fd1d 	bl	8592 <log_msg_str_get>
    1b58:	490e      	ldr	r1, [pc, #56]	; (1b94 <log_output_msg_process+0xf4>)
    1b5a:	4602      	mov	r2, r0
    1b5c:	4628      	mov	r0, r5
    1b5e:	f7ff fe73 	bl	1848 <print_formatted>
		length = sizeof(buf);
    1b62:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1b66:	aa05      	add	r2, sp, #20
    1b68:	4623      	mov	r3, r4
    1b6a:	4630      	mov	r0, r6
    1b6c:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    1b6e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1b72:	f006 fd10 	bl	8596 <log_msg_hexdump_data_get>
		if (length) {
    1b76:	9a05      	ldr	r2, [sp, #20]
    1b78:	2a00      	cmp	r2, #0
    1b7a:	d0b8      	beq.n	1aee <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    1b7c:	464b      	mov	r3, r9
    1b7e:	4628      	mov	r0, r5
    1b80:	9700      	str	r7, [sp, #0]
    1b82:	a906      	add	r1, sp, #24
    1b84:	f7ff ff1e 	bl	19c4 <hexdump_line_print>
			offset += length;
    1b88:	9b05      	ldr	r3, [sp, #20]
    1b8a:	441c      	add	r4, r3
		length = sizeof(buf);
    1b8c:	e7eb      	b.n	1b66 <log_output_msg_process+0xc6>
    1b8e:	bf00      	nop
    1b90:	0000bbee 	.word	0x0000bbee
    1b94:	0000c13e 	.word	0x0000c13e

00001b98 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    1b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    1b9a:	e9d0 4300 	ldrd	r4, r3, [r0]
    1b9e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ba0:	f242 730f 	movw	r3, #9999	; 0x270f
    1ba4:	428b      	cmp	r3, r1
    1ba6:	bf28      	it	cs
    1ba8:	460b      	movcs	r3, r1
    1baa:	4668      	mov	r0, sp
    1bac:	2105      	movs	r1, #5
    1bae:	4a0c      	ldr	r2, [pc, #48]	; (1be0 <log_output_dropped_process+0x48>)
    1bb0:	f006 fa46 	bl	8040 <snprintk>
    1bb4:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    1bb6:	462b      	mov	r3, r5
    1bb8:	4620      	mov	r0, r4
    1bba:	2204      	movs	r2, #4
    1bbc:	4909      	ldr	r1, [pc, #36]	; (1be4 <log_output_dropped_process+0x4c>)
    1bbe:	f006 fcf1 	bl	85a4 <buffer_write>
	buffer_write(outf, buf, len, dev);
    1bc2:	462b      	mov	r3, r5
    1bc4:	4632      	mov	r2, r6
    1bc6:	4669      	mov	r1, sp
    1bc8:	4620      	mov	r0, r4
    1bca:	f006 fceb 	bl	85a4 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    1bce:	462b      	mov	r3, r5
    1bd0:	2217      	movs	r2, #23
    1bd2:	4620      	mov	r0, r4
    1bd4:	4904      	ldr	r1, [pc, #16]	; (1be8 <log_output_dropped_process+0x50>)
    1bd6:	f006 fce5 	bl	85a4 <buffer_write>
}
    1bda:	b002      	add	sp, #8
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
    1bde:	bf00      	nop
    1be0:	0000c358 	.word	0x0000c358
    1be4:	0000bc28 	.word	0x0000bc28
    1be8:	0000bc10 	.word	0x0000bc10

00001bec <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1bec:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1bee:	2100      	movs	r1, #0
	timestamp_div = 1U;
    1bf0:	4a07      	ldr	r2, [pc, #28]	; (1c10 <log_output_timestamp_freq_set+0x24>)
{
    1bf2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    1bf4:	4c07      	ldr	r4, [pc, #28]	; (1c14 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1bf6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1bf8:	42a0      	cmp	r0, r4
    1bfa:	d804      	bhi.n	1c06 <log_output_timestamp_freq_set+0x1a>
    1bfc:	b101      	cbz	r1, 1c00 <log_output_timestamp_freq_set+0x14>
    1bfe:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1c00:	4b05      	ldr	r3, [pc, #20]	; (1c18 <log_output_timestamp_freq_set+0x2c>)
    1c02:	6018      	str	r0, [r3, #0]
}
    1c04:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    1c06:	2101      	movs	r1, #1
		frequency /= 2U;
    1c08:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c0a:	005b      	lsls	r3, r3, #1
    1c0c:	e7f4      	b.n	1bf8 <log_output_timestamp_freq_set+0xc>
    1c0e:	bf00      	nop
    1c10:	200003fc 	.word	0x200003fc
    1c14:	000f4240 	.word	0x000f4240
    1c18:	200003f8 	.word	0x200003f8

00001c1c <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1c1c:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    1c1e:	2804      	cmp	r0, #4
	entry->handler = NULL;
    1c20:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1c22:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    1c24:	bf98      	it	ls
    1c26:	4b04      	ldrls	r3, [pc, #16]	; (1c38 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    1c28:	4a04      	ldr	r2, [pc, #16]	; (1c3c <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    1c2a:	bf98      	it	ls
    1c2c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    1c30:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    1c32:	600b      	str	r3, [r1, #0]
}
    1c34:	4770      	bx	lr
    1c36:	bf00      	nop
    1c38:	0000ad48 	.word	0x0000ad48
    1c3c:	0000ad24 	.word	0x0000ad24

00001c40 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1c40:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    1c42:	4a08      	ldr	r2, [pc, #32]	; (1c64 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    1c44:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    1c46:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1c48:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    1c4a:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    1c4c:	4b06      	ldr	r3, [pc, #24]	; (1c68 <backend_name_get+0x28>)
    1c4e:	4a07      	ldr	r2, [pc, #28]	; (1c6c <backend_name_get+0x2c>)
    1c50:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    1c52:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    1c56:	bf3e      	ittt	cc
    1c58:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    1c5c:	689b      	ldrcc	r3, [r3, #8]
    1c5e:	600b      	strcc	r3, [r1, #0]
	}
}
    1c60:	4770      	bx	lr
    1c62:	bf00      	nop
    1c64:	0000ae88 	.word	0x0000ae88
    1c68:	0000a9d4 	.word	0x0000a9d4
    1c6c:	0000a9e4 	.word	0x0000a9e4

00001c70 <cmd_log_backends_list>:
{
    1c70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1c74:	4607      	mov	r7, r0
	for (int i = 0; i < backend_count; i++) {
    1c76:	2600      	movs	r6, #0
    1c78:	4c10      	ldr	r4, [pc, #64]	; (1cbc <cmd_log_backends_list+0x4c>)
    1c7a:	4d11      	ldr	r5, [pc, #68]	; (1cc0 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    1c7c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1cc4 <cmd_log_backends_list+0x54>
    1c80:	1b2d      	subs	r5, r5, r4
    1c82:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1cc8 <cmd_log_backends_list+0x58>
    1c86:	f8df a044 	ldr.w	sl, [pc, #68]	; 1ccc <cmd_log_backends_list+0x5c>
    1c8a:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
    1c8c:	42ae      	cmp	r6, r5
    1c8e:	db03      	blt.n	1c98 <cmd_log_backends_list+0x28>
}
    1c90:	2000      	movs	r0, #0
    1c92:	b002      	add	sp, #8
    1c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    1c98:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    1c9a:	2100      	movs	r1, #0
    1c9c:	7953      	ldrb	r3, [r2, #5]
    1c9e:	7912      	ldrb	r2, [r2, #4]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	bf14      	ite	ne
    1ca4:	4643      	movne	r3, r8
    1ca6:	464b      	moveq	r3, r9
    1ca8:	4638      	mov	r0, r7
    1caa:	e9cd 3200 	strd	r3, r2, [sp]
    1cae:	68a3      	ldr	r3, [r4, #8]
    1cb0:	4652      	mov	r2, sl
    1cb2:	f006 ff20 	bl	8af6 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    1cb6:	3601      	adds	r6, #1
    1cb8:	3410      	adds	r4, #16
    1cba:	e7e7      	b.n	1c8c <cmd_log_backends_list+0x1c>
    1cbc:	0000a9d4 	.word	0x0000a9d4
    1cc0:	0000a9e4 	.word	0x0000a9e4
    1cc4:	0000bc2d 	.word	0x0000bc2d
    1cc8:	0000bc35 	.word	0x0000bc35
    1ccc:	0000bc3e 	.word	0x0000bc3e

00001cd0 <log_status>:
{
    1cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1cd4:	4b21      	ldr	r3, [pc, #132]	; (1d5c <log_status+0x8c>)
    1cd6:	4d22      	ldr	r5, [pc, #136]	; (1d60 <log_status+0x90>)
    1cd8:	4606      	mov	r6, r0
    1cda:	1aed      	subs	r5, r5, r3
	return backend->cb->active;
    1cdc:	684b      	ldr	r3, [r1, #4]
    1cde:	460f      	mov	r7, r1
	if (!log_backend_is_active(backend)) {
    1ce0:	795b      	ldrb	r3, [r3, #5]
    1ce2:	08ed      	lsrs	r5, r5, #3
    1ce4:	b91b      	cbnz	r3, 1cee <log_status+0x1e>
		shell_warn(shell, "Logs are halted!");
    1ce6:	2104      	movs	r1, #4
    1ce8:	4a1e      	ldr	r2, [pc, #120]	; (1d64 <log_status+0x94>)
    1cea:	f006 ff04 	bl	8af6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    1cee:	2100      	movs	r1, #0
    1cf0:	4630      	mov	r0, r6
    1cf2:	4b1d      	ldr	r3, [pc, #116]	; (1d68 <log_status+0x98>)
    1cf4:	4a1d      	ldr	r2, [pc, #116]	; (1d6c <log_status+0x9c>)
    1cf6:	f006 fefe 	bl	8af6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    1cfa:	2100      	movs	r1, #0
    1cfc:	4630      	mov	r0, r6
    1cfe:	4a1c      	ldr	r2, [pc, #112]	; (1d70 <log_status+0xa0>)
    1d00:	f006 fef9 	bl	8af6 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
    1d04:	2400      	movs	r4, #0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1d06:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1d74 <log_status+0xa4>
    1d0a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 1d78 <log_status+0xa8>
	for (i = 0U; i < modules_cnt; i++) {
    1d0e:	42ac      	cmp	r4, r5
    1d10:	d103      	bne.n	1d1a <log_status+0x4a>
}
    1d12:	2000      	movs	r0, #0
    1d14:	b003      	add	sp, #12
    1d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d1a:	4622      	mov	r2, r4
    1d1c:	2301      	movs	r3, #1
    1d1e:	2100      	movs	r1, #0
    1d20:	4638      	mov	r0, r7
    1d22:	f7ff fb3d 	bl	13a0 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d26:	2300      	movs	r3, #0
    1d28:	4622      	mov	r2, r4
    1d2a:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d2c:	4680      	mov	r8, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d2e:	4638      	mov	r0, r7
    1d30:	f7ff fb36 	bl	13a0 <log_filter_get>
    1d34:	4681      	mov	r9, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1d36:	4621      	mov	r1, r4
    1d38:	2000      	movs	r0, #0
    1d3a:	f7ff fa73 	bl	1224 <log_source_name_get>
    1d3e:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    1d42:	4603      	mov	r3, r0
    1d44:	9201      	str	r2, [sp, #4]
    1d46:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
    1d4a:	2100      	movs	r1, #0
    1d4c:	9200      	str	r2, [sp, #0]
    1d4e:	4630      	mov	r0, r6
    1d50:	465a      	mov	r2, fp
    1d52:	f006 fed0 	bl	8af6 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
    1d56:	3401      	adds	r4, #1
    1d58:	e7d9      	b.n	1d0e <log_status+0x3e>
    1d5a:	bf00      	nop
    1d5c:	0000a974 	.word	0x0000a974
    1d60:	0000a9d4 	.word	0x0000a9d4
    1d64:	0000bc5f 	.word	0x0000bc5f
    1d68:	0000bc71 	.word	0x0000bc71
    1d6c:	0000bc7d 	.word	0x0000bc7d
    1d70:	0000bc9b 	.word	0x0000bc9b
    1d74:	0000ad34 	.word	0x0000ad34
    1d78:	0000bcd8 	.word	0x0000bcd8

00001d7c <module_name_get>:
	entry->handler = NULL;
    1d7c:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    1d7e:	4a06      	ldr	r2, [pc, #24]	; (1d98 <module_name_get+0x1c>)
{
    1d80:	b510      	push	{r4, lr}
    1d82:	460c      	mov	r4, r1
	entry->handler = NULL;
    1d84:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1d86:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    1d88:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    1d8a:	4601      	mov	r1, r0
    1d8c:	4618      	mov	r0, r3
    1d8e:	f7ff fa49 	bl	1224 <log_source_name_get>
    1d92:	6020      	str	r0, [r4, #0]
}
    1d94:	bd10      	pop	{r4, pc}
    1d96:	bf00      	nop
    1d98:	0000ad24 	.word	0x0000ad24

00001d9c <shell_backend_cmd_execute>:
{
    1d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    1da0:	f852 bc04 	ldr.w	fp, [r2, #-4]
{
    1da4:	4607      	mov	r7, r0
	size_t slen = strlen(name);
    1da6:	4658      	mov	r0, fp
{
    1da8:	4691      	mov	r9, r2
    1daa:	468a      	mov	sl, r1
    1dac:	9300      	str	r3, [sp, #0]
	size_t slen = strlen(name);
    1dae:	f007 fefc 	bl	9baa <strlen>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1db2:	f04f 0800 	mov.w	r8, #0
	size_t slen = strlen(name);
    1db6:	4602      	mov	r2, r0
	return __log_backends_end - __log_backends_start;
    1db8:	4c13      	ldr	r4, [pc, #76]	; (1e08 <shell_backend_cmd_execute+0x6c>)
    1dba:	4e14      	ldr	r6, [pc, #80]	; (1e0c <shell_backend_cmd_execute+0x70>)
    1dbc:	1b36      	subs	r6, r6, r4
    1dbe:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1dc0:	45b0      	cmp	r8, r6
    1dc2:	db08      	blt.n	1dd6 <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
    1dc4:	465b      	mov	r3, fp
    1dc6:	2102      	movs	r1, #2
    1dc8:	4638      	mov	r0, r7
    1dca:	4a11      	ldr	r2, [pc, #68]	; (1e10 <shell_backend_cmd_execute+0x74>)
    1dcc:	f006 fe93 	bl	8af6 <shell_fprintf>
		return -ENOEXEC;
    1dd0:	f06f 0507 	mvn.w	r5, #7
    1dd4:	e013      	b.n	1dfe <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
    1dd6:	68a1      	ldr	r1, [r4, #8]
    1dd8:	4658      	mov	r0, fp
    1dda:	9201      	str	r2, [sp, #4]
    1ddc:	f007 fef8 	bl	9bd0 <strncmp>
    1de0:	3410      	adds	r4, #16
    1de2:	4605      	mov	r5, r0
    1de4:	b118      	cbz	r0, 1dee <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1de6:	9a01      	ldr	r2, [sp, #4]
    1de8:	f108 0801 	add.w	r8, r8, #1
    1dec:	e7e8      	b.n	1dc0 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
    1dee:	4906      	ldr	r1, [pc, #24]	; (1e08 <shell_backend_cmd_execute+0x6c>)
    1df0:	464b      	mov	r3, r9
    1df2:	4652      	mov	r2, sl
    1df4:	4638      	mov	r0, r7
    1df6:	9c00      	ldr	r4, [sp, #0]
    1df8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
    1dfc:	47a0      	blx	r4
}
    1dfe:	4628      	mov	r0, r5
    1e00:	b003      	add	sp, #12
    1e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e06:	bf00      	nop
    1e08:	0000a9d4 	.word	0x0000a9d4
    1e0c:	0000a9e4 	.word	0x0000a9e4
    1e10:	0000bcec 	.word	0x0000bcec

00001e14 <cmd_log_backend_status>:
{
    1e14:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    1e16:	4b02      	ldr	r3, [pc, #8]	; (1e20 <cmd_log_backend_status+0xc>)
    1e18:	f7ff ffc0 	bl	1d9c <shell_backend_cmd_execute>
}
    1e1c:	2000      	movs	r0, #0
    1e1e:	bd08      	pop	{r3, pc}
    1e20:	00001cd1 	.word	0x00001cd1

00001e24 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    1e24:	4b01      	ldr	r3, [pc, #4]	; (1e2c <cmd_log_backend_halt+0x8>)
    1e26:	f7ff bfb9 	b.w	1d9c <shell_backend_cmd_execute>
    1e2a:	bf00      	nop
    1e2c:	000088c1 	.word	0x000088c1

00001e30 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    1e30:	4b01      	ldr	r3, [pc, #4]	; (1e38 <cmd_log_backend_go+0x8>)
    1e32:	f7ff bfb3 	b.w	1d9c <shell_backend_cmd_execute>
    1e36:	bf00      	nop
    1e38:	000088c9 	.word	0x000088c9

00001e3c <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    1e3c:	4b01      	ldr	r3, [pc, #4]	; (1e44 <cmd_log_backend_enable+0x8>)
    1e3e:	f7ff bfad 	b.w	1d9c <shell_backend_cmd_execute>
    1e42:	bf00      	nop
    1e44:	00001f45 	.word	0x00001f45

00001e48 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    1e48:	4b01      	ldr	r3, [pc, #4]	; (1e50 <cmd_log_backend_disable+0x8>)
    1e4a:	f7ff bfa7 	b.w	1d9c <shell_backend_cmd_execute>
    1e4e:	bf00      	nop
    1e50:	00008945 	.word	0x00008945

00001e54 <shell_state_precheck>:
{
    1e54:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    1e56:	69c3      	ldr	r3, [r0, #28]
    1e58:	68db      	ldr	r3, [r3, #12]
    1e5a:	791c      	ldrb	r4, [r3, #4]
    1e5c:	b92c      	cbnz	r4, 1e6a <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    1e5e:	2102      	movs	r1, #2
    1e60:	4a03      	ldr	r2, [pc, #12]	; (1e70 <shell_state_precheck+0x1c>)
    1e62:	f006 fe48 	bl	8af6 <shell_fprintf>
    1e66:	4620      	mov	r0, r4
}
    1e68:	bd10      	pop	{r4, pc}
	return true;
    1e6a:	2001      	movs	r0, #1
    1e6c:	e7fc      	b.n	1e68 <shell_state_precheck+0x14>
    1e6e:	bf00      	nop
    1e70:	0000bd01 	.word	0x0000bd01

00001e74 <filters_set>:
{
    1e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e78:	461f      	mov	r7, r3
    1e7a:	4e2c      	ldr	r6, [pc, #176]	; (1f2c <filters_set+0xb8>)
    1e7c:	4b2c      	ldr	r3, [pc, #176]	; (1f30 <filters_set+0xbc>)
	int cnt = all ? log_sources_count() : argc;
    1e7e:	1e15      	subs	r5, r2, #0
    1e80:	eba6 0603 	sub.w	r6, r6, r3
    1e84:	ea4f 06d6 	mov.w	r6, r6, lsr #3
    1e88:	bf14      	ite	ne
    1e8a:	462b      	movne	r3, r5
    1e8c:	4633      	moveq	r3, r6
{
    1e8e:	b085      	sub	sp, #20
	int cnt = all ? log_sources_count() : argc;
    1e90:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    1e92:	684b      	ldr	r3, [r1, #4]
{
    1e94:	4680      	mov	r8, r0
	if (!backend->cb->active) {
    1e96:	795b      	ldrb	r3, [r3, #5]
{
    1e98:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    1e9a:	b91b      	cbnz	r3, 1ea4 <filters_set+0x30>
		shell_warn(shell, "Backend not active.");
    1e9c:	2104      	movs	r1, #4
    1e9e:	4a25      	ldr	r2, [pc, #148]	; (1f34 <filters_set+0xc0>)
    1ea0:	f006 fe29 	bl	8af6 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
    1ea4:	2400      	movs	r4, #0
				shell_warn(shell, "%s: level set to %s.",
    1ea6:	f8df a098 	ldr.w	sl, [pc, #152]	; 1f40 <filters_set+0xcc>
	for (i = 0; i < cnt; i++) {
    1eaa:	9b02      	ldr	r3, [sp, #8]
    1eac:	429c      	cmp	r4, r3
    1eae:	db02      	blt.n	1eb6 <filters_set+0x42>
}
    1eb0:	b005      	add	sp, #20
    1eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    1eb6:	b3b5      	cbz	r5, 1f26 <filters_set+0xb2>
	for (i = 0U; i < modules_cnt; i++) {
    1eb8:	2300      	movs	r3, #0
		id = all ? i : module_id_get(argv[i]);
    1eba:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    1ebe:	429e      	cmp	r6, r3
    1ec0:	d107      	bne.n	1ed2 <filters_set+0x5e>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    1ec2:	2102      	movs	r1, #2
    1ec4:	4640      	mov	r0, r8
    1ec6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    1eca:	4a1b      	ldr	r2, [pc, #108]	; (1f38 <filters_set+0xc4>)
    1ecc:	f006 fe13 	bl	8af6 <shell_fprintf>
    1ed0:	e022      	b.n	1f18 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    1ed2:	4619      	mov	r1, r3
    1ed4:	2000      	movs	r0, #0
    1ed6:	9303      	str	r3, [sp, #12]
    1ed8:	f7ff f9a4 	bl	1224 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    1edc:	2240      	movs	r2, #64	; 0x40
    1ede:	4659      	mov	r1, fp
    1ee0:	f007 fe76 	bl	9bd0 <strncmp>
    1ee4:	9b03      	ldr	r3, [sp, #12]
    1ee6:	b9c8      	cbnz	r0, 1f1c <filters_set+0xa8>
			return i;
    1ee8:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
    1eea:	2100      	movs	r1, #0
    1eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1eee:	4648      	mov	r0, r9
    1ef0:	f7ff f9a6 	bl	1240 <z_impl_log_filter_set>
			if (set_lvl != level) {
    1ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1ef6:	4683      	mov	fp, r0
    1ef8:	4283      	cmp	r3, r0
    1efa:	d00d      	beq.n	1f18 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    1efc:	b985      	cbnz	r5, 1f20 <filters_set+0xac>
					log_source_name_get(
    1efe:	4621      	mov	r1, r4
    1f00:	4628      	mov	r0, r5
    1f02:	f7ff f98f 	bl	1224 <log_source_name_get>
    1f06:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    1f08:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    1f0c:	2104      	movs	r1, #4
    1f0e:	9200      	str	r2, [sp, #0]
    1f10:	4640      	mov	r0, r8
    1f12:	4a0a      	ldr	r2, [pc, #40]	; (1f3c <filters_set+0xc8>)
    1f14:	f006 fdef 	bl	8af6 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    1f18:	3401      	adds	r4, #1
    1f1a:	e7c6      	b.n	1eaa <filters_set+0x36>
	for (i = 0U; i < modules_cnt; i++) {
    1f1c:	3301      	adds	r3, #1
    1f1e:	e7ce      	b.n	1ebe <filters_set+0x4a>
						CONFIG_LOG_DOMAIN_ID, i) :
    1f20:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    1f24:	e7f0      	b.n	1f08 <filters_set+0x94>
    1f26:	4622      	mov	r2, r4
    1f28:	e7df      	b.n	1eea <filters_set+0x76>
    1f2a:	bf00      	nop
    1f2c:	0000a9d4 	.word	0x0000a9d4
    1f30:	0000a974 	.word	0x0000a974
    1f34:	0000bd25 	.word	0x0000bd25
    1f38:	0000bd50 	.word	0x0000bd50
    1f3c:	0000bd3a 	.word	0x0000bd3a
    1f40:	0000ad34 	.word	0x0000ad34

00001f44 <log_enable>:
{
    1f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f48:	4606      	mov	r6, r0
    1f4a:	4688      	mov	r8, r1
    1f4c:	4691      	mov	r9, r2
    1f4e:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    1f50:	2700      	movs	r7, #0
	severity_level = severity_level_get(argv[1]);
    1f52:	f8d3 b004 	ldr.w	fp, [r3, #4]
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    1f56:	f8df a048 	ldr.w	sl, [pc, #72]	; 1fa0 <log_enable+0x5c>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    1f5a:	2204      	movs	r2, #4
    1f5c:	4658      	mov	r0, fp
    1f5e:	f85a 1b04 	ldr.w	r1, [sl], #4
    1f62:	f007 fe35 	bl	9bd0 <strncmp>
    1f66:	4604      	mov	r4, r0
    1f68:	b170      	cbz	r0, 1f88 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    1f6a:	3701      	adds	r7, #1
    1f6c:	2f05      	cmp	r7, #5
    1f6e:	d1f4      	bne.n	1f5a <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    1f70:	2102      	movs	r1, #2
    1f72:	4630      	mov	r0, r6
    1f74:	686b      	ldr	r3, [r5, #4]
    1f76:	4a09      	ldr	r2, [pc, #36]	; (1f9c <log_enable+0x58>)
    1f78:	f006 fdbd 	bl	8af6 <shell_fprintf>
    1f7c:	f06f 0407 	mvn.w	r4, #7
}
    1f80:	4620      	mov	r0, r4
    1f82:	b003      	add	sp, #12
    1f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    1f88:	4641      	mov	r1, r8
    1f8a:	4630      	mov	r0, r6
    1f8c:	9700      	str	r7, [sp, #0]
    1f8e:	f105 0308 	add.w	r3, r5, #8
    1f92:	f1a9 0202 	sub.w	r2, r9, #2
    1f96:	f7ff ff6d 	bl	1e74 <filters_set>
	return 0;
    1f9a:	e7f1      	b.n	1f80 <log_enable+0x3c>
    1f9c:	0000bd6a 	.word	0x0000bd6a
    1fa0:	0000ad34 	.word	0x0000ad34

00001fa4 <cmd_kernel_version>:
#include <device.h>
#include <drivers/timer/system_timer.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    1fa4:	b513      	push	{r0, r1, r4, lr}
    1fa6:	4604      	mov	r4, r0
	u32_t version = sys_kernel_version_get();
    1fa8:	f005 fa10 	bl	73cc <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    1fac:	f3c0 2307 	ubfx	r3, r0, #8, #8
    1fb0:	9301      	str	r3, [sp, #4]
    1fb2:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1fb6:	9300      	str	r3, [sp, #0]
    1fb8:	2100      	movs	r1, #0
    1fba:	0e03      	lsrs	r3, r0, #24
    1fbc:	4a03      	ldr	r2, [pc, #12]	; (1fcc <cmd_kernel_version+0x28>)
    1fbe:	4620      	mov	r0, r4
    1fc0:	f006 fd99 	bl	8af6 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    1fc4:	2000      	movs	r0, #0
    1fc6:	b002      	add	sp, #8
    1fc8:	bd10      	pop	{r4, pc}
    1fca:	bf00      	nop
    1fcc:	0000bf11 	.word	0x0000bf11

00001fd0 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    1fd0:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    1fd4:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    1fd6:	f008 fa35 	bl	a444 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
    1fda:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    1fde:	2500      	movs	r5, #0
    1fe0:	fba0 bc06 	umull	fp, ip, r0, r6
    1fe4:	fb06 cc01 	mla	ip, r6, r1, ip
    1fe8:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    1fec:	4620      	mov	r0, r4
    1fee:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
    1ff2:	4629      	mov	r1, r5
    1ff4:	4a02      	ldr	r2, [pc, #8]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)
    1ff6:	f006 fd7e 	bl	8af6 <shell_fprintf>
	return 0;
}
    1ffa:	4628      	mov	r0, r5
    1ffc:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    2000:	0000bf2a 	.word	0x0000bf2a

00002004 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    2004:	b510      	push	{r4, lr}
    2006:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", z_clock_elapsed());
    2008:	f001 ff94 	bl	3f34 <z_clock_elapsed>
    200c:	2100      	movs	r1, #0
    200e:	4603      	mov	r3, r0
    2010:	4a07      	ldr	r2, [pc, #28]	; (2030 <cmd_kernel_threads+0x2c>)
    2012:	4620      	mov	r0, r4
    2014:	f006 fd6f 	bl	8af6 <shell_fprintf>
	shell_print(shell, "Threads:");
    2018:	4620      	mov	r0, r4
    201a:	4a06      	ldr	r2, [pc, #24]	; (2034 <cmd_kernel_threads+0x30>)
    201c:	2100      	movs	r1, #0
    201e:	f006 fd6a 	bl	8af6 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    2022:	4621      	mov	r1, r4
    2024:	4804      	ldr	r0, [pc, #16]	; (2038 <cmd_kernel_threads+0x34>)
    2026:	f005 f873 	bl	7110 <k_thread_foreach>
	return 0;
}
    202a:	2000      	movs	r0, #0
    202c:	bd10      	pop	{r4, pc}
    202e:	bf00      	nop
    2030:	0000bf39 	.word	0x0000bf39
    2034:	0000bf58 	.word	0x0000bf58
    2038:	00002099 	.word	0x00002099

0000203c <cmd_kernel_stacks>:
extern K_THREAD_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    203c:	b530      	push	{r4, r5, lr}
	u8_t *buf;
	size_t size, unused = 0;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    203e:	4601      	mov	r1, r0
{
    2040:	4604      	mov	r4, r0
    2042:	b087      	sub	sp, #28
	k_thread_foreach(shell_stack_dump, (void *)shell);
    2044:	4811      	ldr	r0, [pc, #68]	; (208c <cmd_kernel_stacks+0x50>)
    2046:	f005 f863 	bl	7110 <k_thread_foreach>
	size_t size, unused = 0;
    204a:	2300      	movs	r3, #0
    204c:	4a10      	ldr	r2, [pc, #64]	; (2090 <cmd_kernel_stacks+0x54>)
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_THREAD_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_THREAD_STACK_SIZEOF(z_interrupt_stacks[i]);

		for (size_t i = 0; i < size; i++) {
			if (buf[i] == 0xAAU) {
    204e:	f812 1b01 	ldrb.w	r1, [r2], #1
    2052:	29aa      	cmp	r1, #170	; 0xaa
    2054:	d103      	bne.n	205e <cmd_kernel_stacks+0x22>
				unused++;
    2056:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    2058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    205c:	d1f7      	bne.n	204e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    205e:	2264      	movs	r2, #100	; 0x64
    2060:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    2064:	434a      	muls	r2, r1
    2066:	0ad2      	lsrs	r2, r2, #11
    2068:	2500      	movs	r5, #0
    206a:	9205      	str	r2, [sp, #20]
    206c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2070:	4620      	mov	r0, r4
    2072:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2076:	e9cd 2301 	strd	r2, r3, [sp, #4]
    207a:	4629      	mov	r1, r5
    207c:	4b04      	ldr	r3, [pc, #16]	; (2090 <cmd_kernel_stacks+0x54>)
    207e:	4a05      	ldr	r2, [pc, #20]	; (2094 <cmd_kernel_stacks+0x58>)
    2080:	9500      	str	r5, [sp, #0]
    2082:	f006 fd38 	bl	8af6 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    2086:	4628      	mov	r0, r5
    2088:	b007      	add	sp, #28
    208a:	bd30      	pop	{r4, r5, pc}
    208c:	00002171 	.word	0x00002171
    2090:	20002280 	.word	0x20002280
    2094:	0000bf62 	.word	0x0000bf62

00002098 <shell_tdata_dump>:
{
    2098:	b5f0      	push	{r4, r5, r6, r7, lr}
    209a:	b087      	sub	sp, #28
    209c:	4604      	mov	r4, r0
    209e:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
    20a0:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
	tname = k_thread_name_get(thread);
    20a4:	f008 f97a 	bl	a39c <k_thread_name_get>
    20a8:	4606      	mov	r6, r0
	return z_impl_k_current_get();
    20aa:	f004 ffdb 	bl	7064 <z_impl_k_current_get>
	shell_print(shell, "%s%p %-10s",
    20ae:	4b21      	ldr	r3, [pc, #132]	; (2134 <shell_tdata_dump+0x9c>)
    20b0:	4a21      	ldr	r2, [pc, #132]	; (2138 <shell_tdata_dump+0xa0>)
    20b2:	2e00      	cmp	r6, #0
    20b4:	bf08      	it	eq
    20b6:	461e      	moveq	r6, r3
    20b8:	4b20      	ldr	r3, [pc, #128]	; (213c <shell_tdata_dump+0xa4>)
    20ba:	2100      	movs	r1, #0
    20bc:	4284      	cmp	r4, r0
    20be:	bf18      	it	ne
    20c0:	4613      	movne	r3, r2
    20c2:	e9cd 4600 	strd	r4, r6, [sp]
    20c6:	4628      	mov	r0, r5
    20c8:	4a1d      	ldr	r2, [pc, #116]	; (2140 <shell_tdata_dump+0xa8>)
    20ca:	f006 fd14 	bl	8af6 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %d",
    20ce:	6a23      	ldr	r3, [r4, #32]
    20d0:	2100      	movs	r1, #0
    20d2:	9301      	str	r3, [sp, #4]
    20d4:	f994 300e 	ldrsb.w	r3, [r4, #14]
    20d8:	4628      	mov	r0, r5
    20da:	4a1a      	ldr	r2, [pc, #104]	; (2144 <shell_tdata_dump+0xac>)
    20dc:	9300      	str	r3, [sp, #0]
    20de:	7b23      	ldrb	r3, [r4, #12]
    20e0:	f006 fd09 	bl	8af6 <shell_fprintf>
	shell_print(shell, "\tstate: %s", k_thread_state_str(thread));
    20e4:	4620      	mov	r0, r4
    20e6:	f005 f85b 	bl	71a0 <k_thread_state_str>
    20ea:	2100      	movs	r1, #0
    20ec:	4603      	mov	r3, r0
    20ee:	4a16      	ldr	r2, [pc, #88]	; (2148 <shell_tdata_dump+0xb0>)
    20f0:	4628      	mov	r0, r5
    20f2:	f006 fd00 	bl	8af6 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    20f6:	a905      	add	r1, sp, #20
    20f8:	4620      	mov	r0, r4
    20fa:	f008 f951 	bl	a3a0 <z_impl_k_thread_stack_space_get>
	if (ret) {
    20fe:	4601      	mov	r1, r0
    2100:	b138      	cbz	r0, 2112 <shell_tdata_dump+0x7a>
		shell_print(shell,
    2102:	4603      	mov	r3, r0
    2104:	2100      	movs	r1, #0
    2106:	4628      	mov	r0, r5
    2108:	4a10      	ldr	r2, [pc, #64]	; (214c <shell_tdata_dump+0xb4>)
    210a:	f006 fcf4 	bl	8af6 <shell_fprintf>
}
    210e:	b007      	add	sp, #28
    2110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    2112:	2364      	movs	r3, #100	; 0x64
    2114:	9a05      	ldr	r2, [sp, #20]
    2116:	1ab8      	subs	r0, r7, r2
    2118:	4343      	muls	r3, r0
    211a:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    211e:	e9cd 2000 	strd	r2, r0, [sp]
    2122:	e9cd 7302 	strd	r7, r3, [sp, #8]
    2126:	4628      	mov	r0, r5
    2128:	463b      	mov	r3, r7
    212a:	4a09      	ldr	r2, [pc, #36]	; (2150 <shell_tdata_dump+0xb8>)
    212c:	f006 fce3 	bl	8af6 <shell_fprintf>
}
    2130:	e7ed      	b.n	210e <shell_tdata_dump+0x76>
    2132:	bf00      	nop
    2134:	0000bfa8 	.word	0x0000bfa8
    2138:	0000bbea 	.word	0x0000bbea
    213c:	0000cebe 	.word	0x0000cebe
    2140:	0000bfab 	.word	0x0000bfab
    2144:	0000bfb7 	.word	0x0000bfb7
    2148:	0000bfe1 	.word	0x0000bfe1
    214c:	0000bfed 	.word	0x0000bfed
    2150:	0000c01a 	.word	0x0000c01a

00002154 <cmd_kernel_cycles>:
{
    2154:	b510      	push	{r4, lr}
    2156:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    2158:	f001 ff06 	bl	3f68 <z_timer_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    215c:	2100      	movs	r1, #0
    215e:	4603      	mov	r3, r0
    2160:	4a02      	ldr	r2, [pc, #8]	; (216c <cmd_kernel_cycles+0x18>)
    2162:	4620      	mov	r0, r4
    2164:	f006 fcc7 	bl	8af6 <shell_fprintf>
}
    2168:	2000      	movs	r0, #0
    216a:	bd10      	pop	{r4, pc}
    216c:	0000c051 	.word	0x0000c051

00002170 <shell_stack_dump>:
{
    2170:	b5f0      	push	{r4, r5, r6, r7, lr}
    2172:	4605      	mov	r5, r0
    2174:	460e      	mov	r6, r1
	size_t size = thread->stack_info.size;
    2176:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
{
    217a:	b089      	sub	sp, #36	; 0x24
    217c:	a907      	add	r1, sp, #28
    217e:	f008 f90f 	bl	a3a0 <z_impl_k_thread_stack_space_get>
	if (ret) {
    2182:	4604      	mov	r4, r0
    2184:	b138      	cbz	r0, 2196 <shell_stack_dump+0x26>
		shell_print(shell,
    2186:	4603      	mov	r3, r0
    2188:	2100      	movs	r1, #0
    218a:	4630      	mov	r0, r6
    218c:	4a0f      	ldr	r2, [pc, #60]	; (21cc <shell_stack_dump+0x5c>)
    218e:	f006 fcb2 	bl	8af6 <shell_fprintf>
}
    2192:	b009      	add	sp, #36	; 0x24
    2194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    2196:	4628      	mov	r0, r5
    2198:	f008 f900 	bl	a39c <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    219c:	2364      	movs	r3, #100	; 0x64
    219e:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
    21a0:	f8df c030 	ldr.w	ip, [pc, #48]	; 21d4 <shell_stack_dump+0x64>
	pcnt = ((size - unused) * 100U) / size;
    21a4:	1ab9      	subs	r1, r7, r2
    21a6:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
    21a8:	2800      	cmp	r0, #0
    21aa:	bf08      	it	eq
    21ac:	4660      	moveq	r0, ip
	pcnt = ((size - unused) * 100U) / size;
    21ae:	fbb3 f3f7 	udiv	r3, r3, r7
	shell_print((const struct shell *)user_data,
    21b2:	e9cd 2102 	strd	r2, r1, [sp, #8]
    21b6:	e9cd 7304 	strd	r7, r3, [sp, #16]
    21ba:	e9cd 0700 	strd	r0, r7, [sp]
    21be:	462b      	mov	r3, r5
    21c0:	4621      	mov	r1, r4
    21c2:	4630      	mov	r0, r6
    21c4:	4a02      	ldr	r2, [pc, #8]	; (21d0 <shell_stack_dump+0x60>)
    21c6:	f006 fc96 	bl	8af6 <shell_fprintf>
    21ca:	e7e2      	b.n	2192 <shell_stack_dump+0x22>
    21cc:	0000bfed 	.word	0x0000bfed
    21d0:	0000c067 	.word	0x0000c067
    21d4:	0000bfa8 	.word	0x0000bfa8

000021d8 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
    21d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    21dc:	2100      	movs	r1, #0
    21de:	4a0e      	ldr	r2, [pc, #56]	; (2218 <cmd_device_list+0x40>)
{
    21e0:	4605      	mov	r5, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    21e2:	f006 fc88 	bl	8af6 <shell_fprintf>

	for (dev = __device_start; dev != __device_end; dev++) {
    21e6:	4c0d      	ldr	r4, [pc, #52]	; (221c <cmd_device_list+0x44>)
    21e8:	4e0d      	ldr	r6, [pc, #52]	; (2220 <cmd_device_list+0x48>)
		if (dev->driver_api == NULL) {
			continue;
		}

		shell_fprintf(shell, SHELL_NORMAL, "- %s", dev->name);
    21ea:	4f0e      	ldr	r7, [pc, #56]	; (2224 <cmd_device_list+0x4c>)
		if (!err) {
			shell_fprintf(shell, SHELL_NORMAL, " (%s)",
				      device_pm_state_str(state));
		}
#endif /* CONFIG_DEVICE_POWER_MANAGEMENT */
		shell_fprintf(shell, SHELL_NORMAL, "\n");
    21ec:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2228 <cmd_device_list+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
    21f0:	42b4      	cmp	r4, r6
    21f2:	d102      	bne.n	21fa <cmd_device_list+0x22>
	}

	return 0;
}
    21f4:	2000      	movs	r0, #0
    21f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (dev->driver_api == NULL) {
    21fa:	68a3      	ldr	r3, [r4, #8]
    21fc:	b153      	cbz	r3, 2214 <cmd_device_list+0x3c>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", dev->name);
    21fe:	463a      	mov	r2, r7
    2200:	2100      	movs	r1, #0
    2202:	4628      	mov	r0, r5
    2204:	6823      	ldr	r3, [r4, #0]
    2206:	f006 fc76 	bl	8af6 <shell_fprintf>
		shell_fprintf(shell, SHELL_NORMAL, "\n");
    220a:	4642      	mov	r2, r8
    220c:	2100      	movs	r1, #0
    220e:	4628      	mov	r0, r5
    2210:	f006 fc71 	bl	8af6 <shell_fprintf>
	for (dev = __device_start; dev != __device_end; dev++) {
    2214:	3410      	adds	r4, #16
    2216:	e7eb      	b.n	21f0 <cmd_device_list+0x18>
    2218:	0000c132 	.word	0x0000c132
    221c:	20000134 	.word	0x20000134
    2220:	20000194 	.word	0x20000194
    2224:	0000c13c 	.word	0x0000c13c
    2228:	0000c04f 	.word	0x0000c04f

0000222c <device_get_config_level>:
{
    222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    222e:	4605      	mov	r5, r0
	bool devices = false;
    2230:	2000      	movs	r0, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2232:	4b0a      	ldr	r3, [pc, #40]	; (225c <device_get_config_level+0x30>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n", dev->name);
    2234:	4f0a      	ldr	r7, [pc, #40]	; (2260 <device_get_config_level+0x34>)
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2236:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    223a:	3101      	adds	r1, #1
    223c:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
    2240:	42a6      	cmp	r6, r4
    2242:	d800      	bhi.n	2246 <device_get_config_level+0x1a>
}
    2244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (dev->driver_api != NULL) {
    2246:	68a3      	ldr	r3, [r4, #8]
    2248:	b133      	cbz	r3, 2258 <device_get_config_level+0x2c>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n", dev->name);
    224a:	4628      	mov	r0, r5
    224c:	463a      	mov	r2, r7
    224e:	2100      	movs	r1, #0
    2250:	6823      	ldr	r3, [r4, #0]
    2252:	f006 fc50 	bl	8af6 <shell_fprintf>
			devices = true;
    2256:	2001      	movs	r0, #1
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2258:	3410      	adds	r4, #16
    225a:	e7f1      	b.n	2240 <device_get_config_level+0x14>
    225c:	0000af40 	.word	0x0000af40
    2260:	0000c141 	.word	0x0000c141

00002264 <cmd_device_levels>:
{
    2264:	b510      	push	{r4, lr}
    2266:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    2268:	2100      	movs	r1, #0
    226a:	4a1e      	ldr	r2, [pc, #120]	; (22e4 <cmd_device_levels+0x80>)
    226c:	f006 fc43 	bl	8af6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    2270:	2102      	movs	r1, #2
    2272:	4620      	mov	r0, r4
    2274:	f7ff ffda 	bl	222c <device_get_config_level>
	if (ret == false) {
    2278:	4601      	mov	r1, r0
    227a:	b918      	cbnz	r0, 2284 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    227c:	4620      	mov	r0, r4
    227e:	4a1a      	ldr	r2, [pc, #104]	; (22e8 <cmd_device_levels+0x84>)
    2280:	f006 fc39 	bl	8af6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    2284:	2100      	movs	r1, #0
    2286:	4620      	mov	r0, r4
    2288:	4a18      	ldr	r2, [pc, #96]	; (22ec <cmd_device_levels+0x88>)
    228a:	f006 fc34 	bl	8af6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    228e:	2103      	movs	r1, #3
    2290:	4620      	mov	r0, r4
    2292:	f7ff ffcb 	bl	222c <device_get_config_level>
	if (ret == false) {
    2296:	4601      	mov	r1, r0
    2298:	b918      	cbnz	r0, 22a2 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    229a:	4620      	mov	r0, r4
    229c:	4a12      	ldr	r2, [pc, #72]	; (22e8 <cmd_device_levels+0x84>)
    229e:	f006 fc2a 	bl	8af6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    22a2:	2100      	movs	r1, #0
    22a4:	4620      	mov	r0, r4
    22a6:	4a12      	ldr	r2, [pc, #72]	; (22f0 <cmd_device_levels+0x8c>)
    22a8:	f006 fc25 	bl	8af6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    22ac:	2100      	movs	r1, #0
    22ae:	4620      	mov	r0, r4
    22b0:	f7ff ffbc 	bl	222c <device_get_config_level>
	if (ret == false) {
    22b4:	4601      	mov	r1, r0
    22b6:	b918      	cbnz	r0, 22c0 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    22b8:	4620      	mov	r0, r4
    22ba:	4a0b      	ldr	r2, [pc, #44]	; (22e8 <cmd_device_levels+0x84>)
    22bc:	f006 fc1b 	bl	8af6 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    22c0:	2100      	movs	r1, #0
    22c2:	4620      	mov	r0, r4
    22c4:	4a0b      	ldr	r2, [pc, #44]	; (22f4 <cmd_device_levels+0x90>)
    22c6:	f006 fc16 	bl	8af6 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    22ca:	2101      	movs	r1, #1
    22cc:	4620      	mov	r0, r4
    22ce:	f7ff ffad 	bl	222c <device_get_config_level>
	if (ret == false) {
    22d2:	4601      	mov	r1, r0
    22d4:	b918      	cbnz	r0, 22de <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    22d6:	4620      	mov	r0, r4
    22d8:	4a03      	ldr	r2, [pc, #12]	; (22e8 <cmd_device_levels+0x84>)
    22da:	f006 fc0c 	bl	8af6 <shell_fprintf>
}
    22de:	2000      	movs	r0, #0
    22e0:	bd10      	pop	{r4, pc}
    22e2:	bf00      	nop
    22e4:	0000c147 	.word	0x0000c147
    22e8:	0000c155 	.word	0x0000c155
    22ec:	0000c15d 	.word	0x0000c15d
    22f0:	0000c16b 	.word	0x0000c16b
    22f4:	0000c17a 	.word	0x0000c17a

000022f8 <date_print>:

#define HELP_NONE      "[none]"
#define HELP_DATE_SET  "[Y-m-d] <H:M:S>"

static void date_print(const struct shell *shell, struct tm *tm)
{
    22f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	shell_print(shell,
    22fa:	680a      	ldr	r2, [r1, #0]
    22fc:	694b      	ldr	r3, [r1, #20]
    22fe:	9204      	str	r2, [sp, #16]
    2300:	684a      	ldr	r2, [r1, #4]
    2302:	f203 736c 	addw	r3, r3, #1900	; 0x76c
    2306:	9203      	str	r2, [sp, #12]
    2308:	688a      	ldr	r2, [r1, #8]
    230a:	9202      	str	r2, [sp, #8]
    230c:	68ca      	ldr	r2, [r1, #12]
    230e:	9201      	str	r2, [sp, #4]
    2310:	690a      	ldr	r2, [r1, #16]
    2312:	2100      	movs	r1, #0
    2314:	3201      	adds	r2, #1
    2316:	9200      	str	r2, [sp, #0]
    2318:	4a02      	ldr	r2, [pc, #8]	; (2324 <date_print+0x2c>)
    231a:	f006 fbec 	bl	8af6 <shell_fprintf>
		    tm->tm_mon + 1,
		    tm->tm_mday,
		    tm->tm_hour,
		    tm->tm_min,
		    tm->tm_sec);
}
    231e:	b007      	add	sp, #28
    2320:	f85d fb04 	ldr.w	pc, [sp], #4
    2324:	0000c1df 	.word	0x0000c1df

00002328 <get_h_m_s>:
 * For user convenience of small adjustments to time the time argument will
 * accept H:M:S, :M:S or ::S where the missing field(s) will be filled in by
 * the previous time state.
 */
static int get_h_m_s(const struct shell *shell, struct tm *tm, char *time_str)
{
    2328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *endptr;

	if (*time_str == ':') {
    232a:	7813      	ldrb	r3, [r2, #0]
{
    232c:	4606      	mov	r6, r0
	if (*time_str == ':') {
    232e:	2b3a      	cmp	r3, #58	; 0x3a
{
    2330:	460f      	mov	r7, r1
    2332:	4615      	mov	r5, r2
	if (*time_str == ':') {
    2334:	d116      	bne.n	2364 <get_h_m_s+0x3c>
		time_str++;
    2336:	1c54      	adds	r4, r2, #1
		} else {
			return -EINVAL;
		}
	}

	if (*time_str == ':') {
    2338:	7823      	ldrb	r3, [r4, #0]
    233a:	2b3a      	cmp	r3, #58	; 0x3a
    233c:	d12e      	bne.n	239c <get_h_m_s+0x74>
		time_str++;
    233e:	3401      	adds	r4, #1
		} else {
			return -EINVAL;
		}
	}

	endptr = NULL;
    2340:	2300      	movs	r3, #0
	tm->tm_sec = strtol(time_str, &endptr, 10);
    2342:	220a      	movs	r2, #10
    2344:	4620      	mov	r0, r4
    2346:	a901      	add	r1, sp, #4
	endptr = NULL;
    2348:	9301      	str	r3, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
    234a:	f007 fb6d 	bl	9a28 <strtol>
	if ((endptr == time_str) || (*endptr != '\0')) {
    234e:	9a01      	ldr	r2, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
    2350:	4603      	mov	r3, r0
	if ((endptr == time_str) || (*endptr != '\0')) {
    2352:	42a2      	cmp	r2, r4
	tm->tm_sec = strtol(time_str, &endptr, 10);
    2354:	6038      	str	r0, [r7, #0]
	if ((endptr == time_str) || (*endptr != '\0')) {
    2356:	d010      	beq.n	237a <get_h_m_s+0x52>
    2358:	7810      	ldrb	r0, [r2, #0]
    235a:	b970      	cbnz	r0, 237a <get_h_m_s+0x52>
		return -EINVAL;
	}

	/* Note range allows for a leap second */
	if ((tm->tm_sec < 0) || (tm->tm_sec > 60)) {
    235c:	2b3c      	cmp	r3, #60	; 0x3c
    235e:	d90e      	bls.n	237e <get_h_m_s+0x56>
		shell_error(shell, "Invalid second");
    2360:	4a18      	ldr	r2, [pc, #96]	; (23c4 <get_h_m_s+0x9c>)
    2362:	e014      	b.n	238e <get_h_m_s+0x66>
		endptr = NULL;
    2364:	2300      	movs	r3, #0
		tm->tm_hour = strtol(time_str, &endptr, 10);
    2366:	220a      	movs	r2, #10
    2368:	4628      	mov	r0, r5
    236a:	a901      	add	r1, sp, #4
		endptr = NULL;
    236c:	9301      	str	r3, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
    236e:	f007 fb5b 	bl	9a28 <strtol>
		if (endptr == time_str) {
    2372:	9c01      	ldr	r4, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
    2374:	60b8      	str	r0, [r7, #8]
		if (endptr == time_str) {
    2376:	42ac      	cmp	r4, r5
    2378:	d103      	bne.n	2382 <get_h_m_s+0x5a>
		return -EINVAL;
    237a:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
    237e:	b003      	add	sp, #12
    2380:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*endptr == ':') {
    2382:	7823      	ldrb	r3, [r4, #0]
    2384:	2b3a      	cmp	r3, #58	; 0x3a
    2386:	d1f8      	bne.n	237a <get_h_m_s+0x52>
			if ((tm->tm_hour < 0) || (tm->tm_hour > 23)) {
    2388:	2817      	cmp	r0, #23
    238a:	d905      	bls.n	2398 <get_h_m_s+0x70>
				shell_error(shell, "Invalid hour");
    238c:	4a0e      	ldr	r2, [pc, #56]	; (23c8 <get_h_m_s+0xa0>)
		shell_error(shell, "Invalid second");
    238e:	2102      	movs	r1, #2
    2390:	4630      	mov	r0, r6
    2392:	f006 fbb0 	bl	8af6 <shell_fprintf>
    2396:	e7f0      	b.n	237a <get_h_m_s+0x52>
			time_str = endptr + 1;
    2398:	3401      	adds	r4, #1
    239a:	e7cd      	b.n	2338 <get_h_m_s+0x10>
		endptr = NULL;
    239c:	2300      	movs	r3, #0
		tm->tm_min = strtol(time_str, &endptr, 10);
    239e:	220a      	movs	r2, #10
    23a0:	4620      	mov	r0, r4
    23a2:	a901      	add	r1, sp, #4
		endptr = NULL;
    23a4:	9301      	str	r3, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
    23a6:	f007 fb3f 	bl	9a28 <strtol>
		if (endptr == time_str) {
    23aa:	9a01      	ldr	r2, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
    23ac:	6078      	str	r0, [r7, #4]
		if (endptr == time_str) {
    23ae:	42a2      	cmp	r2, r4
    23b0:	d0e3      	beq.n	237a <get_h_m_s+0x52>
		} else if (*endptr == ':') {
    23b2:	7813      	ldrb	r3, [r2, #0]
    23b4:	2b3a      	cmp	r3, #58	; 0x3a
    23b6:	d1e0      	bne.n	237a <get_h_m_s+0x52>
			if ((tm->tm_min < 0) || (tm->tm_min > 59)) {
    23b8:	283b      	cmp	r0, #59	; 0x3b
    23ba:	d901      	bls.n	23c0 <get_h_m_s+0x98>
				shell_error(shell, "Invalid minute");
    23bc:	4a03      	ldr	r2, [pc, #12]	; (23cc <get_h_m_s+0xa4>)
    23be:	e7e6      	b.n	238e <get_h_m_s+0x66>
			time_str = endptr + 1;
    23c0:	1c54      	adds	r4, r2, #1
    23c2:	e7bd      	b.n	2340 <get_h_m_s+0x18>
    23c4:	0000c21e 	.word	0x0000c21e
    23c8:	0000c200 	.word	0x0000c200
    23cc:	0000c20e 	.word	0x0000c20e

000023d0 <cmd_date_set>:

static int cmd_date_set(const struct shell *shell, size_t argc, char **argv)
{
    23d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    23d4:	4604      	mov	r4, r0
    23d6:	460d      	mov	r5, r1
    23d8:	4617      	mov	r7, r2
    23da:	b091      	sub	sp, #68	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
    23dc:	2001      	movs	r0, #1
    23de:	a902      	add	r1, sp, #8
    23e0:	f003 faf0 	bl	59c4 <z_impl_clock_gettime>
	struct tm tm;
	int ret;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
    23e4:	a907      	add	r1, sp, #28
    23e6:	a802      	add	r0, sp, #8
    23e8:	f003 fa0a 	bl	5800 <gmtime_r>

	if (argc == 3) {
    23ec:	2d03      	cmp	r5, #3
    23ee:	d160      	bne.n	24b2 <cmd_date_set+0xe2>
	endptr = NULL;
    23f0:	f04f 0900 	mov.w	r9, #0
		ret = get_y_m_d(shell, &tm, argv[1]);
    23f4:	687d      	ldr	r5, [r7, #4]
	year = strtol(date_str, &endptr, 10);
    23f6:	220a      	movs	r2, #10
    23f8:	4628      	mov	r0, r5
    23fa:	a901      	add	r1, sp, #4
	endptr = NULL;
    23fc:	f8cd 9004 	str.w	r9, [sp, #4]
	year = strtol(date_str, &endptr, 10);
    2400:	f007 fb12 	bl	9a28 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
    2404:	9e01      	ldr	r6, [sp, #4]
	year = strtol(date_str, &endptr, 10);
    2406:	4680      	mov	r8, r0
	if ((endptr == date_str) || (*endptr != '-')) {
    2408:	42b5      	cmp	r5, r6
    240a:	d018      	beq.n	243e <cmd_date_set+0x6e>
    240c:	7832      	ldrb	r2, [r6, #0]
    240e:	2a2d      	cmp	r2, #45	; 0x2d
    2410:	d115      	bne.n	243e <cmd_date_set+0x6e>
	date_str = endptr + 1;
    2412:	3601      	adds	r6, #1
	month = strtol(date_str, &endptr, 10);
    2414:	220a      	movs	r2, #10
    2416:	4630      	mov	r0, r6
    2418:	a901      	add	r1, sp, #4
	endptr = NULL;
    241a:	f8cd 9004 	str.w	r9, [sp, #4]
	month = strtol(date_str, &endptr, 10);
    241e:	f007 fb03 	bl	9a28 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
    2422:	9b01      	ldr	r3, [sp, #4]
    2424:	429e      	cmp	r6, r3
    2426:	d00a      	beq.n	243e <cmd_date_set+0x6e>
    2428:	781a      	ldrb	r2, [r3, #0]
    242a:	2a2d      	cmp	r2, #45	; 0x2d
    242c:	d107      	bne.n	243e <cmd_date_set+0x6e>
	if ((month < 1) || (month > 12)) {
    242e:	1e45      	subs	r5, r0, #1
    2430:	2d0b      	cmp	r5, #11
    2432:	d90d      	bls.n	2450 <cmd_date_set+0x80>
		shell_error(shell, "Invalid month");
    2434:	4a2b      	ldr	r2, [pc, #172]	; (24e4 <cmd_date_set+0x114>)
		shell_error(shell, "Invalid day");
    2436:	2102      	movs	r1, #2
    2438:	4620      	mov	r0, r4
    243a:	f006 fb5c 	bl	8af6 <shell_fprintf>
		if (ret != 0) {
			shell_help(shell);
    243e:	4620      	mov	r0, r4
    2440:	f006 fb66 	bl	8b10 <shell_help>
	tp.tv_nsec = 0;

	ret = clock_settime(CLOCK_REALTIME, &tp);
	if (ret != 0) {
		shell_error(shell, "Could not set date %d", ret);
		return -EINVAL;
    2444:	f06f 0515 	mvn.w	r5, #21
	}

	date_print(shell, &tm);

	return 0;
}
    2448:	4628      	mov	r0, r5
    244a:	b011      	add	sp, #68	; 0x44
    244c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	date_str = endptr + 1;
    2450:	1c5e      	adds	r6, r3, #1
	day = strtol(date_str, &endptr, 10);
    2452:	220a      	movs	r2, #10
    2454:	4630      	mov	r0, r6
    2456:	a901      	add	r1, sp, #4
	endptr = NULL;
    2458:	f8cd 9004 	str.w	r9, [sp, #4]
	day = strtol(date_str, &endptr, 10);
    245c:	f007 fae4 	bl	9a28 <strtol>
	if ((endptr == date_str) || (*endptr != '\0')) {
    2460:	9b01      	ldr	r3, [sp, #4]
    2462:	429e      	cmp	r6, r3
    2464:	d0eb      	beq.n	243e <cmd_date_set+0x6e>
    2466:	781b      	ldrb	r3, [r3, #0]
    2468:	2b00      	cmp	r3, #0
    246a:	d1e8      	bne.n	243e <cmd_date_set+0x6e>
	if ((day < 1) || (day > 31)) {
    246c:	1e43      	subs	r3, r0, #1
    246e:	2b1e      	cmp	r3, #30
    2470:	d901      	bls.n	2476 <cmd_date_set+0xa6>
		shell_error(shell, "Invalid day");
    2472:	4a1d      	ldr	r2, [pc, #116]	; (24e8 <cmd_date_set+0x118>)
    2474:	e7df      	b.n	2436 <cmd_date_set+0x66>
	tm->tm_year = year - 1900;
    2476:	f2a8 736c 	subw	r3, r8, #1900	; 0x76c
	tm->tm_mon = month - 1;
    247a:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
		ret = get_h_m_s(shell, &tm, argv[2]);
    247e:	68ba      	ldr	r2, [r7, #8]
	tm->tm_mday = day;
    2480:	900a      	str	r0, [sp, #40]	; 0x28
		ret = get_h_m_s(shell, &tm, argv[2]);
    2482:	4620      	mov	r0, r4
    2484:	a907      	add	r1, sp, #28
    2486:	f7ff ff4f 	bl	2328 <get_h_m_s>
		if (ret != 0) {
    248a:	2800      	cmp	r0, #0
    248c:	d1d7      	bne.n	243e <cmd_date_set+0x6e>
	tp.tv_sec = timeutil_timegm(&tm);
    248e:	a807      	add	r0, sp, #28
    2490:	f005 fded 	bl	806e <timeutil_timegm>
    2494:	460b      	mov	r3, r1
    2496:	4602      	mov	r2, r0
    2498:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (tp.tv_sec == -1) {
    249c:	3301      	adds	r3, #1
    249e:	bf08      	it	eq
    24a0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    24a4:	d109      	bne.n	24ba <cmd_date_set+0xea>
		shell_error(shell, "Failed to calculate seconds since Epoch");
    24a6:	2102      	movs	r1, #2
    24a8:	4620      	mov	r0, r4
    24aa:	4a10      	ldr	r2, [pc, #64]	; (24ec <cmd_date_set+0x11c>)
    24ac:	f006 fb23 	bl	8af6 <shell_fprintf>
		return -EINVAL;
    24b0:	e7c8      	b.n	2444 <cmd_date_set+0x74>
	} else if (argc == 2) {
    24b2:	2d02      	cmp	r5, #2
    24b4:	d1c3      	bne.n	243e <cmd_date_set+0x6e>
		ret = get_h_m_s(shell, &tm, argv[1]);
    24b6:	687a      	ldr	r2, [r7, #4]
    24b8:	e7e3      	b.n	2482 <cmd_date_set+0xb2>
	tp.tv_nsec = 0;
    24ba:	2300      	movs	r3, #0
	ret = clock_settime(CLOCK_REALTIME, &tp);
    24bc:	2001      	movs	r0, #1
    24be:	a902      	add	r1, sp, #8
	tp.tv_nsec = 0;
    24c0:	9304      	str	r3, [sp, #16]
	ret = clock_settime(CLOCK_REALTIME, &tp);
    24c2:	f7fe f811 	bl	4e8 <clock_settime>
	if (ret != 0) {
    24c6:	4605      	mov	r5, r0
    24c8:	b130      	cbz	r0, 24d8 <cmd_date_set+0x108>
		shell_error(shell, "Could not set date %d", ret);
    24ca:	4603      	mov	r3, r0
    24cc:	2102      	movs	r1, #2
    24ce:	4620      	mov	r0, r4
    24d0:	4a07      	ldr	r2, [pc, #28]	; (24f0 <cmd_date_set+0x120>)
    24d2:	f006 fb10 	bl	8af6 <shell_fprintf>
    24d6:	e7b5      	b.n	2444 <cmd_date_set+0x74>
	date_print(shell, &tm);
    24d8:	4620      	mov	r0, r4
    24da:	a907      	add	r1, sp, #28
    24dc:	f7ff ff0c 	bl	22f8 <date_print>
	return 0;
    24e0:	e7b2      	b.n	2448 <cmd_date_set+0x78>
    24e2:	bf00      	nop
    24e4:	0000c22e 	.word	0x0000c22e
    24e8:	0000c23d 	.word	0x0000c23d
    24ec:	0000c24a 	.word	0x0000c24a
    24f0:	0000c273 	.word	0x0000c273

000024f4 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    24f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
    24f6:	6883      	ldr	r3, [r0, #8]
{
    24f8:	4604      	mov	r4, r0
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
    24fa:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
    24fe:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
    2500:	0652      	lsls	r2, r2, #25
    2502:	d508      	bpl.n	2516 <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    2504:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    2508:	68c0      	ldr	r0, [r0, #12]
    250a:	f36f 1286 	bfc	r2, #6, #1
    250e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
    2512:	f006 ff69 	bl	93e8 <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
    2516:	68e3      	ldr	r3, [r4, #12]
    2518:	68db      	ldr	r3, [r3, #12]
    251a:	b963      	cbnz	r3, 2536 <history_handle+0x42>
		if (up) {
    251c:	b39d      	cbz	r5, 2586 <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
    251e:	68a0      	ldr	r0, [r4, #8]
    2520:	3038      	adds	r0, #56	; 0x38
    2522:	f006 fa6e 	bl	8a02 <shell_strlen>

			if (cmd_len) {
    2526:	68a3      	ldr	r3, [r4, #8]
    2528:	b378      	cbz	r0, 258a <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
    252a:	f103 0138 	add.w	r1, r3, #56	; 0x38
    252e:	f503 709c 	add.w	r0, r3, #312	; 0x138
    2532:	f007 fb0f 	bl	9b54 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
    2536:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
    2538:	4629      	mov	r1, r5
    253a:	68e0      	ldr	r0, [r4, #12]
    253c:	f10d 0306 	add.w	r3, sp, #6
    2540:	3238      	adds	r2, #56	; 0x38
    2542:	f006 ff54 	bl	93ee <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    2546:	b958      	cbnz	r0, 2560 <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    2548:	68a0      	ldr	r0, [r4, #8]
    254a:	f500 719c 	add.w	r1, r0, #312	; 0x138
    254e:	3038      	adds	r0, #56	; 0x38
    2550:	f007 fb00 	bl	9b54 <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
    2554:	68a0      	ldr	r0, [r4, #8]
    2556:	3038      	adds	r0, #56	; 0x38
    2558:	f006 fa53 	bl	8a02 <shell_strlen>
    255c:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
    2560:	4620      	mov	r0, r4
    2562:	f006 fd81 	bl	9068 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    2566:	4a0a      	ldr	r2, [pc, #40]	; (2590 <history_handle+0x9c>)
    2568:	490a      	ldr	r1, [pc, #40]	; (2594 <history_handle+0xa0>)
    256a:	6960      	ldr	r0, [r4, #20]
    256c:	f006 fa4f 	bl	8a0e <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
    2570:	4620      	mov	r0, r4
    2572:	f000 ff13 	bl	339c <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    2576:	68a3      	ldr	r3, [r4, #8]
    2578:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	shell->ctx->cmd_buff_len = len;
	shell_op_cond_next_line(shell);
    257c:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = len;
    257e:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
    2580:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
    2582:	f000 fecd 	bl	3320 <shell_op_cond_next_line>
}
    2586:	b003      	add	sp, #12
    2588:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    258a:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
    258e:	e7d2      	b.n	2536 <history_handle+0x42>
    2590:	0000c365 	.word	0x0000c365
    2594:	0000c13e 	.word	0x0000c13e

00002598 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    2598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    259c:	2200      	movs	r2, #0
{
    259e:	4604      	mov	r4, r0
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
    25a0:	6883      	ldr	r3, [r0, #8]
{
    25a2:	b09d      	sub	sp, #116	; 0x74
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
    25a4:	69de      	ldr	r6, [r3, #28]
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    25a6:	3338      	adds	r3, #56	; 0x38
	size_t argc = 0, args_left = SIZE_MAX;
    25a8:	e9cd 2203 	strd	r2, r2, [sp, #12]
	char *cmd_buf = shell->ctx->cmd_buff;
    25ac:	9301      	str	r3, [sp, #4]
	bool has_last_handler = false;

	shell_op_cursor_end_move(shell);
    25ae:	f006 fd61 	bl	9074 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
    25b2:	4620      	mov	r0, r4
    25b4:	f006 fce6 	bl	8f84 <shell_cursor_in_empty_line>
    25b8:	b918      	cbnz	r0, 25c2 <execute+0x2a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    25ba:	49a4      	ldr	r1, [pc, #656]	; (284c <execute+0x2b4>)
    25bc:	6960      	ldr	r0, [r4, #20]
    25be:	f006 fa26 	bl	8a0e <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    25c2:	68a0      	ldr	r0, [r4, #8]
    25c4:	2214      	movs	r2, #20
    25c6:	2100      	movs	r1, #0
    25c8:	3008      	adds	r0, #8
    25ca:	f007 fb62 	bl	9c92 <memset>

	shell_cmd_trim(shell);
    25ce:	4620      	mov	r0, r4
    25d0:	f006 fc85 	bl	8ede <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
    25d4:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
    25d6:	68e0      	ldr	r0, [r4, #12]
    25d8:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
    25da:	3138      	adds	r1, #56	; 0x38
    25dc:	f006 ff3e 	bl	945c <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
    25e0:	4620      	mov	r0, r4
    25e2:	f007 f8fc 	bl	97de <shell_wildcard_prepare>
	}

	/* Parent present means we are in select mode. */
	if (parent != NULL) {
    25e6:	2e00      	cmp	r6, #0
    25e8:	f000 810d 	beq.w	2806 <execute+0x26e>
		argv[0] = parent->syntax;
    25ec:	6833      	ldr	r3, [r6, #0]
    25ee:	930f      	str	r3, [sp, #60]	; 0x3c
		argv[1] = cmd_buf;
    25f0:	9b01      	ldr	r3, [sp, #4]
    25f2:	9310      	str	r3, [sp, #64]	; 0x40
	if (entry->handler) {
    25f4:	68f3      	ldr	r3, [r6, #12]
    25f6:	b35b      	cbz	r3, 2650 <execute+0xb8>
		*active_cmd = *entry;
    25f8:	4637      	mov	r7, r6
    25fa:	68a5      	ldr	r5, [r4, #8]
    25fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    25fe:	3508      	adds	r5, #8
    2600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2602:	683b      	ldr	r3, [r7, #0]
    2604:	f8dd 800c 	ldr.w	r8, [sp, #12]
    2608:	602b      	str	r3, [r5, #0]
		if ((entry->subcmd == NULL)
    260a:	68b3      	ldr	r3, [r6, #8]
    260c:	bb23      	cbnz	r3, 2658 <execute+0xc0>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    260e:	7c73      	ldrb	r3, [r6, #17]
    2610:	2bfe      	cmp	r3, #254	; 0xfe
    2612:	d121      	bne.n	2658 <execute+0xc0>
			*args_left = entry->args.mandatory - 1;
    2614:	7c37      	ldrb	r7, [r6, #16]
			*lvl = *lvl + 1;
    2616:	f108 0301 	add.w	r3, r8, #1
			*args_left = entry->args.mandatory - 1;
    261a:	3f01      	subs	r7, #1
			*lvl = *lvl + 1;
    261c:	9303      	str	r3, [sp, #12]
	if (entry->help) {
    261e:	f8d6 e004 	ldr.w	lr, [r6, #4]
    2622:	f1be 0f00 	cmp.w	lr, #0
    2626:	d008      	beq.n	263a <execute+0xa2>
		*help_entry = *entry;
    2628:	46b4      	mov	ip, r6
    262a:	46f2      	mov	sl, lr
    262c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2630:	ad0a      	add	r5, sp, #40	; 0x28
    2632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2634:	f8dc 3000 	ldr.w	r3, [ip]
    2638:	602b      	str	r3, [r5, #0]
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
    263a:	9b03      	ldr	r3, [sp, #12]
		argvp = &argv[1];
    263c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
		cmd_lvl++;
    2640:	3301      	adds	r3, #1
    2642:	9303      	str	r3, [sp, #12]
			/* Wildcard character was not found function can process
			 * argument.
			 */
			if (status != SHELL_WILDCARD_NOT_FOUND) {
				++cmd_lvl;
				wildcard_found = true;
    2644:	f04f 0b00 	mov.w	fp, #0
    2648:	465d      	mov	r5, fp
    264a:	f8cd b000 	str.w	fp, [sp]
    264e:	e071      	b.n	2734 <execute+0x19c>
	size_t argc = 0, args_left = SIZE_MAX;
    2650:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    2654:	4698      	mov	r8, r3
    2656:	e7e2      	b.n	261e <execute+0x86>
	size_t argc = 0, args_left = SIZE_MAX;
    2658:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    265c:	e7df      	b.n	261e <execute+0x86>
		} else if ((argc == 1) && (quote != 0)) {
    265e:	2a01      	cmp	r2, #1
    2660:	d106      	bne.n	2670 <execute+0xd8>
    2662:	b128      	cbz	r0, 2670 <execute+0xd8>
			shell_internal_fprintf(shell, SHELL_ERROR,
    2664:	2102      	movs	r1, #2
    2666:	4620      	mov	r0, r4
    2668:	4a79      	ldr	r2, [pc, #484]	; (2850 <execute+0x2b8>)
    266a:	f006 fd9e 	bl	91aa <shell_internal_fprintf>
    266e:	e077      	b.n	2760 <execute+0x1c8>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2670:	9b03      	ldr	r3, [sp, #12]
    2672:	2b00      	cmp	r3, #0
    2674:	d07a      	beq.n	276c <execute+0x1d4>
		    (!strcmp(argvp[0], "-h") ||
    2676:	4977      	ldr	r1, [pc, #476]	; (2854 <execute+0x2bc>)
    2678:	f8d9 0000 	ldr.w	r0, [r9]
    267c:	f007 fa9c 	bl	9bb8 <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2680:	b940      	cbnz	r0, 2694 <execute+0xfc>
			if (help_entry.help) {
    2682:	f1ba 0f00 	cmp.w	sl, #0
    2686:	d140      	bne.n	270a <execute+0x172>
			shell_internal_fprintf(shell, SHELL_ERROR,
    2688:	4a73      	ldr	r2, [pc, #460]	; (2858 <execute+0x2c0>)
		shell_internal_fprintf(shell, SHELL_ERROR,
    268a:	2102      	movs	r1, #2
    268c:	4620      	mov	r0, r4
    268e:	f006 fd8c 	bl	91aa <shell_internal_fprintf>
		return false;
    2692:	e065      	b.n	2760 <execute+0x1c8>
		     !strcmp(argvp[0], "--help"))) {
    2694:	4971      	ldr	r1, [pc, #452]	; (285c <execute+0x2c4>)
    2696:	f8d9 0000 	ldr.w	r0, [r9]
    269a:	f007 fa8d 	bl	9bb8 <strcmp>
		    (!strcmp(argvp[0], "-h") ||
    269e:	2800      	cmp	r0, #0
    26a0:	d0ef      	beq.n	2682 <execute+0xea>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    26a2:	9b03      	ldr	r3, [sp, #12]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d061      	beq.n	276c <execute+0x1d4>
			status = shell_wildcard_process(shell, entry,
    26a8:	4629      	mov	r1, r5
    26aa:	4620      	mov	r0, r4
    26ac:	f8d9 2000 	ldr.w	r2, [r9]
    26b0:	f001 fa92 	bl	3bd8 <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    26b4:	2802      	cmp	r0, #2
    26b6:	d136      	bne.n	2726 <execute+0x18e>
			cmd_lvl++;
		}

	}

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    26b8:	9b00      	ldr	r3, [sp, #0]
    26ba:	b1b3      	cbz	r3, 26ea <execute+0x152>
		shell_wildcard_finalize(shell);
    26bc:	4620      	mov	r0, r4
    26be:	f007 f8b2 	bl	9826 <shell_wildcard_finalize>
		/* cmd_buffer has been overwritten by function finalize function
		 * with all expanded commands. Hence shell_make_argv needs to
		 * be called again.
		 */
		(void)shell_make_argv(&cmd_lvl,
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
    26c2:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&cmd_lvl,
    26c4:	230c      	movs	r3, #12
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
    26c6:	69d1      	ldr	r1, [r2, #28]
		(void)shell_make_argv(&cmd_lvl,
    26c8:	a80f      	add	r0, sp, #60	; 0x3c
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
    26ca:	3900      	subs	r1, #0
    26cc:	bf18      	it	ne
    26ce:	2101      	movne	r1, #1
		(void)shell_make_argv(&cmd_lvl,
    26d0:	3238      	adds	r2, #56	; 0x38
    26d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    26d6:	eb0d 0003 	add.w	r0, sp, r3
    26da:	f006 fa96 	bl	8c0a <shell_make_argv>
				      shell->ctx->cmd_buff,
				      CONFIG_SHELL_ARGC_MAX);

		if (shell->ctx->selected_cmd) {
    26de:	68a3      	ldr	r3, [r4, #8]
    26e0:	69db      	ldr	r3, [r3, #28]
    26e2:	b113      	cbz	r3, 26ea <execute+0x152>
			/* Apart from what is in the command buffer, there is
			 * a selected command.
			 */
			cmd_lvl++;
    26e4:	9b03      	ldr	r3, [sp, #12]
    26e6:	3301      	adds	r3, #1
    26e8:	9303      	str	r3, [sp, #12]
	if (shell->ctx->active_cmd.handler == NULL) {
    26ea:	68a0      	ldr	r0, [r4, #8]
    26ec:	6943      	ldr	r3, [r0, #20]
    26ee:	2b00      	cmp	r3, #0
    26f0:	f040 8090 	bne.w	2814 <execute+0x27c>
			if (help_entry->help == NULL) {
    26f4:	f1ba 0f00 	cmp.w	sl, #0
    26f8:	d032      	beq.n	2760 <execute+0x1c8>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    26fa:	68c3      	ldr	r3, [r0, #12]
    26fc:	459a      	cmp	sl, r3
    26fe:	d00d      	beq.n	271c <execute+0x184>
				shell->ctx->active_cmd = *help_entry;
    2700:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    2704:	f100 0508 	add.w	r5, r0, #8
    2708:	e003      	b.n	2712 <execute+0x17a>
				shell->ctx->active_cmd = help_entry;
    270a:	68a5      	ldr	r5, [r4, #8]
    270c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    2710:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    2712:	ae0a      	add	r6, sp, #40	; 0x28
    2714:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2718:	6833      	ldr	r3, [r6, #0]
    271a:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    271c:	4620      	mov	r0, r4
    271e:	f006 f983 	bl	8a28 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    2722:	2501      	movs	r5, #1
    2724:	e01e      	b.n	2764 <execute+0x1cc>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    2726:	2803      	cmp	r0, #3
    2728:	d020      	beq.n	276c <execute+0x1d4>
				++cmd_lvl;
    272a:	9b03      	ldr	r3, [sp, #12]
    272c:	3301      	adds	r3, #1
    272e:	9303      	str	r3, [sp, #12]
				wildcard_found = true;
    2730:	2301      	movs	r3, #1
    2732:	9300      	str	r3, [sp, #0]
	while ((argc != 1) && (cmd_lvl <= CONFIG_SHELL_ARGC_MAX)
    2734:	9b04      	ldr	r3, [sp, #16]
    2736:	2b01      	cmp	r3, #1
    2738:	d0be      	beq.n	26b8 <execute+0x120>
    273a:	9b03      	ldr	r3, [sp, #12]
    273c:	2b0c      	cmp	r3, #12
    273e:	d8bb      	bhi.n	26b8 <execute+0x120>
		&& args_left > 0) {
    2740:	2f00      	cmp	r7, #0
    2742:	d0b9      	beq.n	26b8 <execute+0x120>
		quote = shell_make_argv(&argc, argvp, cmd_buf, 2);
    2744:	2302      	movs	r3, #2
    2746:	9a01      	ldr	r2, [sp, #4]
    2748:	4649      	mov	r1, r9
    274a:	a804      	add	r0, sp, #16
    274c:	f006 fa5d 	bl	8c0a <shell_make_argv>
		cmd_buf = (char *)argvp[1];
    2750:	f8d9 2004 	ldr.w	r2, [r9, #4]
		quote = shell_make_argv(&argc, argvp, cmd_buf, 2);
    2754:	4603      	mov	r3, r0
		cmd_buf = (char *)argvp[1];
    2756:	9201      	str	r2, [sp, #4]
		if (argc == 0) {
    2758:	9a04      	ldr	r2, [sp, #16]
    275a:	2a00      	cmp	r2, #0
    275c:	f47f af7f 	bne.w	265e <execute+0xc6>
			return -ENOEXEC;
    2760:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    2764:	4628      	mov	r0, r5
    2766:	b01d      	add	sp, #116	; 0x74
    2768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (has_last_handler == false) {
    276c:	f1bb 0f00 	cmp.w	fp, #0
    2770:	d106      	bne.n	2780 <execute+0x1e8>
			entry = shell_find_cmd(parent, argvp[0], &dloc);
    2772:	4630      	mov	r0, r6
    2774:	f8d9 1000 	ldr.w	r1, [r9]
    2778:	aa05      	add	r2, sp, #20
    277a:	f006 fb35 	bl	8de8 <shell_find_cmd>
    277e:	4605      	mov	r5, r0
		argvp++;
    2780:	f109 0904 	add.w	r9, r9, #4
		args_left--;
    2784:	3f01      	subs	r7, #1
		if (entry) {
    2786:	2d00      	cmp	r5, #0
    2788:	d033      	beq.n	27f2 <execute+0x25a>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    278a:	9b00      	ldr	r3, [sp, #0]
    278c:	b14b      	cbz	r3, 27a2 <execute+0x20a>
    278e:	68eb      	ldr	r3, [r5, #12]
    2790:	b13b      	cbz	r3, 27a2 <execute+0x20a>
		shell_op_cursor_end_move(shell);
    2792:	4620      	mov	r0, r4
    2794:	f006 fc6e 	bl	9074 <shell_op_cursor_end_move>
		shell_op_cond_next_line(shell);
    2798:	4620      	mov	r0, r4
    279a:	f000 fdc1 	bl	3320 <shell_op_cond_next_line>
		shell_internal_fprintf(shell, SHELL_ERROR,
    279e:	4a30      	ldr	r2, [pc, #192]	; (2860 <execute+0x2c8>)
    27a0:	e773      	b.n	268a <execute+0xf2>
	if (entry->handler) {
    27a2:	68eb      	ldr	r3, [r5, #12]
    27a4:	b1ab      	cbz	r3, 27d2 <execute+0x23a>
		*active_cmd = *entry;
    27a6:	46ac      	mov	ip, r5
    27a8:	68a6      	ldr	r6, [r4, #8]
    27aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    27ae:	3608      	adds	r6, #8
    27b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    27b2:	f8dc 3000 	ldr.w	r3, [ip]
		*handler_lvl = *lvl;
    27b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
		*active_cmd = *entry;
    27ba:	6033      	str	r3, [r6, #0]
		if ((entry->subcmd == NULL)
    27bc:	68ab      	ldr	r3, [r5, #8]
    27be:	b943      	cbnz	r3, 27d2 <execute+0x23a>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    27c0:	7c6b      	ldrb	r3, [r5, #17]
    27c2:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    27c4:	bf01      	itttt	eq
    27c6:	7c2f      	ldrbeq	r7, [r5, #16]
			*lvl = *lvl + 1;
    27c8:	f108 0301 	addeq.w	r3, r8, #1
			*args_left = entry->args.mandatory - 1;
    27cc:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    27d0:	9303      	streq	r3, [sp, #12]
	if (entry->help) {
    27d2:	f8d5 c004 	ldr.w	ip, [r5, #4]
    27d6:	f1bc 0f00 	cmp.w	ip, #0
    27da:	d008      	beq.n	27ee <execute+0x256>
		*help_entry = *entry;
    27dc:	46ae      	mov	lr, r5
    27de:	46e2      	mov	sl, ip
    27e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    27e4:	ae0a      	add	r6, sp, #40	; 0x28
    27e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    27e8:	f8de 3000 	ldr.w	r3, [lr]
    27ec:	6033      	str	r3, [r6, #0]
    27ee:	462e      	mov	r6, r5
    27f0:	e001      	b.n	27f6 <execute+0x25e>
			has_last_handler = true;
    27f2:	f04f 0b01 	mov.w	fp, #1
		if (args_left || (argc == 2)) {
    27f6:	b917      	cbnz	r7, 27fe <execute+0x266>
    27f8:	9b04      	ldr	r3, [sp, #16]
    27fa:	2b02      	cmp	r3, #2
    27fc:	d19a      	bne.n	2734 <execute+0x19c>
			cmd_lvl++;
    27fe:	9b03      	ldr	r3, [sp, #12]
    2800:	3301      	adds	r3, #1
    2802:	9303      	str	r3, [sp, #12]
    2804:	e796      	b.n	2734 <execute+0x19c>
		help_entry.help = NULL;
    2806:	46b2      	mov	sl, r6
	size_t argc = 0, args_left = SIZE_MAX;
    2808:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    280c:	46b0      	mov	r8, r6
		argvp = &argv[0];
    280e:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
    2812:	e717      	b.n	2644 <execute+0xac>
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    2814:	9d03      	ldr	r5, [sp, #12]
	if (shell->ctx->active_cmd.args.mandatory) {
    2816:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    2818:	eba5 0508 	sub.w	r5, r5, r8
	if (shell->ctx->active_cmd.args.mandatory) {
    281c:	b323      	cbz	r3, 2868 <execute+0x2d0>
				UINT16_MAX : opt8;
    281e:	f64f 71ff 	movw	r1, #65535	; 0xffff
		u8_t opt8 = shell->ctx->active_cmd.args.optional;
    2822:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
    2824:	2aff      	cmp	r2, #255	; 0xff
    2826:	bf08      	it	eq
    2828:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    282a:	429d      	cmp	r5, r3
    282c:	d302      	bcc.n	2834 <execute+0x29c>
    282e:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    2830:	429d      	cmp	r5, r3
    2832:	d919      	bls.n	2868 <execute+0x2d0>
		shell_internal_fprintf(shell, SHELL_ERROR,
    2834:	6883      	ldr	r3, [r0, #8]
    2836:	2102      	movs	r1, #2
    2838:	4620      	mov	r0, r4
    283a:	4a0a      	ldr	r2, [pc, #40]	; (2864 <execute+0x2cc>)
    283c:	f006 fcb5 	bl	91aa <shell_internal_fprintf>
			shell_internal_help_print(shell);
    2840:	4620      	mov	r0, r4
    2842:	f006 f8f1 	bl	8a28 <shell_internal_help_print>
		return -EINVAL;
    2846:	f06f 0515 	mvn.w	r5, #21
    284a:	e78b      	b.n	2764 <execute+0x1cc>
    284c:	0000c04f 	.word	0x0000c04f
    2850:	0000c2b8 	.word	0x0000c2b8
    2854:	0000c2cc 	.word	0x0000c2cc
    2858:	0000c2d6 	.word	0x0000c2d6
    285c:	0000c2cf 	.word	0x0000c2cf
    2860:	0000c2f4 	.word	0x0000c2f4
    2864:	0000c323 	.word	0x0000c323
		k_mutex_unlock(&shell->ctx->wr_mtx);
    2868:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    286c:	f006 f8c7 	bl	89fe <k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
    2870:	68a3      	ldr	r3, [r4, #8]
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    2872:	4629      	mov	r1, r5
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
    2874:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    2878:	4620      	mov	r0, r4
    287a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    287e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    2882:	aa0f      	add	r2, sp, #60	; 0x3c
    2884:	eb02 0288 	add.w	r2, r2, r8, lsl #2
    2888:	695b      	ldr	r3, [r3, #20]
    288a:	4798      	blx	r3
    288c:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
    288e:	68a0      	ldr	r0, [r4, #8]
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2894:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    2898:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    289c:	f36f 13c7 	bfc	r3, #7, #1
    28a0:	f820 3c94 	strh.w	r3, [r0, #-148]
    28a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28a8:	f006 f8d1 	bl	8a4e <k_mutex_lock.constprop.0>
    28ac:	e75a      	b.n	2764 <execute+0x1cc>
    28ae:	bf00      	nop

000028b0 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    28b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28b4:	4604      	mov	r4, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    28b6:	6883      	ldr	r3, [r0, #8]
    28b8:	b0ab      	sub	sp, #172	; 0xac
    28ba:	f503 7316 	add.w	r3, r3, #600	; 0x258
    28be:	e8d3 2fef 	ldaex	r2, [r3]
    28c2:	f042 0208 	orr.w	r2, r2, #8
    28c6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    28ca:	2900      	cmp	r1, #0
    28cc:	d1f7      	bne.n	28be <shell_process+0xe>
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
    28ce:	68a3      	ldr	r3, [r4, #8]
    28d0:	791b      	ldrb	r3, [r3, #4]
    28d2:	2b02      	cmp	r3, #2
    28d4:	f040 833d 	bne.w	2f52 <shell_process+0x6a2>
	size_t count = 0;
    28d8:	2300      	movs	r3, #0
    28da:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
    28dc:	6860      	ldr	r0, [r4, #4]
    28de:	2201      	movs	r2, #1
    28e0:	6803      	ldr	r3, [r0, #0]
    28e2:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    28e6:	691d      	ldr	r5, [r3, #16]
    28e8:	ab0b      	add	r3, sp, #44	; 0x2c
    28ea:	47a8      	blx	r5
		if (count == 0) {
    28ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    28ee:	2b00      	cmp	r3, #0
    28f0:	f000 832f 	beq.w	2f52 <shell_process+0x6a2>
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    28f4:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    28f8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    28fc:	2a00      	cmp	r2, #0
    28fe:	dbed      	blt.n	28dc <shell_process+0x2c>
		switch (shell->ctx->receive_state) {
    2900:	68a0      	ldr	r0, [r4, #8]
    2902:	7941      	ldrb	r1, [r0, #5]
    2904:	2901      	cmp	r1, #1
    2906:	f000 829f 	beq.w	2e48 <shell_process+0x598>
    290a:	2902      	cmp	r1, #2
    290c:	f000 82b2 	beq.w	2e74 <shell_process+0x5c4>
    2910:	2900      	cmp	r1, #0
    2912:	f040 831c 	bne.w	2f4e <shell_process+0x69e>
	if ((data != '\r') && (data != '\n')) {
    2916:	2b0d      	cmp	r3, #13
    2918:	d01c      	beq.n	2954 <shell_process+0xa4>
    291a:	2b0a      	cmp	r3, #10
    291c:	d01a      	beq.n	2954 <shell_process+0xa4>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
    291e:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
    2922:	f361 220f 	bfi	r2, r1, #8, #8
    2926:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
			switch (data) {
    292a:	2b09      	cmp	r3, #9
    292c:	d05d      	beq.n	29ea <shell_process+0x13a>
    292e:	d842      	bhi.n	29b6 <shell_process+0x106>
    2930:	2b00      	cmp	r3, #0
    2932:	d0d3      	beq.n	28dc <shell_process+0x2c>
    2934:	2b08      	cmp	r3, #8
    2936:	f000 81ed 	beq.w	2d14 <shell_process+0x464>
    293a:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    293e:	2a5e      	cmp	r2, #94	; 0x5e
    2940:	f200 81f7 	bhi.w	2d32 <shell_process+0x482>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    2944:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
					shell_op_char_insert(shell, data);
    2948:	4619      	mov	r1, r3
    294a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    294e:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
    2952:	e106      	b.n	2b62 <shell_process+0x2b2>
	return shell->ctx->internal.flags.last_nl;
    2954:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
    2958:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    295c:	d005      	beq.n	296a <shell_process+0xba>
    295e:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
    2962:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2966:	4293      	cmp	r3, r2
    2968:	d1df      	bne.n	292a <shell_process+0x7a>
	shell->ctx->internal.flags.last_nl = val;
    296a:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
    296e:	f363 220f 	bfi	r2, r3, #8, #8
    2972:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len) {
    2976:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    2978:	b9ca      	cbnz	r2, 29ae <shell_process+0xfe>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    297a:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    297e:	f362 1386 	bfi	r3, r2, #6, #1
    2982:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
    2986:	68e0      	ldr	r0, [r4, #12]
    2988:	f006 fd2e 	bl	93e8 <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    298c:	49b3      	ldr	r1, [pc, #716]	; (2c5c <shell_process+0x3ac>)
    298e:	6960      	ldr	r0, [r4, #20]
    2990:	f006 f83d 	bl	8a0e <shell_raw_fprintf>
	shell->ctx->state = state;
    2994:	68a3      	ldr	r3, [r4, #8]
    2996:	2202      	movs	r2, #2
    2998:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    299a:	2200      	movs	r2, #0
		cmd_buffer_clear(shell);
    299c:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    299e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    29a2:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    29a4:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
    29a6:	4620      	mov	r0, r4
    29a8:	f000 fdfa 	bl	35a0 <shell_print_prompt_and_cmd>
    29ac:	e796      	b.n	28dc <shell_process+0x2c>
					(void)execute(shell);
    29ae:	4620      	mov	r0, r4
    29b0:	f7ff fdf2 	bl	2598 <execute>
    29b4:	e7ee      	b.n	2994 <shell_process+0xe4>
    29b6:	2b1b      	cmp	r3, #27
    29b8:	d014      	beq.n	29e4 <shell_process+0x134>
    29ba:	2b7f      	cmp	r3, #127	; 0x7f
    29bc:	d1bd      	bne.n	293a <shell_process+0x8a>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    29be:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    29c2:	075f      	lsls	r7, r3, #29
    29c4:	d58a      	bpl.n	28dc <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    29c6:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    29ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    29ce:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
    29d2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
    29d6:	069e      	lsls	r6, r3, #26
    29d8:	f100 81a7 	bmi.w	2d2a <shell_process+0x47a>
		shell_op_char_delete(shell);
    29dc:	4620      	mov	r0, r4
    29de:	f006 fc25 	bl	922c <shell_op_char_delete>
		break;
    29e2:	e77b      	b.n	28dc <shell_process+0x2c>
	shell->ctx->receive_state = state;
    29e4:	2301      	movs	r3, #1
    29e6:	7143      	strb	r3, [r0, #5]
}
    29e8:	e778      	b.n	28dc <shell_process+0x2c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    29ea:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    29ee:	0759      	lsls	r1, r3, #29
    29f0:	f57f af74 	bpl.w	28dc <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    29f4:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    29f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    29fc:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
    2a00:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    2a02:	2bff      	cmp	r3, #255	; 0xff
    2a04:	f43f af6a 	beq.w	28dc <shell_process+0x2c>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    2a08:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    2a0a:	f100 0138 	add.w	r1, r0, #56	; 0x38
    2a0e:	f500 709c 	add.w	r0, r0, #312	; 0x138
    2a12:	f007 f913 	bl	9c3c <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    2a16:	2100      	movs	r1, #0
    2a18:	68a2      	ldr	r2, [r4, #8]
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    2a1a:	a80d      	add	r0, sp, #52	; 0x34
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    2a1c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    2a1e:	4413      	add	r3, r2
    2a20:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    2a24:	f502 729c 	add.w	r2, r2, #312	; 0x138
    2a28:	230c      	movs	r3, #12
    2a2a:	a91d      	add	r1, sp, #116	; 0x74
    2a2c:	f006 f8ed 	bl	8c0a <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
    2a30:	68a0      	ldr	r0, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    2a32:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
    2a34:	4403      	add	r3, r0
    2a36:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    2a3a:	2b20      	cmp	r3, #32
    2a3c:	d061      	beq.n	2b02 <shell_process+0x252>
    2a3e:	3b09      	subs	r3, #9
    2a40:	2b04      	cmp	r3, #4
    2a42:	bf8c      	ite	hi
    2a44:	2300      	movhi	r3, #0
    2a46:	2301      	movls	r3, #1
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    2a48:	990d      	ldr	r1, [sp, #52]	; 0x34
    2a4a:	b119      	cbz	r1, 2a54 <shell_process+0x1a4>
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d15b      	bne.n	2b08 <shell_process+0x258>
    2a50:	2901      	cmp	r1, #1
    2a52:	d158      	bne.n	2b06 <shell_process+0x256>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    2a54:	2300      	movs	r3, #0
		*cmd = shell->ctx->selected_cmd;
    2a56:	69c6      	ldr	r6, [r0, #28]
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    2a58:	930c      	str	r3, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a5c:	aa2a      	add	r2, sp, #168	; 0xa8
    2a5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a62:	f853 ac34 	ldr.w	sl, [r3, #-52]
	*cnt = 0;
    2a66:	2500      	movs	r5, #0
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    2a68:	4650      	mov	r0, sl
    2a6a:	f005 ffca 	bl	8a02 <shell_strlen>
	size_t first = 0;
    2a6e:	46a8      	mov	r8, r5
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    2a70:	4681      	mov	r9, r0
	size_t idx = 0;
    2a72:	462f      	mov	r7, r5
	*longest = 0U;
    2a74:	9504      	str	r5, [sp, #16]
	while ((candidate = shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    2a76:	4639      	mov	r1, r7
    2a78:	4630      	mov	r0, r6
    2a7a:	aa18      	add	r2, sp, #96	; 0x60
    2a7c:	f000 fc02 	bl	3284 <shell_cmd_get>
    2a80:	4683      	mov	fp, r0
    2a82:	2800      	cmp	r0, #0
    2a84:	d14d      	bne.n	2b22 <shell_process+0x272>
	if (cnt == 1) {
    2a86:	2d01      	cmp	r5, #1
    2a88:	d174      	bne.n	2b74 <shell_process+0x2c4>
		autocomplete(shell, cmd, argv[arg_idx], first);
    2a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a8c:	aa2a      	add	r2, sp, #168	; 0xa8
    2a8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    2a92:	f853 0c34 	ldr.w	r0, [r3, #-52]
    2a96:	f005 ffb4 	bl	8a02 <shell_strlen>
	match = shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2a9a:	68a2      	ldr	r2, [r4, #8]
	u16_t arg_len = shell_strlen(arg);
    2a9c:	4605      	mov	r5, r0
	match = shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2a9e:	4641      	mov	r1, r8
    2aa0:	4630      	mov	r0, r6
    2aa2:	3208      	adds	r2, #8
    2aa4:	f000 fbee 	bl	3284 <shell_cmd_get>
    2aa8:	4606      	mov	r6, r0
	cmd_len = shell_strlen(match->syntax);
    2aaa:	6800      	ldr	r0, [r0, #0]
    2aac:	f005 ffa9 	bl	8a02 <shell_strlen>
	if (cmd_len != arg_len) {
    2ab0:	4285      	cmp	r5, r0
    2ab2:	d006      	beq.n	2ac2 <shell_process+0x212>
		shell_op_completion_insert(shell,
    2ab4:	6831      	ldr	r1, [r6, #0]
    2ab6:	1b42      	subs	r2, r0, r5
    2ab8:	b292      	uxth	r2, r2
    2aba:	4620      	mov	r0, r4
    2abc:	4429      	add	r1, r5
    2abe:	f006 fbb3 	bl	9228 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    2ac2:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    2ac4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
    2ac6:	441a      	add	r2, r3
    2ac8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    2acc:	2a20      	cmp	r2, #32
    2ace:	d04c      	beq.n	2b6a <shell_process+0x2ba>
    2ad0:	3a09      	subs	r2, #9
    2ad2:	2a04      	cmp	r2, #4
    2ad4:	d949      	bls.n	2b6a <shell_process+0x2ba>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    2ad6:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
    2ada:	07d2      	lsls	r2, r2, #31
    2adc:	d540      	bpl.n	2b60 <shell_process+0x2b0>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    2ade:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
    2ae2:	2120      	movs	r1, #32
    2ae4:	f36f 0200 	bfc	r2, #0, #1
    2ae8:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    2aec:	4620      	mov	r0, r4
    2aee:	f000 fd25 	bl	353c <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
    2af2:	68a2      	ldr	r2, [r4, #8]
    2af4:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    2af8:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    2afc:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
    2b00:	e6ec      	b.n	28dc <shell_process+0x2c>
    2b02:	2301      	movs	r3, #1
    2b04:	e7a0      	b.n	2a48 <shell_process+0x198>
	search_argc = space ? *argc : *argc - 1;
    2b06:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell->ctx->selected_cmd, search_argc,
    2b08:	2300      	movs	r3, #0
    2b0a:	9301      	str	r3, [sp, #4]
    2b0c:	ab0e      	add	r3, sp, #56	; 0x38
    2b0e:	9300      	str	r3, [sp, #0]
    2b10:	69c0      	ldr	r0, [r0, #28]
    2b12:	ab0c      	add	r3, sp, #48	; 0x30
    2b14:	aa1d      	add	r2, sp, #116	; 0x74
    2b16:	f006 f97e 	bl	8e16 <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    2b1a:	4606      	mov	r6, r0
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d19c      	bne.n	2a5a <shell_process+0x1aa>
    2b20:	e6dc      	b.n	28dc <shell_process+0x2c>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    2b22:	464a      	mov	r2, r9
    2b24:	4651      	mov	r1, sl
    2b26:	f8db 0000 	ldr.w	r0, [fp]
    2b2a:	f007 f851 	bl	9bd0 <strncmp>
    2b2e:	4603      	mov	r3, r0
	return entry->syntax &&
    2b30:	f8db 0000 	ldr.w	r0, [fp]
		(entry->handler == NULL) && (entry->subcmd == NULL);
    2b34:	b128      	cbz	r0, 2b42 <shell_process+0x292>
	return entry->syntax &&
    2b36:	f8db 200c 	ldr.w	r2, [fp, #12]
    2b3a:	b912      	cbnz	r2, 2b42 <shell_process+0x292>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    2b3c:	f8db 2008 	ldr.w	r2, [fp, #8]
    2b40:	b162      	cbz	r2, 2b5c <shell_process+0x2ac>
		if (!is_empty_cmd(candidate) && is_candidate) {
    2b42:	b95b      	cbnz	r3, 2b5c <shell_process+0x2ac>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2b44:	f007 f831 	bl	9baa <strlen>
    2b48:	9b04      	ldr	r3, [sp, #16]
    2b4a:	4283      	cmp	r3, r0
    2b4c:	bf38      	it	cc
    2b4e:	4603      	movcc	r3, r0
    2b50:	b29b      	uxth	r3, r3
				*first_idx = idx;
    2b52:	2d00      	cmp	r5, #0
    2b54:	bf08      	it	eq
    2b56:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2b58:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    2b5a:	3501      	adds	r5, #1
		idx++;
    2b5c:	3701      	adds	r7, #1
    2b5e:	e78a      	b.n	2a76 <shell_process+0x1c6>
			shell_op_char_insert(shell, ' ');
    2b60:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
    2b62:	4620      	mov	r0, r4
    2b64:	f000 fcea 	bl	353c <shell_op_char_insert>
    2b68:	e6b8      	b.n	28dc <shell_process+0x2c>
		shell_op_cursor_move(shell, 1);
    2b6a:	2101      	movs	r1, #1
    2b6c:	4620      	mov	r0, r4
    2b6e:	f006 fa1d 	bl	8fac <shell_op_cursor_move>
    2b72:	e6b3      	b.n	28dc <shell_process+0x2c>
	} else if (cnt > 1) {
    2b74:	f67f aeb2 	bls.w	28dc <shell_process+0x2c>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    2b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b7a:	aa2a      	add	r2, sp, #168	; 0xa8
    2b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b80:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = shell_strlen(str);
    2b84:	4650      	mov	r0, sl
    2b86:	f005 ff3c 	bl	8a02 <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2b8a:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = shell_strlen(str);
    2b8c:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2b8e:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += shell_strlen(tab);
    2b92:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 2c60 <shell_process+0x3b0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2b96:	9505      	str	r5, [sp, #20]
    2b98:	f8cd 800c 	str.w	r8, [sp, #12]
		match = shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    2b9c:	68a2      	ldr	r2, [r4, #8]
    2b9e:	4630      	mov	r0, r6
    2ba0:	9903      	ldr	r1, [sp, #12]
    2ba2:	3208      	adds	r2, #8
    2ba4:	f000 fb6e 	bl	3284 <shell_cmd_get>
		idx++;
    2ba8:	9b03      	ldr	r3, [sp, #12]
		match = shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    2baa:	4607      	mov	r7, r0
	return entry->syntax &&
    2bac:	6800      	ldr	r0, [r0, #0]
		idx++;
    2bae:	3301      	adds	r3, #1
    2bb0:	9303      	str	r3, [sp, #12]
		(entry->handler == NULL) && (entry->subcmd == NULL);
    2bb2:	2800      	cmp	r0, #0
    2bb4:	d156      	bne.n	2c64 <shell_process+0x3b4>
		tab_item_print(shell, match->syntax, longest);
    2bb6:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d162      	bne.n	2c82 <shell_process+0x3d2>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2bbc:	68a2      	ldr	r2, [r4, #8]
    2bbe:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
    2bc0:	9b05      	ldr	r3, [sp, #20]
    2bc2:	3b01      	subs	r3, #1
    2bc4:	9305      	str	r3, [sp, #20]
    2bc6:	d1e9      	bne.n	2b9c <shell_process+0x2ec>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    2bc8:	4924      	ldr	r1, [pc, #144]	; (2c5c <shell_process+0x3ac>)
    2bca:	6960      	ldr	r0, [r4, #20]
    2bcc:	f005 ff1f 	bl	8a0e <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
    2bd0:	4620      	mov	r0, r4
    2bd2:	f000 fce5 	bl	35a0 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    2bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bd8:	aa2a      	add	r2, sp, #168	; 0xa8
    2bda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
    2bde:	f853 0c34 	ldr.w	r0, [r3, #-52]
    2be2:	f005 ff0e 	bl	8a02 <shell_strlen>
	match = shell_cmd_get(cmd, first, &dynamic_entry);
    2be6:	4641      	mov	r1, r8
    2be8:	aa13      	add	r2, sp, #76	; 0x4c
	u16_t arg_len = shell_strlen(arg);
    2bea:	4607      	mov	r7, r0
	match = shell_cmd_get(cmd, first, &dynamic_entry);
    2bec:	4630      	mov	r0, r6
    2bee:	f000 fb49 	bl	3284 <shell_cmd_get>
	size_t idx = first + 1;
    2bf2:	f108 0901 	add.w	r9, r8, #1
	match = shell_cmd_get(cmd, first, &dynamic_entry);
    2bf6:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    2bf8:	68a0      	ldr	r0, [r4, #8]
    2bfa:	f8d8 1000 	ldr.w	r1, [r8]
    2bfe:	22ff      	movs	r2, #255	; 0xff
    2c00:	f500 709c 	add.w	r0, r0, #312	; 0x138
    2c04:	f006 ffb0 	bl	9b68 <strncpy>
	*str = match->syntax;
    2c08:	f8d8 a000 	ldr.w	sl, [r8]
	u16_t common = UINT16_MAX;
    2c0c:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = shell_cmd_get(cmd, idx++, &dynamic_entry2);
    2c10:	4649      	mov	r1, r9
    2c12:	4630      	mov	r0, r6
    2c14:	aa18      	add	r2, sp, #96	; 0x60
    2c16:	f109 0b01 	add.w	fp, r9, #1
    2c1a:	f000 fb33 	bl	3284 <shell_cmd_get>
		if (match2 == NULL) {
    2c1e:	2800      	cmp	r0, #0
    2c20:	d06b      	beq.n	2cfa <shell_process+0x44a>
	size_t common = 0;
    2c22:	2200      	movs	r2, #0
    2c24:	68a3      	ldr	r3, [r4, #8]
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    2c26:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    2c28:	f503 739c 	add.w	r3, r3, #312	; 0x138
    2c2c:	f813 cb01 	ldrb.w	ip, [r3], #1
    2c30:	5c81      	ldrb	r1, [r0, r2]
    2c32:	4561      	cmp	r1, ip
    2c34:	d105      	bne.n	2c42 <shell_process+0x392>
    2c36:	b121      	cbz	r1, 2c42 <shell_process+0x392>
    2c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
		common++;
    2c3c:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    2c3e:	428a      	cmp	r2, r1
    2c40:	d1f4      	bne.n	2c2c <shell_process+0x37c>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    2c42:	b10f      	cbz	r7, 2c48 <shell_process+0x398>
    2c44:	42ba      	cmp	r2, r7
    2c46:	db07      	blt.n	2c58 <shell_process+0x3a8>
			common = (curr_common < common) ? curr_common : common;
    2c48:	4590      	cmp	r8, r2
    2c4a:	bfa8      	it	ge
    2c4c:	4690      	movge	r8, r2
			--cnt;
    2c4e:	3d01      	subs	r5, #1
	while (cnt > 1) {
    2c50:	2d01      	cmp	r5, #1
			common = (curr_common < common) ? curr_common : common;
    2c52:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
    2c56:	d050      	beq.n	2cfa <shell_process+0x44a>
		match2 = shell_cmd_get(cmd, idx++, &dynamic_entry2);
    2c58:	46d9      	mov	r9, fp
    2c5a:	e7d9      	b.n	2c10 <shell_process+0x360>
    2c5c:	0000c04f 	.word	0x0000c04f
    2c60:	0000bbe9 	.word	0x0000bbe9
	return entry->syntax &&
    2c64:	68fb      	ldr	r3, [r7, #12]
    2c66:	b913      	cbnz	r3, 2c6e <shell_process+0x3be>
		(entry->handler == NULL) && (entry->subcmd == NULL);
    2c68:	68bb      	ldr	r3, [r7, #8]
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d096      	beq.n	2b9c <shell_process+0x2ec>
		if (is_empty || (str && match->syntax &&
    2c6e:	f1ba 0f00 	cmp.w	sl, #0
    2c72:	d0a0      	beq.n	2bb6 <shell_process+0x306>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    2c74:	4651      	mov	r1, sl
    2c76:	9a06      	ldr	r2, [sp, #24]
    2c78:	f006 ffaa 	bl	9bd0 <strncmp>
		if (is_empty || (str && match->syntax &&
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d09a      	beq.n	2bb6 <shell_process+0x306>
    2c80:	e78c      	b.n	2b9c <shell_process+0x2ec>
	longest_option += shell_strlen(tab);
    2c82:	4658      	mov	r0, fp
    2c84:	9307      	str	r3, [sp, #28]
    2c86:	f005 febc 	bl	8a02 <shell_strlen>
    2c8a:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    2c8c:	68a1      	ldr	r1, [r4, #8]
	longest_option += shell_strlen(tab);
    2c8e:	18c2      	adds	r2, r0, r3
    2c90:	b292      	uxth	r2, r2
			- shell_strlen(tab)) / longest_option;
    2c92:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    2c94:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += shell_strlen(tab);
    2c96:	9209      	str	r2, [sp, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
    2c98:	f005 feb3 	bl	8a02 <shell_strlen>
	diff = longest_option - shell_strlen(option);
    2c9c:	9b07      	ldr	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
    2c9e:	9008      	str	r0, [sp, #32]
	diff = longest_option - shell_strlen(option);
    2ca0:	4618      	mov	r0, r3
    2ca2:	f005 feae 	bl	8a02 <shell_strlen>
			- shell_strlen(tab)) / longest_option;
    2ca6:	9908      	ldr	r1, [sp, #32]
	diff = longest_option - shell_strlen(option);
    2ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
    2caa:	1a7f      	subs	r7, r7, r1
	diff = longest_option - shell_strlen(option);
    2cac:	eba2 0900 	sub.w	r9, r2, r0
			- shell_strlen(tab)) / longest_option;
    2cb0:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    2cb4:	68a0      	ldr	r0, [r4, #8]
    2cb6:	b292      	uxth	r2, r2
    2cb8:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
    2cbc:	9b07      	ldr	r3, [sp, #28]
    2cbe:	fbbc f1f2 	udiv	r1, ip, r2
    2cc2:	fb02 c211 	mls	r2, r2, r1, ip
    2cc6:	f10c 0e01 	add.w	lr, ip, #1
    2cca:	b292      	uxth	r2, r2
	diff = longest_option - shell_strlen(option);
    2ccc:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    2cd0:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    2cd4:	b95a      	cbnz	r2, 2cee <shell_process+0x43e>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
    2cd6:	9300      	str	r3, [sp, #0]
    2cd8:	2107      	movs	r1, #7
    2cda:	465b      	mov	r3, fp
    2cdc:	4620      	mov	r0, r4
    2cde:	4aa4      	ldr	r2, [pc, #656]	; (2f70 <shell_process+0x6c0>)
    2ce0:	f006 fa63 	bl	91aa <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
    2ce4:	4649      	mov	r1, r9
    2ce6:	4620      	mov	r0, r4
    2ce8:	f000 fb0a 	bl	3300 <shell_op_cursor_horiz_move>
    2cec:	e768      	b.n	2bc0 <shell_process+0x310>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
    2cee:	2107      	movs	r1, #7
    2cf0:	4620      	mov	r0, r4
    2cf2:	4aa0      	ldr	r2, [pc, #640]	; (2f74 <shell_process+0x6c4>)
    2cf4:	f006 fa59 	bl	91aa <shell_internal_fprintf>
    2cf8:	e7f4      	b.n	2ce4 <shell_process+0x434>
	if (common) {
    2cfa:	f1b8 0f00 	cmp.w	r8, #0
    2cfe:	f43f aded 	beq.w	28dc <shell_process+0x2c>
		shell_op_completion_insert(shell, &completion[arg_len],
    2d02:	eba8 0207 	sub.w	r2, r8, r7
    2d06:	4620      	mov	r0, r4
    2d08:	b292      	uxth	r2, r2
    2d0a:	eb0a 0107 	add.w	r1, sl, r7
    2d0e:	f006 fa8b 	bl	9228 <shell_op_completion_insert>
    2d12:	e5e3      	b.n	28dc <shell_process+0x2c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    2d14:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
    2d18:	075b      	lsls	r3, r3, #29
    2d1a:	f57f addf 	bpl.w	28dc <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    2d1e:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    2d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d26:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
    2d2a:	4620      	mov	r0, r4
    2d2c:	f006 fa99 	bl	9262 <shell_op_char_backspace>
    2d30:	e5d4      	b.n	28dc <shell_process+0x2c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    2d32:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
    2d36:	0755      	lsls	r5, r2, #29
    2d38:	f57f add0 	bpl.w	28dc <shell_process+0x2c>
	switch (data) {
    2d3c:	3b01      	subs	r3, #1
    2d3e:	2b16      	cmp	r3, #22
    2d40:	f63f adcc 	bhi.w	28dc <shell_process+0x2c>
    2d44:	a201      	add	r2, pc, #4	; (adr r2, 2d4c <shell_process+0x49c>)
    2d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2d4a:	bf00      	nop
    2d4c:	00002f15 	.word	0x00002f15
    2d50:	00002da9 	.word	0x00002da9
    2d54:	00002db1 	.word	0x00002db1
    2d58:	000029dd 	.word	0x000029dd
    2d5c:	00002f09 	.word	0x00002f09
    2d60:	00002dd7 	.word	0x00002dd7
    2d64:	000028dd 	.word	0x000028dd
    2d68:	000028dd 	.word	0x000028dd
    2d6c:	000028dd 	.word	0x000028dd
    2d70:	000028dd 	.word	0x000028dd
    2d74:	00002ddf 	.word	0x00002ddf
    2d78:	00002de7 	.word	0x00002de7
    2d7c:	000028dd 	.word	0x000028dd
    2d80:	00002dfd 	.word	0x00002dfd
    2d84:	000028dd 	.word	0x000028dd
    2d88:	00002e07 	.word	0x00002e07
    2d8c:	000028dd 	.word	0x000028dd
    2d90:	000028dd 	.word	0x000028dd
    2d94:	000028dd 	.word	0x000028dd
    2d98:	000028dd 	.word	0x000028dd
    2d9c:	00002e0b 	.word	0x00002e0b
    2da0:	000028dd 	.word	0x000028dd
    2da4:	00002e37 	.word	0x00002e37
		shell_op_left_arrow(shell);
    2da8:	4620      	mov	r0, r4
    2daa:	f006 f96a 	bl	9082 <shell_op_left_arrow>
		break;
    2dae:	e595      	b.n	28dc <shell_process+0x2c>
		shell_op_cursor_end_move(shell);
    2db0:	4620      	mov	r0, r4
    2db2:	f006 f95f 	bl	9074 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
    2db6:	4620      	mov	r0, r4
    2db8:	f006 f8e4 	bl	8f84 <shell_cursor_in_empty_line>
    2dbc:	b918      	cbnz	r0, 2dc6 <shell_process+0x516>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    2dbe:	496e      	ldr	r1, [pc, #440]	; (2f78 <shell_process+0x6c8>)
    2dc0:	6960      	ldr	r0, [r4, #20]
    2dc2:	f005 fe24 	bl	8a0e <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
    2dc6:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    2dc8:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    2dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2dd0:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    2dd4:	e5df      	b.n	2996 <shell_process+0xe6>
		shell_op_right_arrow(shell);
    2dd6:	4620      	mov	r0, r4
    2dd8:	f006 f95b 	bl	9092 <shell_op_right_arrow>
		break;
    2ddc:	e57e      	b.n	28dc <shell_process+0x2c>
		shell_op_delete_from_cursor(shell);
    2dde:	4620      	mov	r0, r4
    2de0:	f006 f960 	bl	90a4 <shell_op_delete_from_cursor>
		break;
    2de4:	e57a      	b.n	28dc <shell_process+0x2c>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    2de6:	6960      	ldr	r0, [r4, #20]
    2de8:	4a64      	ldr	r2, [pc, #400]	; (2f7c <shell_process+0x6cc>)
    2dea:	4962      	ldr	r1, [pc, #392]	; (2f74 <shell_process+0x6c4>)
    2dec:	f005 fe0f 	bl	8a0e <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    2df0:	4a63      	ldr	r2, [pc, #396]	; (2f80 <shell_process+0x6d0>)
    2df2:	4960      	ldr	r1, [pc, #384]	; (2f74 <shell_process+0x6c4>)
    2df4:	6960      	ldr	r0, [r4, #20]
    2df6:	f005 fe0a 	bl	8a0e <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
    2dfa:	e5d4      	b.n	29a6 <shell_process+0xf6>
		history_handle(shell, false);
    2dfc:	2100      	movs	r1, #0
		history_handle(shell, true);
    2dfe:	4620      	mov	r0, r4
    2e00:	f7ff fb78 	bl	24f4 <history_handle>
		break;
    2e04:	e56a      	b.n	28dc <shell_process+0x2c>
		history_handle(shell, true);
    2e06:	2101      	movs	r1, #1
    2e08:	e7f9      	b.n	2dfe <shell_process+0x54e>
		shell_op_cursor_home_move(shell);
    2e0a:	4620      	mov	r0, r4
    2e0c:	f006 f92c 	bl	9068 <shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    2e10:	2200      	movs	r2, #0
		cmd_buffer_clear(shell);
    2e12:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    2e14:	4957      	ldr	r1, [pc, #348]	; (2f74 <shell_process+0x6c4>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    2e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    2e1a:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    2e1c:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
    2e1e:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    2e20:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    2e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2e28:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    2e2c:	6960      	ldr	r0, [r4, #20]
    2e2e:	4a55      	ldr	r2, [pc, #340]	; (2f84 <shell_process+0x6d4>)
    2e30:	f005 fded 	bl	8a0e <shell_raw_fprintf>
}
    2e34:	e552      	b.n	28dc <shell_process+0x2c>
		shell_op_word_remove(shell);
    2e36:	4620      	mov	r0, r4
    2e38:	f000 fb02 	bl	3440 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
    2e3c:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
    2e3e:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    2e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2e46:	e659      	b.n	2afc <shell_process+0x24c>
			if (data == '[') {
    2e48:	2b5b      	cmp	r3, #91	; 0x5b
    2e4a:	d101      	bne.n	2e50 <shell_process+0x5a0>
	shell->ctx->receive_state = state;
    2e4c:	2302      	movs	r3, #2
    2e4e:	e5ca      	b.n	29e6 <shell_process+0x136>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    2e50:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
    2e54:	0750      	lsls	r0, r2, #29
    2e56:	d509      	bpl.n	2e6c <shell_process+0x5bc>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    2e58:	2b62      	cmp	r3, #98	; 0x62
    2e5a:	d105      	bne.n	2e68 <shell_process+0x5b8>
		shell_op_cursor_word_move(shell, -1);
    2e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		shell_op_cursor_word_move(shell, 1);
    2e60:	4620      	mov	r0, r4
    2e62:	f006 f8c7 	bl	8ff4 <shell_op_cursor_word_move>
    2e66:	e001      	b.n	2e6c <shell_process+0x5bc>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    2e68:	2b66      	cmp	r3, #102	; 0x66
    2e6a:	d0f9      	beq.n	2e60 <shell_process+0x5b0>
	shell->ctx->receive_state = state;
    2e6c:	2200      	movs	r2, #0
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
    2e6e:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
    2e70:	715a      	strb	r2, [r3, #5]
}
    2e72:	e533      	b.n	28dc <shell_process+0x2c>
	shell->ctx->receive_state = state;
    2e74:	2200      	movs	r2, #0
    2e76:	7142      	strb	r2, [r0, #5]
			if (!flag_echo_get(shell)) {
    2e78:	68a2      	ldr	r2, [r4, #8]
    2e7a:	f8d2 1258 	ldr.w	r1, [r2, #600]	; 0x258
    2e7e:	0749      	lsls	r1, r1, #29
    2e80:	f57f ad2c 	bpl.w	28dc <shell_process+0x2c>
			switch (data) {
    2e84:	3b31      	subs	r3, #49	; 0x31
    2e86:	2b1b      	cmp	r3, #27
    2e88:	f63f ad28 	bhi.w	28dc <shell_process+0x2c>
    2e8c:	a101      	add	r1, pc, #4	; (adr r1, 2e94 <shell_process+0x5e4>)
    2e8e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    2e92:	bf00      	nop
    2e94:	00002f11 	.word	0x00002f11
    2e98:	00002f1d 	.word	0x00002f1d
    2e9c:	00002f3d 	.word	0x00002f3d
    2ea0:	00002f05 	.word	0x00002f05
    2ea4:	000028dd 	.word	0x000028dd
    2ea8:	000028dd 	.word	0x000028dd
    2eac:	000028dd 	.word	0x000028dd
    2eb0:	000028dd 	.word	0x000028dd
    2eb4:	000028dd 	.word	0x000028dd
    2eb8:	000028dd 	.word	0x000028dd
    2ebc:	000028dd 	.word	0x000028dd
    2ec0:	000028dd 	.word	0x000028dd
    2ec4:	000028dd 	.word	0x000028dd
    2ec8:	000028dd 	.word	0x000028dd
    2ecc:	000028dd 	.word	0x000028dd
    2ed0:	000028dd 	.word	0x000028dd
    2ed4:	00002e07 	.word	0x00002e07
    2ed8:	00002dfd 	.word	0x00002dfd
    2edc:	00002dd7 	.word	0x00002dd7
    2ee0:	00002da9 	.word	0x00002da9
    2ee4:	000028dd 	.word	0x000028dd
    2ee8:	00002f09 	.word	0x00002f09
    2eec:	000028dd 	.word	0x000028dd
    2ef0:	00002f15 	.word	0x00002f15
    2ef4:	000028dd 	.word	0x000028dd
    2ef8:	000028dd 	.word	0x000028dd
    2efc:	000028dd 	.word	0x000028dd
    2f00:	00002f21 	.word	0x00002f21
	shell->ctx->receive_state = state;
    2f04:	2303      	movs	r3, #3
    2f06:	7153      	strb	r3, [r2, #5]
		shell_op_cursor_end_move(shell);
    2f08:	4620      	mov	r0, r4
    2f0a:	f006 f8b3 	bl	9074 <shell_op_cursor_end_move>
		break;
    2f0e:	e4e5      	b.n	28dc <shell_process+0x2c>
	shell->ctx->receive_state = state;
    2f10:	2303      	movs	r3, #3
    2f12:	7153      	strb	r3, [r2, #5]
		shell_op_cursor_home_move(shell);
    2f14:	4620      	mov	r0, r4
    2f16:	f006 f8a7 	bl	9068 <shell_op_cursor_home_move>
		break;
    2f1a:	e4df      	b.n	28dc <shell_process+0x2c>
	shell->ctx->receive_state = state;
    2f1c:	2303      	movs	r3, #3
    2f1e:	7153      	strb	r3, [r2, #5]
				bool status = flag_insert_mode_get(shell);
    2f20:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    2f22:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    2f26:	f8b2 1258 	ldrh.w	r1, [r2, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
    2f2a:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
    2f2e:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
    2f32:	f363 0100 	bfi	r1, r3, #0, #1
    2f36:	f8a2 1258 	strh.w	r1, [r2, #600]	; 0x258
}
    2f3a:	e4cf      	b.n	28dc <shell_process+0x2c>
	shell->ctx->receive_state = state;
    2f3c:	2303      	movs	r3, #3
    2f3e:	7153      	strb	r3, [r2, #5]
				if (flag_echo_get(shell)) {
    2f40:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    2f42:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2f46:	075b      	lsls	r3, r3, #29
    2f48:	f57f acc8 	bpl.w	28dc <shell_process+0x2c>
    2f4c:	e546      	b.n	29dc <shell_process+0x12c>
	shell->ctx->receive_state = state;
    2f4e:	2300      	movs	r3, #0
    2f50:	e549      	b.n	29e6 <shell_process+0x136>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2f52:	68a3      	ldr	r3, [r4, #8]
    2f54:	f503 7316 	add.w	r3, r3, #600	; 0x258
    2f58:	e8d3 2fef 	ldaex	r2, [r3]
    2f5c:	f022 0208 	bic.w	r2, r2, #8
    2f60:	e8c3 2fe1 	stlex	r1, r2, [r3]
    2f64:	2900      	cmp	r1, #0
    2f66:	d1f7      	bne.n	2f58 <shell_process+0x6a8>

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
    2f68:	b02b      	add	sp, #172	; 0xac
    2f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f6e:	bf00      	nop
    2f70:	0000c33e 	.word	0x0000c33e
    2f74:	0000c13e 	.word	0x0000c13e
    2f78:	0000c04f 	.word	0x0000c04f
    2f7c:	0000c369 	.word	0x0000c369
    2f80:	0000c36d 	.word	0x0000c36d
    2f84:	0000c365 	.word	0x0000c365

00002f88 <shell_init>:
{
    2f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f8c:	4604      	mov	r4, r0
    2f8e:	b088      	sub	sp, #32
    2f90:	460f      	mov	r7, r1
	memset(shell->ctx, 0, sizeof(*shell->ctx));
    2f92:	f44f 7241 	mov.w	r2, #772	; 0x304
    2f96:	2100      	movs	r1, #0
    2f98:	6880      	ldr	r0, [r0, #8]
{
    2f9a:	461e      	mov	r6, r3
	memset(shell->ctx, 0, sizeof(*shell->ctx));
    2f9c:	f006 fe79 	bl	9c92 <memset>
	shell->ctx->prompt = shell->default_prompt;
    2fa0:	68a3      	ldr	r3, [r4, #8]
    2fa2:	6822      	ldr	r2, [r4, #0]
	shell_history_init(shell->history);
    2fa4:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
    2fa6:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
    2fa8:	f006 fac5 	bl	9536 <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
    2fac:	68a0      	ldr	r0, [r4, #8]
    2fae:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	return z_impl_k_mutex_init(mutex);
    2fb2:	f007 f8c7 	bl	a144 <z_impl_k_mutex_init>
    2fb6:	f44f 7827 	mov.w	r8, #668	; 0x29c
    2fba:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
    2fbe:	68a0      	ldr	r0, [r4, #8]
    2fc0:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&signal, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(signal);
    2fc2:	f007 fb87 	bl	a6d4 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
    2fc6:	68a0      	ldr	r0, [r4, #8]
    2fc8:	2200      	movs	r2, #0
    2fca:	1943      	adds	r3, r0, r5
    2fcc:	2101      	movs	r1, #1
    2fce:	4440      	add	r0, r8
    2fd0:	3510      	adds	r5, #16
    2fd2:	f007 fb62 	bl	a69a <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    2fd6:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
    2fda:	f108 0814 	add.w	r8, r8, #20
    2fde:	d1ee      	bne.n	2fbe <shell_init+0x36>
		shell->stats->log_lost_cnt = 0;
    2fe0:	2200      	movs	r2, #0
    2fe2:	69a3      	ldr	r3, [r4, #24]
    2fe4:	601a      	str	r2, [r3, #0]
	flag_tx_rdy_set(shell, true);
    2fe6:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
    2fe8:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
    2fec:	6810      	ldr	r0, [r2, #0]
    2fee:	f043 0310 	orr.w	r3, r3, #16
    2ff2:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
    2ff6:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    2ffa:	f043 0304 	orr.w	r3, r3, #4
    2ffe:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
    3002:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    3006:	f043 0320 	orr.w	r3, r3, #32
    300a:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
    300e:	2301      	movs	r3, #1
    3010:	7113      	strb	r3, [r2, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei =
    3012:	4b19      	ldr	r3, [pc, #100]	; (3078 <shell_init+0xf0>)
    3014:	6293      	str	r3, [r2, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
    3016:	f005 fcf4 	bl	8a02 <shell_strlen>
    301a:	68a3      	ldr	r3, [r4, #8]
	return shell->iface->api->init(shell->iface, p_config,
    301c:	4639      	mov	r1, r7
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
    301e:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
    3022:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
    3024:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    3028:	f043 0302 	orr.w	r3, r3, #2
    302c:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	return shell->iface->api->init(shell->iface, p_config,
    3030:	6860      	ldr	r0, [r4, #4]
    3032:	4a12      	ldr	r2, [pc, #72]	; (307c <shell_init+0xf4>)
    3034:	6803      	ldr	r3, [r0, #0]
    3036:	681d      	ldr	r5, [r3, #0]
    3038:	4623      	mov	r3, r4
    303a:	47a8      	blx	r5
	if (err != 0) {
    303c:	4605      	mov	r5, r0
    303e:	b9b8      	cbnz	r0, 3070 <shell_init+0xe8>
	k_tid_t tid = k_thread_create(shell->thread,
    3040:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3044:	2200      	movs	r2, #0
    3046:	2300      	movs	r3, #0
    3048:	e9cd 2306 	strd	r2, r3, [sp, #24]
    304c:	230e      	movs	r3, #14
    304e:	9303      	str	r3, [sp, #12]
    3050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3052:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3056:	e9cd 6301 	strd	r6, r3, [sp, #4]
    305a:	9504      	str	r5, [sp, #16]
    305c:	4b08      	ldr	r3, [pc, #32]	; (3080 <shell_init+0xf8>)
    305e:	9400      	str	r4, [sp, #0]
    3060:	f004 f926 	bl	72b0 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    3064:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    3066:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    3068:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
	return z_impl_k_thread_name_set(thread_id, value);
    306c:	f004 f888 	bl	7180 <z_impl_k_thread_name_set>
}
    3070:	4628      	mov	r0, r5
    3072:	b008      	add	sp, #32
    3074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3078:	00500018 	.word	0x00500018
    307c:	00008a3b 	.word	0x00008a3b
    3080:	000030c5 	.word	0x000030c5

00003084 <shell_start>:
{
    3084:	b538      	push	{r3, r4, r5, lr}
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    3086:	6883      	ldr	r3, [r0, #8]
{
    3088:	4605      	mov	r5, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    308a:	791b      	ldrb	r3, [r3, #4]
    308c:	2b01      	cmp	r3, #1
    308e:	d114      	bne.n	30ba <shell_start+0x36>
		shell_vt100_color_set(shell, SHELL_NORMAL);
    3090:	2100      	movs	r1, #0
    3092:	f000 f98b 	bl	33ac <shell_vt100_color_set>
	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    3096:	490a      	ldr	r1, [pc, #40]	; (30c0 <shell_start+0x3c>)
    3098:	6968      	ldr	r0, [r5, #20]
    309a:	f005 fcb8 	bl	8a0e <shell_raw_fprintf>
	shell->ctx->state = state;
    309e:	2202      	movs	r2, #2
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    30a0:	2400      	movs	r4, #0
	shell->ctx->state = state;
    30a2:	68ab      	ldr	r3, [r5, #8]
		shell_print_prompt_and_cmd(shell);
    30a4:	4628      	mov	r0, r5
	shell->ctx->state = state;
    30a6:	711a      	strb	r2, [r3, #4]
		cmd_buffer_clear(shell);
    30a8:	68ab      	ldr	r3, [r5, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    30aa:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
    30ae:	869c      	strh	r4, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
    30b0:	865c      	strh	r4, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
    30b2:	f000 fa75 	bl	35a0 <shell_print_prompt_and_cmd>
	return 0;
    30b6:	4620      	mov	r0, r4
}
    30b8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    30ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
    30be:	e7fb      	b.n	30b8 <shell_start+0x34>
    30c0:	0000c04e 	.word	0x0000c04e

000030c4 <shell_thread>:
{
    30c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c8:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    30ca:	6840      	ldr	r0, [r0, #4]
{
    30cc:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    30ce:	6803      	ldr	r3, [r0, #0]
    30d0:	2100      	movs	r1, #0
    30d2:	689b      	ldr	r3, [r3, #8]
{
    30d4:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    30d6:	4798      	blx	r3
	if (err != 0) {
    30d8:	2800      	cmp	r0, #0
    30da:	d143      	bne.n	3164 <shell_thread+0xa0>
	if (log_backend && IS_ENABLED(CONFIG_SHELL_LOG_BACKEND)) {
    30dc:	b126      	cbz	r6, 30e8 <shell_thread+0x24>
		shell_log_backend_enable(shell->log_backend, (void *)shell,
    30de:	462a      	mov	r2, r5
    30e0:	4621      	mov	r1, r4
    30e2:	69e0      	ldr	r0, [r4, #28]
    30e4:	f006 fae0 	bl	96a8 <shell_log_backend_enable>
	err = shell_start(shell);
    30e8:	4620      	mov	r0, r4
    30ea:	f7ff ffcb 	bl	3084 <shell_start>
	if (err != 0) {
    30ee:	2800      	cmp	r0, #0
    30f0:	d138      	bne.n	3164 <shell_thread+0xa0>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    30f2:	4f1d      	ldr	r7, [pc, #116]	; (3168 <shell_thread+0xa4>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    30f4:	4e1d      	ldr	r6, [pc, #116]	; (316c <shell_thread+0xa8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    30f6:	4d1e      	ldr	r5, [pc, #120]	; (3170 <shell_thread+0xac>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    30f8:	68a0      	ldr	r0, [r4, #8]
    30fa:	f500 7027 	add.w	r0, r0, #668	; 0x29c
	return z_impl_k_poll(events, num_events, timeout);
    30fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3106:	2103      	movs	r1, #3
    3108:	f004 fafa 	bl	7700 <z_impl_k_poll>
		if (err != 0) {
    310c:	4603      	mov	r3, r0
    310e:	b130      	cbz	r0, 311e <shell_thread+0x5a>
			shell_internal_fprintf(shell, SHELL_ERROR,
    3110:	4620      	mov	r0, r4
}
    3112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			shell_internal_fprintf(shell, SHELL_ERROR,
    3116:	2102      	movs	r1, #2
    3118:	4a16      	ldr	r2, [pc, #88]	; (3174 <shell_thread+0xb0>)
    311a:	f006 b846 	b.w	91aa <shell_internal_fprintf>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    311e:	68a0      	ldr	r0, [r4, #8]
    3120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3128:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    312c:	f005 fc8f 	bl	8a4e <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
    3130:	6860      	ldr	r0, [r4, #4]
    3132:	6803      	ldr	r3, [r0, #0]
    3134:	695b      	ldr	r3, [r3, #20]
    3136:	b103      	cbz	r3, 313a <shell_thread+0x76>
			shell->iface->api->update(shell->iface);
    3138:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    313a:	463a      	mov	r2, r7
    313c:	4620      	mov	r0, r4
    313e:	2102      	movs	r1, #2
    3140:	f005 fc2d 	bl	899e <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    3144:	4632      	mov	r2, r6
    3146:	4620      	mov	r0, r4
    3148:	2100      	movs	r1, #0
    314a:	f005 fc28 	bl	899e <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    314e:	4620      	mov	r0, r4
    3150:	462a      	mov	r2, r5
    3152:	2101      	movs	r1, #1
    3154:	f005 fc23 	bl	899e <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    3158:	68a0      	ldr	r0, [r4, #8]
    315a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    315e:	f005 fc4e 	bl	89fe <k_mutex_unlock>
    3162:	e7c9      	b.n	30f8 <shell_thread+0x34>
}
    3164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3168:	000089c9 	.word	0x000089c9
    316c:	000028b1 	.word	0x000028b1
    3170:	00008a53 	.word	0x00008a53
    3174:	0000c344 	.word	0x0000c344

00003178 <shell_hexdump>:

	shell_print(shell, "|");
}

void shell_hexdump(const struct shell *shell, const u8_t *data, size_t len)
{
    3178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    317c:	4682      	mov	sl, r0
    317e:	460f      	mov	r7, r1
    3180:	4615      	mov	r5, r2
	const u8_t *p = data;
    3182:	460e      	mov	r6, r1
	size_t line_len;

	while (len) {
    3184:	b90d      	cbnz	r5, 318a <shell_hexdump+0x12>
		shell_hexdump_line(shell, p - data, p, line_len);

		len -= line_len;
		p += line_len;
	}
}
    3186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		line_len = MIN(len, HEXDUMP_BYTES_IN_LINE);
    318a:	2d10      	cmp	r5, #16
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    318c:	f04f 0100 	mov.w	r1, #0
    3190:	4650      	mov	r0, sl
    3192:	4a2b      	ldr	r2, [pc, #172]	; (3240 <shell_hexdump+0xc8>)
    3194:	eba6 0307 	sub.w	r3, r6, r7
		line_len = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3198:	46a8      	mov	r8, r5
	for (i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    319a:	f04f 0400 	mov.w	r4, #0
		line_len = MIN(len, HEXDUMP_BYTES_IN_LINE);
    319e:	bf28      	it	cs
    31a0:	f04f 0810 	movcs.w	r8, #16
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    31a4:	f005 fca7 	bl	8af6 <shell_fprintf>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    31a8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3254 <shell_hexdump+0xdc>
		if (i < len) {
    31ac:	45a0      	cmp	r8, r4
    31ae:	d933      	bls.n	3218 <shell_hexdump+0xa0>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    31b0:	2100      	movs	r1, #0
    31b2:	4650      	mov	r0, sl
    31b4:	5d33      	ldrb	r3, [r6, r4]
    31b6:	4a23      	ldr	r2, [pc, #140]	; (3244 <shell_hexdump+0xcc>)
    31b8:	f005 fc9d 	bl	8af6 <shell_fprintf>
	for (i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31bc:	3401      	adds	r4, #1
    31be:	2c10      	cmp	r4, #16
    31c0:	d122      	bne.n	3208 <shell_hexdump+0x90>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    31c2:	2100      	movs	r1, #0
    31c4:	4650      	mov	r0, sl
    31c6:	4a20      	ldr	r2, [pc, #128]	; (3248 <shell_hexdump+0xd0>)
    31c8:	f005 fc95 	bl	8af6 <shell_fprintf>
	for (i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31cc:	2400      	movs	r4, #0
			shell_fprintf(shell, SHELL_NORMAL, " ");
    31ce:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3254 <shell_hexdump+0xdc>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    31d2:	f8df b084 	ldr.w	fp, [pc, #132]	; 3258 <shell_hexdump+0xe0>
		if (i < len) {
    31d6:	45a0      	cmp	r8, r4
    31d8:	d92c      	bls.n	3234 <shell_hexdump+0xbc>
			char c = data[i];
    31da:	5d33      	ldrb	r3, [r6, r4]
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    31dc:	2100      	movs	r1, #0
	return (int)((((unsigned)c) >= ' ') &&
    31de:	f1a3 0220 	sub.w	r2, r3, #32
    31e2:	2a5f      	cmp	r2, #95	; 0x5f
    31e4:	bf28      	it	cs
    31e6:	232e      	movcs	r3, #46	; 0x2e
    31e8:	465a      	mov	r2, fp
    31ea:	4650      	mov	r0, sl
    31ec:	f005 fc83 	bl	8af6 <shell_fprintf>
	for (i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31f0:	3401      	adds	r4, #1
    31f2:	2c10      	cmp	r4, #16
    31f4:	d116      	bne.n	3224 <shell_hexdump+0xac>
	shell_print(shell, "|");
    31f6:	2100      	movs	r1, #0
    31f8:	4650      	mov	r0, sl
    31fa:	4a14      	ldr	r2, [pc, #80]	; (324c <shell_hexdump+0xd4>)
    31fc:	f005 fc7b 	bl	8af6 <shell_fprintf>
		len -= line_len;
    3200:	eba5 0508 	sub.w	r5, r5, r8
		p += line_len;
    3204:	4446      	add	r6, r8
    3206:	e7bd      	b.n	3184 <shell_hexdump+0xc>
		if (i > 0 && !(i % 8)) {
    3208:	f014 0107 	ands.w	r1, r4, #7
    320c:	d1ce      	bne.n	31ac <shell_hexdump+0x34>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    320e:	464a      	mov	r2, r9
    3210:	4650      	mov	r0, sl
    3212:	f005 fc70 	bl	8af6 <shell_fprintf>
    3216:	e7c9      	b.n	31ac <shell_hexdump+0x34>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    3218:	2100      	movs	r1, #0
    321a:	4650      	mov	r0, sl
    321c:	4a0c      	ldr	r2, [pc, #48]	; (3250 <shell_hexdump+0xd8>)
    321e:	f005 fc6a 	bl	8af6 <shell_fprintf>
    3222:	e7cb      	b.n	31bc <shell_hexdump+0x44>
		if (i > 0 && !(i % 8)) {
    3224:	f014 0107 	ands.w	r1, r4, #7
    3228:	d1d5      	bne.n	31d6 <shell_hexdump+0x5e>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    322a:	464a      	mov	r2, r9
    322c:	4650      	mov	r0, sl
    322e:	f005 fc62 	bl	8af6 <shell_fprintf>
    3232:	e7d0      	b.n	31d6 <shell_hexdump+0x5e>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3234:	464a      	mov	r2, r9
    3236:	2100      	movs	r1, #0
    3238:	4650      	mov	r0, sl
    323a:	f005 fc5c 	bl	8af6 <shell_fprintf>
    323e:	e7d7      	b.n	31f0 <shell_hexdump+0x78>
    3240:	0000c35b 	.word	0x0000c35b
    3244:	0000bbe2 	.word	0x0000bbe2
    3248:	0000bbec 	.word	0x0000bbec
    324c:	0000c362 	.word	0x0000c362
    3250:	0000bbe8 	.word	0x0000bbe8
    3254:	0000bbea 	.word	0x0000bbea
    3258:	0000c376 	.word	0x0000c376

0000325c <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
    325c:	b510      	push	{r4, lr}
    325e:	4604      	mov	r4, r0
    3260:	4613      	mov	r3, r2
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
    3262:	460a      	mov	r2, r1
    3264:	4601      	mov	r1, r0
    3266:	4806      	ldr	r0, [pc, #24]	; (3280 <shell_fprintf_fmt+0x24>)
    3268:	f001 fdbc 	bl	4de4 <z_prf>
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
    326c:	6923      	ldr	r3, [r4, #16]
    326e:	791b      	ldrb	r3, [r3, #4]
    3270:	b123      	cbz	r3, 327c <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
    3272:	4620      	mov	r0, r4
	}
}
    3274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
    3278:	f005 bc5f 	b.w	8b3a <shell_fprintf_buffer_flush>
}
    327c:	bd10      	pop	{r4, pc}
    327e:	bf00      	nop
    3280:	00008b53 	.word	0x00008b53

00003284 <shell_cmd_get>:

const struct shell_static_entry *shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    3284:	b510      	push	{r4, lr}
    3286:	460b      	mov	r3, r1
    3288:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(dloc != NULL);
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    328a:	b950      	cbnz	r0, 32a2 <shell_cmd_get+0x1e>
	return ((u8_t *)__shell_root_cmds_end -
    328c:	490e      	ldr	r1, [pc, #56]	; (32c8 <shell_cmd_get+0x44>)
    328e:	4a0f      	ldr	r2, [pc, #60]	; (32cc <shell_cmd_get+0x48>)
    3290:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    3292:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    3296:	d20f      	bcs.n	32b8 <shell_cmd_get+0x34>
    3298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    329c:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    329e:	4620      	mov	r0, r4
    32a0:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    32a2:	6881      	ldr	r1, [r0, #8]
    32a4:	b141      	cbz	r1, 32b8 <shell_cmd_get+0x34>
		if (parent->subcmd->is_dynamic) {
    32a6:	684a      	ldr	r2, [r1, #4]
    32a8:	7809      	ldrb	r1, [r1, #0]
    32aa:	b139      	cbz	r1, 32bc <shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    32ac:	4618      	mov	r0, r3
    32ae:	4621      	mov	r1, r4
    32b0:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    32b2:	6823      	ldr	r3, [r4, #0]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d1f2      	bne.n	329e <shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    32b8:	2400      	movs	r4, #0
    32ba:	e7f0      	b.n	329e <shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    32bc:	2014      	movs	r0, #20
    32be:	4343      	muls	r3, r0
    32c0:	18d4      	adds	r4, r2, r3
    32c2:	58d3      	ldr	r3, [r2, r3]
    32c4:	e7f6      	b.n	32b4 <shell_cmd_get+0x30>
    32c6:	bf00      	nop
    32c8:	0000aa14 	.word	0x0000aa14
    32cc:	0000aaa4 	.word	0x0000aaa4

000032d0 <clear_eos.isra.0>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    32d0:	4a01      	ldr	r2, [pc, #4]	; (32d8 <clear_eos.isra.0+0x8>)
    32d2:	4902      	ldr	r1, [pc, #8]	; (32dc <clear_eos.isra.0+0xc>)
    32d4:	f005 be35 	b.w	8f42 <shell_raw_fprintf>
    32d8:	0000c379 	.word	0x0000c379
    32dc:	0000c13e 	.word	0x0000c13e

000032e0 <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    32e0:	b159      	cbz	r1, 32fa <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    32e2:	2900      	cmp	r1, #0
    32e4:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    32e8:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    32ec:	bfcc      	ite	gt
    32ee:	2341      	movgt	r3, #65	; 0x41
    32f0:	2342      	movle	r3, #66	; 0x42
    32f2:	4902      	ldr	r1, [pc, #8]	; (32fc <shell_op_cursor_vert_move+0x1c>)
    32f4:	6940      	ldr	r0, [r0, #20]
    32f6:	f005 be24 	b.w	8f42 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
    32fa:	4770      	bx	lr
    32fc:	0000c372 	.word	0x0000c372

00003300 <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
    3300:	b159      	cbz	r1, 331a <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    3302:	2900      	cmp	r1, #0
    3304:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    3308:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    330c:	bfcc      	ite	gt
    330e:	2343      	movgt	r3, #67	; 0x43
    3310:	2344      	movle	r3, #68	; 0x44
    3312:	4902      	ldr	r1, [pc, #8]	; (331c <shell_op_cursor_horiz_move+0x1c>)
    3314:	6940      	ldr	r0, [r0, #20]
    3316:	f005 be14 	b.w	8f42 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
    331a:	4770      	bx	lr
    331c:	0000c372 	.word	0x0000c372

00003320 <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
    3320:	b510      	push	{r4, lr}
    3322:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    3324:	f005 fe2e 	bl	8f84 <shell_cursor_in_empty_line>
    3328:	b128      	cbz	r0, 3336 <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    332a:	6960      	ldr	r0, [r4, #20]
    332c:	4905      	ldr	r1, [pc, #20]	; (3344 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
    332e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3332:	f005 be06 	b.w	8f42 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    3336:	f104 0008 	add.w	r0, r4, #8
    333a:	f005 fe0f 	bl	8f5c <full_line_cmd.isra.0>
    333e:	2800      	cmp	r0, #0
    3340:	d1f3      	bne.n	332a <shell_op_cond_next_line+0xa>
}
    3342:	bd10      	pop	{r4, pc}
    3344:	0000c04f 	.word	0x0000c04f

00003348 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
    3348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    334c:	4606      	mov	r6, r0
    334e:	f856 4f08 	ldr.w	r4, [r6, #8]!
{
    3352:	4605      	mov	r5, r0
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    3354:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    3356:	f104 0020 	add.w	r0, r4, #32
    335a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    335c:	f005 fc3f 	bl	8bde <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
    3360:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
    3362:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    3366:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    3368:	f005 fdf8 	bl	8f5c <full_line_cmd.isra.0>
    336c:	b118      	cbz	r0, 3376 <shell_op_cursor_position_synchronize+0x2e>
    336e:	490a      	ldr	r1, [pc, #40]	; (3398 <shell_op_cursor_position_synchronize+0x50>)
    3370:	6968      	ldr	r0, [r5, #20]
    3372:	f005 fde6 	bl	8f42 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
    3376:	45b8      	cmp	r8, r7
    3378:	d107      	bne.n	338a <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    337a:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    337c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    337e:	4628      	mov	r0, r5
	}
}
    3380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    3384:	1ac9      	subs	r1, r1, r3
    3386:	f7ff bfbb 	b.w	3300 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    338a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    338c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    338e:	4628      	mov	r0, r5
    3390:	1ac9      	subs	r1, r1, r3
    3392:	f7ff ffa5 	bl	32e0 <shell_op_cursor_vert_move>
    3396:	e7f0      	b.n	337a <shell_op_cursor_position_synchronize+0x32>
    3398:	0000c04f 	.word	0x0000c04f

0000339c <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    339c:	6882      	ldr	r2, [r0, #8]
    339e:	4902      	ldr	r1, [pc, #8]	; (33a8 <shell_print_cmd+0xc>)
    33a0:	6940      	ldr	r0, [r0, #20]
    33a2:	3238      	adds	r2, #56	; 0x38
    33a4:	f005 bdcd 	b.w	8f42 <shell_raw_fprintf>
    33a8:	0000c13e 	.word	0x0000c13e

000033ac <shell_vt100_color_set>:

}

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{
    33ac:	b507      	push	{r0, r1, r2, lr}

	if (shell->ctx->vt100_ctx.col.col == color) {
    33ae:	6883      	ldr	r3, [r0, #8]
    33b0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    33b4:	428a      	cmp	r2, r1
    33b6:	d012      	beq.n	33de <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    33b8:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    33bc:	6940      	ldr	r0, [r0, #20]
    33be:	b189      	cbz	r1, 33e4 <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
    33c0:	4b09      	ldr	r3, [pc, #36]	; (33e8 <shell_vt100_color_set+0x3c>)

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    33c2:	466a      	mov	r2, sp
		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
    33c4:	9300      	str	r3, [sp, #0]
    33c6:	2333      	movs	r3, #51	; 0x33
    33c8:	f88d 3004 	strb.w	r3, [sp, #4]
    33cc:	236d      	movs	r3, #109	; 0x6d
    33ce:	312f      	adds	r1, #47	; 0x2f
    33d0:	f88d 1005 	strb.w	r1, [sp, #5]
    33d4:	f8ad 3006 	strh.w	r3, [sp, #6]
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    33d8:	4904      	ldr	r1, [pc, #16]	; (33ec <shell_vt100_color_set+0x40>)
    33da:	f005 fdb2 	bl	8f42 <shell_raw_fprintf>
	}
}
    33de:	b003      	add	sp, #12
    33e0:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    33e4:	4a02      	ldr	r2, [pc, #8]	; (33f0 <shell_vt100_color_set+0x44>)
    33e6:	e7f7      	b.n	33d8 <shell_vt100_color_set+0x2c>
    33e8:	3b315b1b 	.word	0x3b315b1b
    33ec:	0000c13e 	.word	0x0000c13e
    33f0:	0000c383 	.word	0x0000c383

000033f4 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
    33f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    33f6:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
    33f8:	7809      	ldrb	r1, [r1, #0]
{
    33fa:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
    33fc:	f7ff ffd6 	bl	33ac <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    3400:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    3402:	b1cb      	cbz	r3, 3438 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    3404:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    3406:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    340a:	4299      	cmp	r1, r3
    340c:	d014      	beq.n	3438 <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
    340e:	f645 311b 	movw	r1, #23323	; 0x5b1b
    3412:	f8ad 1000 	strh.w	r1, [sp]
    3416:	2134      	movs	r1, #52	; 0x34
    3418:	f88d 1002 	strb.w	r1, [sp, #2]
    341c:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    3420:	f88d 1003 	strb.w	r1, [sp, #3]
    3424:	216d      	movs	r1, #109	; 0x6d
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    3426:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
    342a:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    342e:	466a      	mov	r2, sp
    3430:	4902      	ldr	r1, [pc, #8]	; (343c <shell_vt100_colors_restore+0x48>)
    3432:	6960      	ldr	r0, [r4, #20]
    3434:	f005 fd85 	bl	8f42 <shell_raw_fprintf>
}
    3438:	b003      	add	sp, #12
    343a:	bd30      	pop	{r4, r5, pc}
    343c:	0000c13e 	.word	0x0000c13e

00003440 <shell_op_word_remove>:
{
    3440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3442:	6883      	ldr	r3, [r0, #8]
{
    3444:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    3446:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    3448:	2a00      	cmp	r2, #0
    344a:	d046      	beq.n	34da <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    344c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
    344e:	2800      	cmp	r0, #0
    3450:	d043      	beq.n	34da <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3452:	3037      	adds	r0, #55	; 0x37
    3454:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    3456:	f103 0638 	add.w	r6, r3, #56	; 0x38
    345a:	4603      	mov	r3, r0
    345c:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    345e:	42b3      	cmp	r3, r6
    3460:	4619      	mov	r1, r3
    3462:	b2a4      	uxth	r4, r4
    3464:	d30d      	bcc.n	3482 <shell_op_word_remove+0x42>
    3466:	f811 7901 	ldrb.w	r7, [r1], #-1
    346a:	2f20      	cmp	r7, #32
    346c:	d033      	beq.n	34d6 <shell_op_word_remove+0x96>
    346e:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    3470:	7808      	ldrb	r0, [r1, #0]
    3472:	3b01      	subs	r3, #1
    3474:	2820      	cmp	r0, #32
    3476:	d004      	beq.n	3482 <shell_op_word_remove+0x42>
		++chars_to_delete;
    3478:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    347a:	429e      	cmp	r6, r3
		--str;
    347c:	4619      	mov	r1, r3
		++chars_to_delete;
    347e:	b2a4      	uxth	r4, r4
	while ((str >= str_start) && (*str != ' ')) {
    3480:	d9f5      	bls.n	346e <shell_op_word_remove+0x2e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    3482:	2700      	movs	r7, #0
	memmove(str + 1, str + 1 + chars_to_delete,
    3484:	1c63      	adds	r3, r4, #1
    3486:	1c4e      	adds	r6, r1, #1
    3488:	1b12      	subs	r2, r2, r4
    348a:	4419      	add	r1, r3
    348c:	4630      	mov	r0, r6
    348e:	f006 fbbe 	bl	9c0e <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    3492:	68a9      	ldr	r1, [r5, #8]
	shell_op_cursor_move(shell, -chars_to_delete);
    3494:	4628      	mov	r0, r5
	shell->ctx->cmd_buff_len -= chars_to_delete;
    3496:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
    3498:	1b12      	subs	r2, r2, r4
    349a:	b292      	uxth	r2, r2
    349c:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    349e:	440a      	add	r2, r1
	shell_op_cursor_move(shell, -chars_to_delete);
    34a0:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    34a2:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
    34a6:	b209      	sxth	r1, r1
    34a8:	f005 fd80 	bl	8fac <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    34ac:	6968      	ldr	r0, [r5, #20]
    34ae:	4a0b      	ldr	r2, [pc, #44]	; (34dc <shell_op_word_remove+0x9c>)
    34b0:	490b      	ldr	r1, [pc, #44]	; (34e0 <shell_op_word_remove+0xa0>)
    34b2:	f005 fd46 	bl	8f42 <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    34b6:	4639      	mov	r1, r7
    34b8:	4633      	mov	r3, r6
    34ba:	4628      	mov	r0, r5
    34bc:	4a08      	ldr	r2, [pc, #32]	; (34e0 <shell_op_word_remove+0xa0>)
    34be:	f005 fe74 	bl	91aa <shell_internal_fprintf>
	clear_eos(shell);
    34c2:	6968      	ldr	r0, [r5, #20]
    34c4:	f7ff ff04 	bl	32d0 <clear_eos.isra.0>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    34c8:	6968      	ldr	r0, [r5, #20]
    34ca:	4a06      	ldr	r2, [pc, #24]	; (34e4 <shell_op_word_remove+0xa4>)
    34cc:	4904      	ldr	r1, [pc, #16]	; (34e0 <shell_op_word_remove+0xa0>)
}
    34ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    34d2:	f005 bd36 	b.w	8f42 <shell_raw_fprintf>
    34d6:	460b      	mov	r3, r1
    34d8:	e7c0      	b.n	345c <shell_op_word_remove+0x1c>
    34da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34dc:	0000c37d 	.word	0x0000c37d
    34e0:	0000c13e 	.word	0x0000c13e
    34e4:	0000c380 	.word	0x0000c380

000034e8 <reprint_from_cursor>:
{
    34e8:	b570      	push	{r4, r5, r6, lr}
    34ea:	4604      	mov	r4, r0
    34ec:	460d      	mov	r5, r1
	if (data_removed) {
    34ee:	4616      	mov	r6, r2
    34f0:	b112      	cbz	r2, 34f8 <reprint_from_cursor+0x10>
		clear_eos(shell);
    34f2:	6940      	ldr	r0, [r0, #20]
    34f4:	f7ff feec 	bl	32d0 <clear_eos.isra.0>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    34f8:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
    34fa:	4620      	mov	r0, r4
    34fc:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    34fe:	2100      	movs	r1, #0
    3500:	3338      	adds	r3, #56	; 0x38
    3502:	4413      	add	r3, r2
    3504:	4a0b      	ldr	r2, [pc, #44]	; (3534 <reprint_from_cursor+0x4c>)
    3506:	f005 fe50 	bl	91aa <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    350a:	4620      	mov	r0, r4
    350c:	f850 3f08 	ldr.w	r3, [r0, #8]!
    3510:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    3512:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
    3514:	f005 fd22 	bl	8f5c <full_line_cmd.isra.0>
    3518:	b128      	cbz	r0, 3526 <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    351a:	b106      	cbz	r6, 351e <reprint_from_cursor+0x36>
    351c:	b11d      	cbz	r5, 3526 <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    351e:	4906      	ldr	r1, [pc, #24]	; (3538 <reprint_from_cursor+0x50>)
    3520:	6960      	ldr	r0, [r4, #20]
    3522:	f005 fd0e 	bl	8f42 <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
    3526:	4269      	negs	r1, r5
    3528:	4620      	mov	r0, r4
}
    352a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
    352e:	b209      	sxth	r1, r1
    3530:	f005 bd3c 	b.w	8fac <shell_op_cursor_move>
    3534:	0000c13e 	.word	0x0000c13e
    3538:	0000c04f 	.word	0x0000c04f

0000353c <shell_op_char_insert>:
{
    353c:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
    353e:	6883      	ldr	r3, [r0, #8]
{
    3540:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
    3544:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
{
    3548:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
    354a:	07d2      	lsls	r2, r2, #31
    354c:	d51d      	bpl.n	358a <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    354e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
    3550:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    3552:	428a      	cmp	r2, r1
    3554:	d019      	beq.n	358a <shell_op_char_insert+0x4e>
		char_replace(shell, data);
    3556:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    355a:	1c48      	adds	r0, r1, #1
    355c:	8698      	strh	r0, [r3, #52]	; 0x34
    355e:	440b      	add	r3, r1
    3560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
    3564:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    3566:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    356a:	075b      	lsls	r3, r3, #29
    356c:	d50b      	bpl.n	3586 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    356e:	6960      	ldr	r0, [r4, #20]
    3570:	4909      	ldr	r1, [pc, #36]	; (3598 <shell_op_char_insert+0x5c>)
    3572:	f005 fce6 	bl	8f42 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
    3576:	4620      	mov	r0, r4
    3578:	f005 fd04 	bl	8f84 <shell_cursor_in_empty_line>
    357c:	b118      	cbz	r0, 3586 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    357e:	4907      	ldr	r1, [pc, #28]	; (359c <shell_op_char_insert+0x60>)
    3580:	6960      	ldr	r0, [r4, #20]
    3582:	f005 fcde 	bl	8f42 <shell_raw_fprintf>
}
    3586:	b002      	add	sp, #8
    3588:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    358a:	2201      	movs	r2, #1
    358c:	4620      	mov	r0, r4
    358e:	f10d 0107 	add.w	r1, sp, #7
    3592:	f005 fe17 	bl	91c4 <data_insert>
}
    3596:	e7f6      	b.n	3586 <shell_op_char_insert+0x4a>
    3598:	0000c376 	.word	0x0000c376
    359c:	0000c04f 	.word	0x0000c04f

000035a0 <shell_print_prompt_and_cmd>:
{
    35a0:	b510      	push	{r4, lr}
    35a2:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    35a4:	6883      	ldr	r3, [r0, #8]
    35a6:	2103      	movs	r1, #3
    35a8:	681b      	ldr	r3, [r3, #0]
    35aa:	4a08      	ldr	r2, [pc, #32]	; (35cc <shell_print_prompt_and_cmd+0x2c>)
    35ac:	f005 fdfd 	bl	91aa <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
    35b0:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    35b2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    35b6:	075b      	lsls	r3, r3, #29
    35b8:	d507      	bpl.n	35ca <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
    35ba:	4620      	mov	r0, r4
    35bc:	f7ff feee 	bl	339c <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
    35c0:	4620      	mov	r0, r4
}
    35c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
    35c6:	f7ff bebf 	b.w	3348 <shell_op_cursor_position_synchronize>
}
    35ca:	bd10      	pop	{r4, pc}
    35cc:	0000c13e 	.word	0x0000c13e

000035d0 <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
    35d0:	b538      	push	{r3, r4, r5, lr}
    35d2:	460c      	mov	r4, r1
    35d4:	4615      	mov	r5, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    35d6:	6842      	ldr	r2, [r0, #4]

	sh_uart->ctrl_blk->dev = (struct device *)config;
    35d8:	6811      	ldr	r1, [r2, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
    35da:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    35dc:	68a3      	ldr	r3, [r4, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
    35de:	e9c1 4500 	strd	r4, r5, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    35e2:	b123      	cbz	r3, 35ee <init+0x1e>
    35e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    35e6:	b113      	cbz	r3, 35ee <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
    35e8:	4620      	mov	r0, r4
    35ea:	4904      	ldr	r1, [pc, #16]	; (35fc <init+0x2c>)
    35ec:	4798      	blx	r3
	if (api->irq_rx_enable) {
    35ee:	68a3      	ldr	r3, [r4, #8]
    35f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35f2:	b10b      	cbz	r3, 35f8 <init+0x28>
		api->irq_rx_enable(dev);
    35f4:	4620      	mov	r0, r4
    35f6:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
    35f8:	2000      	movs	r0, #0
    35fa:	bd38      	pop	{r3, r4, r5, pc}
    35fc:	00003629 	.word	0x00003629

00003600 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
    3600:	b507      	push	{r0, r1, r2, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    3602:	4807      	ldr	r0, [pc, #28]	; (3620 <enable_shell_uart+0x20>)
    3604:	f002 fe66 	bl	62d4 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
    3608:	2304      	movs	r3, #4
    360a:	9300      	str	r3, [sp, #0]
    360c:	2301      	movs	r3, #1
    360e:	4601      	mov	r1, r0
    3610:	461a      	mov	r2, r3
    3612:	4804      	ldr	r0, [pc, #16]	; (3624 <enable_shell_uart+0x24>)
    3614:	f7ff fcb8 	bl	2f88 <shell_init>

	return 0;
}
    3618:	2000      	movs	r0, #0
    361a:	b003      	add	sp, #12
    361c:	f85d fb04 	ldr.w	pc, [sp], #4
    3620:	0000c387 	.word	0x0000c387
    3624:	0000a9e4 	.word	0x0000a9e4

00003628 <uart_callback>:
	struct device *dev = sh_uart->ctrl_blk->dev;
    3628:	6803      	ldr	r3, [r0, #0]
{
    362a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    362e:	4605      	mov	r5, r0
	struct device *dev = sh_uart->ctrl_blk->dev;
    3630:	681f      	ldr	r7, [r3, #0]
	if (api->irq_update) {
    3632:	68bb      	ldr	r3, [r7, #8]
    3634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3636:	b10b      	cbz	r3, 363c <uart_callback+0x14>
		return api->irq_update(dev);
    3638:	4638      	mov	r0, r7
    363a:	4798      	blx	r3
	if (api->irq_rx_ready) {
    363c:	68bb      	ldr	r3, [r7, #8]
    363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3640:	2b00      	cmp	r3, #0
    3642:	d032      	beq.n	36aa <uart_callback+0x82>
		return api->irq_rx_ready(dev);
    3644:	4638      	mov	r0, r7
    3646:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    3648:	2800      	cmp	r0, #0
    364a:	d02e      	beq.n	36aa <uart_callback+0x82>
	bool new_data = false;
    364c:	f04f 0900 	mov.w	r9, #0
    3650:	4e35      	ldr	r6, [pc, #212]	; (3728 <uart_callback+0x100>)
    3652:	4b36      	ldr	r3, [pc, #216]	; (372c <uart_callback+0x104>)
			LOG_WRN("RX ring buffer full.");
    3654:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 3734 <uart_callback+0x10c>
    3658:	1af6      	subs	r6, r6, r3
    365a:	08f6      	lsrs	r6, r6, #3
    365c:	01b6      	lsls	r6, r6, #6
    365e:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    3662:	68e8      	ldr	r0, [r5, #12]
    3664:	a901      	add	r1, sp, #4
    3666:	6902      	ldr	r2, [r0, #16]
    3668:	f004 fdc3 	bl	81f2 <ring_buf_put_claim>
		if (len > 0) {
    366c:	4680      	mov	r8, r0
    366e:	2800      	cmp	r0, #0
    3670:	d03d      	beq.n	36ee <uart_callback+0xc6>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    3672:	682b      	ldr	r3, [r5, #0]
    3674:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
    3676:	6883      	ldr	r3, [r0, #8]
    3678:	699c      	ldr	r4, [r3, #24]
    367a:	b11c      	cbz	r4, 3684 <uart_callback+0x5c>
		return api->fifo_read(dev, rx_data, size);
    367c:	4642      	mov	r2, r8
    367e:	9901      	ldr	r1, [sp, #4]
    3680:	47a0      	blx	r4
    3682:	4604      	mov	r4, r0
				new_data = true;
    3684:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    3686:	4621      	mov	r1, r4
    3688:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
    368a:	bf18      	it	ne
    368c:	f04f 0901 	movne.w	r9, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    3690:	f004 fdca 	bl	8228 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    3694:	b10c      	cbz	r4, 369a <uart_callback+0x72>
    3696:	45a0      	cmp	r8, r4
    3698:	d0e3      	beq.n	3662 <uart_callback+0x3a>
	if (new_data) {
    369a:	f1b9 0f00 	cmp.w	r9, #0
    369e:	d004      	beq.n	36aa <uart_callback+0x82>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    36a0:	682b      	ldr	r3, [r5, #0]
    36a2:	2000      	movs	r0, #0
    36a4:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    36a8:	4790      	blx	r2
	if (api->irq_tx_ready) {
    36aa:	68bb      	ldr	r3, [r7, #8]
    36ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    36ae:	b1db      	cbz	r3, 36e8 <uart_callback+0xc0>
		return api->irq_tx_ready(dev);
    36b0:	4638      	mov	r0, r7
    36b2:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    36b4:	b1c0      	cbz	r0, 36e8 <uart_callback+0xc0>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    36b6:	68a8      	ldr	r0, [r5, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
    36b8:	682b      	ldr	r3, [r5, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    36ba:	6902      	ldr	r2, [r0, #16]
    36bc:	a901      	add	r1, sp, #4
	struct device *dev = sh_uart->ctrl_blk->dev;
    36be:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
    36c0:	f004 fde4 	bl	828c <ring_buf_get_claim>
	if (len) {
    36c4:	4604      	mov	r4, r0
    36c6:	b348      	cbz	r0, 371c <uart_callback+0xf4>
	if (api->fifo_fill) {
    36c8:	68b3      	ldr	r3, [r6, #8]
    36ca:	695b      	ldr	r3, [r3, #20]
    36cc:	b323      	cbz	r3, 3718 <uart_callback+0xf0>
		return api->fifo_fill(dev, tx_data, size);
    36ce:	4602      	mov	r2, r0
    36d0:	9901      	ldr	r1, [sp, #4]
    36d2:	4630      	mov	r0, r6
    36d4:	4798      	blx	r3
    36d6:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    36d8:	68a8      	ldr	r0, [r5, #8]
    36da:	f004 fdf8 	bl	82ce <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    36de:	682b      	ldr	r3, [r5, #0]
    36e0:	2001      	movs	r0, #1
    36e2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    36e6:	4790      	blx	r2
}
    36e8:	b002      	add	sp, #8
    36ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			LOG_WRN("RX ring buffer full.");
    36ee:	f8da 3000 	ldr.w	r3, [sl]
    36f2:	f013 0f06 	tst.w	r3, #6
    36f6:	d003      	beq.n	3700 <uart_callback+0xd8>
    36f8:	4631      	mov	r1, r6
    36fa:	480d      	ldr	r0, [pc, #52]	; (3730 <uart_callback+0x108>)
    36fc:	f004 fe66 	bl	83cc <log_0>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
    3700:	682b      	ldr	r3, [r5, #0]
    3702:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
    3704:	6883      	ldr	r3, [r0, #8]
    3706:	699c      	ldr	r4, [r3, #24]
    3708:	2c00      	cmp	r4, #0
    370a:	d0c6      	beq.n	369a <uart_callback+0x72>
		return api->fifo_read(dev, rx_data, size);
    370c:	2201      	movs	r2, #1
    370e:	f10d 0103 	add.w	r1, sp, #3
    3712:	47a0      	blx	r4
    3714:	4604      	mov	r4, r0
    3716:	e7bd      	b.n	3694 <uart_callback+0x6c>
	return 0;
    3718:	4619      	mov	r1, r3
    371a:	e7dd      	b.n	36d8 <uart_callback+0xb0>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
    371c:	4630      	mov	r0, r6
    371e:	f005 fdb1 	bl	9284 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    3722:	682b      	ldr	r3, [r5, #0]
    3724:	60dc      	str	r4, [r3, #12]
    3726:	e7da      	b.n	36de <uart_callback+0xb6>
    3728:	0000a9bc 	.word	0x0000a9bc
    372c:	0000a974 	.word	0x0000a974
    3730:	0000c38e 	.word	0x0000c38e
    3734:	200001b8 	.word	0x200001b8

00003738 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    3738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    373c:	4604      	mov	r4, r0
    373e:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    3740:	460e      	mov	r6, r1
    3742:	2900      	cmp	r1, #0
    3744:	d06e      	beq.n	3824 <formatted_text_print.constprop.0+0xec>
    3746:	2500      	movs	r5, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    3748:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    374a:	2b20      	cmp	r3, #32
    374c:	d025      	beq.n	379a <formatted_text_print.constprop.0+0x62>
    374e:	3b09      	subs	r3, #9
    3750:	2b04      	cmp	r3, #4
    3752:	d922      	bls.n	379a <formatted_text_print.constprop.0+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
    3754:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 3828 <formatted_text_print.constprop.0+0xf0>
void shell_multiline_data_calc(struct shell_multiline_cons *cons,
				   u16_t buff_pos, u16_t buff_len);

static inline u16_t shell_strlen(const char *str)
{
	return str == NULL ? 0U : (u16_t)strlen(str);
    3758:	4630      	mov	r0, r6
    375a:	f006 fa26 	bl	9baa <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    375e:	68a3      	ldr	r3, [r4, #8]
		length = shell_strlen(str) - offset;
    3760:	b280      	uxth	r0, r0
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    3762:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
    3764:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    3766:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    376a:	4298      	cmp	r0, r3
    376c:	eb06 0a05 	add.w	sl, r6, r5
    3770:	d915      	bls.n	379e <formatted_text_print.constprop.0+0x66>
    3772:	4650      	mov	r0, sl
		size_t idx = 0;
    3774:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    3776:	f810 2b01 	ldrb.w	r2, [r0], #1
    377a:	2a20      	cmp	r2, #32
    377c:	d006      	beq.n	378c <formatted_text_print.constprop.0+0x54>
    377e:	f1a2 0c09 	sub.w	ip, r2, #9
    3782:	f1bc 0f04 	cmp.w	ip, #4
    3786:	d802      	bhi.n	378e <formatted_text_print.constprop.0+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    3788:	2a0a      	cmp	r2, #10
    378a:	d031      	beq.n	37f0 <formatted_text_print.constprop.0+0xb8>
    378c:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
    378e:	eb08 0207 	add.w	r2, r8, r7
    3792:	4291      	cmp	r1, r2
    3794:	d92b      	bls.n	37ee <formatted_text_print.constprop.0+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    3796:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    3798:	e7ed      	b.n	3776 <formatted_text_print.constprop.0+0x3e>
		++offset;
    379a:	3501      	adds	r5, #1
    379c:	e7d4      	b.n	3748 <formatted_text_print.constprop.0+0x10>
    379e:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
    37a0:	2700      	movs	r7, #0
    37a2:	42b8      	cmp	r0, r7
    37a4:	d017      	beq.n	37d6 <formatted_text_print.constprop.0+0x9e>
				if (*(str + offset + idx) == '\n') {
    37a6:	f813 2b01 	ldrb.w	r2, [r3], #1
    37aa:	eb05 0907 	add.w	r9, r5, r7
    37ae:	2a0a      	cmp	r2, #10
    37b0:	d11b      	bne.n	37ea <formatted_text_print.constprop.0+0xb2>

void shell_spaces_trim(char *str);

static inline void transport_buffer_flush(const struct shell *shell)
{
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    37b2:	6960      	ldr	r0, [r4, #20]
    37b4:	f005 f9c1 	bl	8b3a <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
    37b8:	463a      	mov	r2, r7
    37ba:	4651      	mov	r1, sl
    37bc:	4620      	mov	r0, r4
    37be:	f005 fc95 	bl	90ec <shell_write>
    37c2:	4919      	ldr	r1, [pc, #100]	; (3828 <formatted_text_print.constprop.0+0xf0>)
    37c4:	6960      	ldr	r0, [r4, #20]
    37c6:	f005 fda9 	bl	931c <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
    37ca:	4641      	mov	r1, r8
    37cc:	4620      	mov	r0, r4
					offset += idx + 1;
    37ce:	f109 0501 	add.w	r5, r9, #1
					shell_op_cursor_horiz_move(shell,
    37d2:	f7ff fd95 	bl	3300 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    37d6:	6960      	ldr	r0, [r4, #20]
    37d8:	1971      	adds	r1, r6, r5
    37da:	f005 fd9f 	bl	931c <shell_raw_fprintf>
    37de:	6960      	ldr	r0, [r4, #20]
    37e0:	4911      	ldr	r1, [pc, #68]	; (3828 <formatted_text_print.constprop.0+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
    37e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37e6:	f005 bd99 	b.w	931c <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
    37ea:	3701      	adds	r7, #1
    37ec:	e7d9      	b.n	37a2 <formatted_text_print.constprop.0+0x6a>
    37ee:	461f      	mov	r7, r3
    37f0:	6960      	ldr	r0, [r4, #20]
    37f2:	f005 f9a2 	bl	8b3a <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
    37f6:	463a      	mov	r2, r7
    37f8:	4651      	mov	r1, sl
    37fa:	4620      	mov	r0, r4
    37fc:	f005 fc76 	bl	90ec <shell_write>
		offset += length;
    3800:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
    3802:	5d73      	ldrb	r3, [r6, r5]
    3804:	2b20      	cmp	r3, #32
    3806:	d00b      	beq.n	3820 <formatted_text_print.constprop.0+0xe8>
    3808:	3b09      	subs	r3, #9
    380a:	2b04      	cmp	r3, #4
    380c:	d908      	bls.n	3820 <formatted_text_print.constprop.0+0xe8>
    380e:	4649      	mov	r1, r9
    3810:	6960      	ldr	r0, [r4, #20]
    3812:	f005 fd83 	bl	931c <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
    3816:	4641      	mov	r1, r8
    3818:	4620      	mov	r0, r4
    381a:	f7ff fd71 	bl	3300 <shell_op_cursor_horiz_move>
	while (true) {
    381e:	e79b      	b.n	3758 <formatted_text_print.constprop.0+0x20>
			++offset;
    3820:	3501      	adds	r5, #1
    3822:	e7ee      	b.n	3802 <formatted_text_print.constprop.0+0xca>
}
    3824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3828:	0000c04f 	.word	0x0000c04f

0000382c <shell_help_subcmd_print>:
{
	const struct shell_static_entry *entry = NULL;
	const struct shell_static_entry *parent = &shell->ctx->active_cmd;
	struct shell_static_entry dloc;
	u16_t longest = 0U;
	size_t idx = 0;
    382c:	2100      	movs	r1, #0
{
    382e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3832:	4604      	mov	r4, r0
	u16_t longest = 0U;
    3834:	460d      	mov	r5, r1
	const struct shell_static_entry *parent = &shell->ctx->active_cmd;
    3836:	6886      	ldr	r6, [r0, #8]
{
    3838:	b08d      	sub	sp, #52	; 0x34
	const struct shell_static_entry *parent = &shell->ctx->active_cmd;
    383a:	3608      	adds	r6, #8

	/* Searching for the longest subcommand to print. */
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    383c:	4630      	mov	r0, r6
    383e:	aa07      	add	r2, sp, #28
    3840:	f101 0801 	add.w	r8, r1, #1
    3844:	f7ff fd1e 	bl	3284 <shell_cmd_get>
    3848:	4607      	mov	r7, r0
    384a:	b9b0      	cbnz	r0, 387a <shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, shell_strlen(entry->syntax));
	};

	/* No help to print */
	if (longest == 0) {
    384c:	b195      	cbz	r5, 3874 <shell_help_subcmd_print+0x48>
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
    384e:	4601      	mov	r1, r0
    3850:	4a21      	ldr	r2, [pc, #132]	; (38d8 <shell_help_subcmd_print+0xac>)
    3852:	4620      	mov	r0, r4
    3854:	f005 fca9 	bl	91aa <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	idx = 0;
    3858:	4639      	mov	r1, r7
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    385a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 38dc <shell_help_subcmd_print+0xb0>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
    385e:	f8df a080 	ldr.w	sl, [pc, #128]	; 38e0 <shell_help_subcmd_print+0xb4>
    3862:	f8df b080 	ldr.w	fp, [pc, #128]	; 38e4 <shell_help_subcmd_print+0xb8>

	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3866:	1c4b      	adds	r3, r1, #1
    3868:	4630      	mov	r0, r6
    386a:	aa07      	add	r2, sp, #28
    386c:	9304      	str	r3, [sp, #16]
    386e:	f7ff fd09 	bl	3284 <shell_cmd_get>
    3872:	b960      	cbnz	r0, 388e <shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    3874:	b00d      	add	sp, #52	; 0x34
    3876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, shell_strlen(entry->syntax));
    387a:	6838      	ldr	r0, [r7, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
    387c:	b110      	cbz	r0, 3884 <shell_help_subcmd_print+0x58>
    387e:	f006 f994 	bl	9baa <strlen>
    3882:	b280      	uxth	r0, r0
    3884:	4285      	cmp	r5, r0
    3886:	bf38      	it	cc
    3888:	4605      	movcc	r5, r0
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    388a:	4641      	mov	r1, r8
    388c:	e7d6      	b.n	383c <shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    388e:	6803      	ldr	r3, [r0, #0]
    3890:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3894:	4811      	ldr	r0, [pc, #68]	; (38dc <shell_help_subcmd_print+0xb0>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    3896:	9305      	str	r3, [sp, #20]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3898:	f006 f987 	bl	9baa <strlen>
	if (item_name == NULL) {
    389c:	9b05      	ldr	r3, [sp, #20]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    389e:	4607      	mov	r7, r0
	if (item_name == NULL) {
    38a0:	b17b      	cbz	r3, 38c2 <shell_help_subcmd_print+0x96>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
    38a2:	e9cd 3801 	strd	r3, r8, [sp, #4]
    38a6:	4652      	mov	r2, sl
    38a8:	4643      	mov	r3, r8
    38aa:	2100      	movs	r1, #0
    38ac:	4620      	mov	r0, r4
    38ae:	9500      	str	r5, [sp, #0]
    38b0:	f005 fc7b 	bl	91aa <shell_internal_fprintf>
	if (item_help == NULL) {
    38b4:	f1b9 0f00 	cmp.w	r9, #0
    38b8:	d105      	bne.n	38c6 <shell_help_subcmd_print+0x9a>
    38ba:	4659      	mov	r1, fp
    38bc:	6960      	ldr	r0, [r4, #20]
    38be:	f005 fd2d 	bl	931c <shell_raw_fprintf>
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    38c2:	9904      	ldr	r1, [sp, #16]
    38c4:	e7cf      	b.n	3866 <shell_help_subcmd_print+0x3a>
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    38c6:	1c6a      	adds	r2, r5, #1
    38c8:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    38cc:	4649      	mov	r1, r9
    38ce:	4620      	mov	r0, r4
    38d0:	b292      	uxth	r2, r2
    38d2:	f7ff ff31 	bl	3738 <formatted_text_print.constprop.0>
    38d6:	e7f4      	b.n	38c2 <shell_help_subcmd_print+0x96>
    38d8:	0000c3d0 	.word	0x0000c3d0
    38dc:	0000c3ec 	.word	0x0000c3ec
    38e0:	0000c3de 	.word	0x0000c3de
    38e4:	0000c04f 	.word	0x0000c04f

000038e8 <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    38e8:	6883      	ldr	r3, [r0, #8]
{
    38ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    38ec:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    38ee:	6898      	ldr	r0, [r3, #8]
    38f0:	b1c8      	cbz	r0, 3926 <shell_help_cmd_print+0x3e>
    38f2:	f006 f95a 	bl	9baa <strlen>
    38f6:	b284      	uxth	r4, r0
    38f8:	4e0c      	ldr	r6, [pc, #48]	; (392c <shell_help_cmd_print+0x44>)
    38fa:	4630      	mov	r0, r6
    38fc:	f006 f955 	bl	9baa <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    3900:	68ab      	ldr	r3, [r5, #8]
    3902:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    3904:	4404      	add	r4, r0
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    3906:	2100      	movs	r1, #0
    3908:	4628      	mov	r0, r5
    390a:	689b      	ldr	r3, [r3, #8]
    390c:	4a08      	ldr	r2, [pc, #32]	; (3930 <shell_help_cmd_print+0x48>)
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    390e:	b2a4      	uxth	r4, r4
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
    3910:	f005 fc4b 	bl	91aa <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
    3914:	4622      	mov	r2, r4
    3916:	4628      	mov	r0, r5
    3918:	68ab      	ldr	r3, [r5, #8]
    391a:	68d9      	ldr	r1, [r3, #12]
			     field_width, false);
}
    391c:	b002      	add	sp, #8
    391e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    3922:	f7ff bf09 	b.w	3738 <formatted_text_print.constprop.0>
    3926:	4604      	mov	r4, r0
    3928:	e7e6      	b.n	38f8 <shell_help_cmd_print+0x10>
    392a:	bf00      	nop
    392c:	0000c3e8 	.word	0x0000c3e8
    3930:	0000c33f 	.word	0x0000c33f

00003934 <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
    3934:	b538      	push	{r3, r4, r5, lr}
    3936:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3938:	4d06      	ldr	r5, [pc, #24]	; (3954 <cmd_clear+0x20>)
    393a:	4a07      	ldr	r2, [pc, #28]	; (3958 <cmd_clear+0x24>)
    393c:	4629      	mov	r1, r5
    393e:	6940      	ldr	r0, [r0, #20]
    3940:	f005 fd33 	bl	93aa <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3944:	6960      	ldr	r0, [r4, #20]
    3946:	4629      	mov	r1, r5
    3948:	4a04      	ldr	r2, [pc, #16]	; (395c <cmd_clear+0x28>)
    394a:	f005 fd2e 	bl	93aa <shell_raw_fprintf>

	return 0;
}
    394e:	2000      	movs	r0, #0
    3950:	bd38      	pop	{r3, r4, r5, pc}
    3952:	bf00      	nop
    3954:	0000c13e 	.word	0x0000c13e
    3958:	0000c9f2 	.word	0x0000c9f2
    395c:	0000c9f6 	.word	0x0000c9f6

00003960 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    3960:	b510      	push	{r4, lr}
    3962:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3964:	4a04      	ldr	r2, [pc, #16]	; (3978 <cmd_resize_default+0x18>)
    3966:	4905      	ldr	r1, [pc, #20]	; (397c <cmd_resize_default+0x1c>)
    3968:	6940      	ldr	r0, [r0, #20]
    396a:	f005 fd1e 	bl	93aa <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    396e:	68a3      	ldr	r3, [r4, #8]
    3970:	4a03      	ldr	r2, [pc, #12]	; (3980 <cmd_resize_default+0x20>)

	return 0;
}
    3972:	2000      	movs	r0, #0
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    3974:	629a      	str	r2, [r3, #40]	; 0x28
}
    3976:	bd10      	pop	{r4, pc}
    3978:	0000c9fb 	.word	0x0000c9fb
    397c:	0000c13e 	.word	0x0000c13e
    3980:	00500018 	.word	0x00500018

00003984 <cmd_shell_stats_show>:
{
    3984:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
    3986:	6983      	ldr	r3, [r0, #24]
    3988:	2100      	movs	r1, #0
    398a:	681b      	ldr	r3, [r3, #0]
    398c:	4a02      	ldr	r2, [pc, #8]	; (3998 <cmd_shell_stats_show+0x14>)
    398e:	f005 f8b2 	bl	8af6 <shell_fprintf>
}
    3992:	2000      	movs	r0, #0
    3994:	bd08      	pop	{r3, pc}
    3996:	bf00      	nop
    3998:	0000c3ef 	.word	0x0000c3ef

0000399c <cmd_help>:
{
    399c:	b510      	push	{r4, lr}
    399e:	4604      	mov	r4, r0
	shell_print(shell,
    39a0:	2100      	movs	r1, #0
    39a2:	4a05      	ldr	r2, [pc, #20]	; (39b8 <cmd_help+0x1c>)
    39a4:	f005 f8a7 	bl	8af6 <shell_fprintf>
	shell_print(shell,
    39a8:	4620      	mov	r0, r4
    39aa:	2100      	movs	r1, #0
    39ac:	4a03      	ldr	r2, [pc, #12]	; (39bc <cmd_help+0x20>)
    39ae:	f005 f8a2 	bl	8af6 <shell_fprintf>
}
    39b2:	2000      	movs	r0, #0
    39b4:	bd10      	pop	{r4, pc}
    39b6:	bf00      	nop
    39b8:	0000c3fe 	.word	0x0000c3fe
    39bc:	0000c4ed 	.word	0x0000c4ed

000039c0 <cmd_history>:
{
    39c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39c2:	4604      	mov	r4, r0
	size_t i = 0;
    39c4:	2500      	movs	r5, #0
			shell_print(shell, "[%3d] %s",
    39c6:	4f0f      	ldr	r7, [pc, #60]	; (3a04 <cmd_history+0x44>)
{
    39c8:	b085      	sub	sp, #20
				  shell->ctx->temp_buff, &len);
    39ca:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
    39cc:	f10d 030e 	add.w	r3, sp, #14
    39d0:	2101      	movs	r1, #1
    39d2:	68e0      	ldr	r0, [r4, #12]
    39d4:	f502 729c 	add.w	r2, r2, #312	; 0x138
    39d8:	f005 fd09 	bl	93ee <shell_history_get>
		if (len) {
    39dc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    39e0:	68a3      	ldr	r3, [r4, #8]
    39e2:	b158      	cbz	r0, 39fc <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
    39e4:	f503 739c 	add.w	r3, r3, #312	; 0x138
    39e8:	9300      	str	r3, [sp, #0]
    39ea:	463a      	mov	r2, r7
    39ec:	462b      	mov	r3, r5
    39ee:	2100      	movs	r1, #0
    39f0:	4620      	mov	r0, r4
    39f2:	1c6e      	adds	r6, r5, #1
    39f4:	f005 f87f 	bl	8af6 <shell_fprintf>
    39f8:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
    39fa:	e7e6      	b.n	39ca <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
    39fc:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
    3a00:	b005      	add	sp, #20
    3a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a04:	0000b8b3 	.word	0x0000b8b3

00003a08 <cmd_echo>:
	if (argc == 2) {
    3a08:	2902      	cmp	r1, #2
{
    3a0a:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    3a0c:	d10c      	bne.n	3a28 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
    3a0e:	6853      	ldr	r3, [r2, #4]
    3a10:	9301      	str	r3, [sp, #4]
    3a12:	4b0d      	ldr	r3, [pc, #52]	; (3a48 <cmd_echo+0x40>)
    3a14:	9300      	str	r3, [sp, #0]
    3a16:	6813      	ldr	r3, [r2, #0]
    3a18:	4a0c      	ldr	r2, [pc, #48]	; (3a4c <cmd_echo+0x44>)
    3a1a:	f005 f86c 	bl	8af6 <shell_fprintf>
    3a1e:	f06f 0015 	mvn.w	r0, #21
}
    3a22:	b003      	add	sp, #12
    3a24:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
    3a28:	6883      	ldr	r3, [r0, #8]
    3a2a:	4a09      	ldr	r2, [pc, #36]	; (3a50 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    3a2c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3a30:	2100      	movs	r1, #0
    3a32:	f013 0f04 	tst.w	r3, #4
    3a36:	4b07      	ldr	r3, [pc, #28]	; (3a54 <cmd_echo+0x4c>)
    3a38:	bf18      	it	ne
    3a3a:	4613      	movne	r3, r2
    3a3c:	4a06      	ldr	r2, [pc, #24]	; (3a58 <cmd_echo+0x50>)
    3a3e:	f005 f85a 	bl	8af6 <shell_fprintf>
	return 0;
    3a42:	2000      	movs	r0, #0
    3a44:	e7ed      	b.n	3a22 <cmd_echo+0x1a>
    3a46:	bf00      	nop
    3a48:	0000c5be 	.word	0x0000c5be
    3a4c:	0000c5b5 	.word	0x0000c5b5
    3a50:	0000b718 	.word	0x0000b718
    3a54:	0000b4a9 	.word	0x0000b4a9
    3a58:	0000c5d3 	.word	0x0000c5d3

00003a5c <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    3a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    3a5e:	2901      	cmp	r1, #1
{
    3a60:	4605      	mov	r5, r0
    3a62:	b085      	sub	sp, #20
	if (argc != 1) {
    3a64:	d00d      	beq.n	3a82 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    3a66:	6853      	ldr	r3, [r2, #4]
    3a68:	2102      	movs	r1, #2
    3a6a:	9301      	str	r3, [sp, #4]
    3a6c:	4b52      	ldr	r3, [pc, #328]	; (3bb8 <cmd_resize+0x15c>)
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    3a6e:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "%s:%s%s", argv[0],
    3a72:	9300      	str	r3, [sp, #0]
    3a74:	6813      	ldr	r3, [r2, #0]
    3a76:	4a51      	ldr	r2, [pc, #324]	; (3bbc <cmd_resize+0x160>)
    3a78:	f005 f83d 	bl	8af6 <shell_fprintf>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    3a7c:	4620      	mov	r0, r4
    3a7e:	b005      	add	sp, #20
    3a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char c = 0;
    3a82:	2400      	movs	r4, #0
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    3a84:	4a4e      	ldr	r2, [pc, #312]	; (3bc0 <cmd_resize+0x164>)
    3a86:	494f      	ldr	r1, [pc, #316]	; (3bc4 <cmd_resize+0x168>)
    3a88:	6940      	ldr	r0, [r0, #20]
    3a8a:	f005 fc8e 	bl	93aa <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    3a8e:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    3a92:	4628      	mov	r0, r5
    3a94:	f7ff fc24 	bl	32e0 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    3a98:	21fa      	movs	r1, #250	; 0xfa
    3a9a:	4628      	mov	r0, r5
    3a9c:	f7ff fc30 	bl	3300 <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3aa0:	68a8      	ldr	r0, [r5, #8]
    3aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
    3aa6:	4621      	mov	r1, r4
    3aa8:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
    3aac:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3ab0:	f006 f8ef 	bl	9c92 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    3ab4:	4944      	ldr	r1, [pc, #272]	; (3bc8 <cmd_resize+0x16c>)
    3ab6:	6968      	ldr	r0, [r5, #20]
    3ab8:	f005 fc77 	bl	93aa <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3abc:	6968      	ldr	r0, [r5, #20]
    3abe:	f005 f83c 	bl	8b3a <shell_fprintf_buffer_flush>
    3ac2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    3ac6:	6868      	ldr	r0, [r5, #4]
    3ac8:	2201      	movs	r2, #1
    3aca:	6803      	ldr	r3, [r0, #0]
    3acc:	f10d 010b 	add.w	r1, sp, #11
    3ad0:	691f      	ldr	r7, [r3, #16]
    3ad2:	ab03      	add	r3, sp, #12
    3ad4:	47b8      	blx	r7
			if (cnt == 0) {
    3ad6:	9b03      	ldr	r3, [sp, #12]
    3ad8:	b953      	cbnz	r3, 3af0 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
    3ada:	3e01      	subs	r6, #1
    3adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3ae0:	b2b6      	uxth	r6, r6
    3ae2:	f006 fc59 	bl	a398 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
    3ae6:	2e00      	cmp	r6, #0
    3ae8:	d1ed      	bne.n	3ac6 <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
    3aea:	f06f 0422 	mvn.w	r4, #34	; 0x22
    3aee:	e031      	b.n	3b54 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3af0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3af4:	68aa      	ldr	r2, [r5, #8]
    3af6:	2b1b      	cmp	r3, #27
    3af8:	d053      	beq.n	3ba2 <cmd_resize+0x146>
    3afa:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
    3afe:	291b      	cmp	r1, #27
    3b00:	d1e1      	bne.n	3ac6 <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
    3b02:	2b52      	cmp	r3, #82	; 0x52
    3b04:	d14d      	bne.n	3ba2 <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
    3b06:	2300      	movs	r3, #0
    3b08:	4414      	add	r4, r2
    3b0a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
    3b0e:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    3b12:	295b      	cmp	r1, #91	; 0x5b
    3b14:	d14d      	bne.n	3bb2 <cmd_resize+0x156>
	*y = 0U;
    3b16:	461f      	mov	r7, r3
				buff_idx = 2U;
    3b18:	2602      	movs	r6, #2
    3b1a:	f502 709d 	add.w	r0, r2, #314	; 0x13a
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    3b1e:	f810 1b01 	ldrb.w	r1, [r0], #1
    3b22:	3601      	adds	r6, #1
    3b24:	293b      	cmp	r1, #59	; 0x3b
    3b26:	b2b6      	uxth	r6, r6
    3b28:	d126      	bne.n	3b78 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    3b2a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    3b2e:	d0dc      	beq.n	3aea <cmd_resize+0x8e>
	*x = 0U;
    3b30:	2300      	movs	r3, #0
    3b32:	f506 709c 	add.w	r0, r6, #312	; 0x138
    3b36:	4410      	add	r0, r2
				while (shell->ctx->temp_buff[buff_idx]
    3b38:	f810 4b01 	ldrb.w	r4, [r0], #1
    3b3c:	bb34      	cbnz	r4, 3b8c <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3b3e:	2bfa      	cmp	r3, #250	; 0xfa
    3b40:	bf28      	it	cs
    3b42:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3b44:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3b46:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3b48:	463b      	mov	r3, r7
    3b4a:	bf28      	it	cs
    3b4c:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    3b4e:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3b52:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    3b54:	4a1d      	ldr	r2, [pc, #116]	; (3bcc <cmd_resize+0x170>)
    3b56:	491b      	ldr	r1, [pc, #108]	; (3bc4 <cmd_resize+0x168>)
    3b58:	6968      	ldr	r0, [r5, #20]
    3b5a:	f005 fc26 	bl	93aa <shell_raw_fprintf>
	if (err != 0) {
    3b5e:	2c00      	cmp	r4, #0
    3b60:	d08c      	beq.n	3a7c <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    3b62:	68ab      	ldr	r3, [r5, #8]
    3b64:	4a1a      	ldr	r2, [pc, #104]	; (3bd0 <cmd_resize+0x174>)
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    3b66:	2104      	movs	r1, #4
		shell->ctx->vt100_ctx.cons.terminal_hei =
    3b68:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    3b6a:	4628      	mov	r0, r5
    3b6c:	4a19      	ldr	r2, [pc, #100]	; (3bd4 <cmd_resize+0x178>)
    3b6e:	f004 ffc2 	bl	8af6 <shell_fprintf>
    3b72:	f06f 0407 	mvn.w	r4, #7
    3b76:	e781      	b.n	3a7c <cmd_resize+0x20>
					*y = *y * 10U +
    3b78:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    3b7c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    3b80:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    3b82:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    3b86:	b29f      	uxth	r7, r3
					if (buff_idx >=
    3b88:	d1c9      	bne.n	3b1e <cmd_resize+0xc2>
    3b8a:	e7ae      	b.n	3aea <cmd_resize+0x8e>
					*x = *x * 10U +
    3b8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    3b90:	3601      	adds	r6, #1
					*x = *x * 10U +
    3b92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    3b96:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    3b98:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
    3b9a:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    3b9c:	b2a3      	uxth	r3, r4
					if (buff_idx >=
    3b9e:	d9cb      	bls.n	3b38 <cmd_resize+0xdc>
    3ba0:	e7a3      	b.n	3aea <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
    3ba2:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3ba4:	3401      	adds	r4, #1
    3ba6:	b2a4      	uxth	r4, r4
    3ba8:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
    3baa:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3bae:	d98a      	bls.n	3ac6 <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
    3bb0:	2300      	movs	r3, #0
    3bb2:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
    3bb6:	e798      	b.n	3aea <cmd_resize+0x8e>
    3bb8:	0000c5be 	.word	0x0000c5be
    3bbc:	0000c5b5 	.word	0x0000c5b5
    3bc0:	0000c9ec 	.word	0x0000c9ec
    3bc4:	0000c13e 	.word	0x0000c13e
    3bc8:	0000ca01 	.word	0x0000ca01
    3bcc:	0000c9ef 	.word	0x0000c9ef
    3bd0:	00500018 	.word	0x00500018
    3bd4:	0000c5e4 	.word	0x0000c5e4

00003bd8 <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    3bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bdc:	4607      	mov	r7, r0
    3bde:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    3be0:	4689      	mov	r9, r1
{
    3be2:	b089      	sub	sp, #36	; 0x24
	if (cmd == NULL) {
    3be4:	b921      	cbnz	r1, 3bf0 <shell_wildcard_process+0x18>
		return ret_val;
    3be6:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    3be8:	4620      	mov	r0, r4
    3bea:	b009      	add	sp, #36	; 0x24
    3bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
    3bf0:	4610      	mov	r0, r2
    3bf2:	f005 fde0 	bl	97b6 <shell_wildcard_character_exist>
    3bf6:	2800      	cmp	r0, #0
    3bf8:	d0f5      	beq.n	3be6 <shell_wildcard_process+0xe>
	size_t cnt = 0;
    3bfa:	f04f 0800 	mov.w	r8, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3bfe:	2402      	movs	r4, #2
	size_t cmd_idx = 0;
    3c00:	4641      	mov	r1, r8
    3c02:	e024      	b.n	3c4e <shell_wildcard_process+0x76>
	return str == NULL ? 0U : (u16_t)strlen(str);
    3c04:	465c      	mov	r4, fp
    3c06:	e03c      	b.n	3c82 <shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    3c08:	4629      	mov	r1, r5
    3c0a:	f50a 709c 	add.w	r0, sl, #312	; 0x138
    3c0e:	f005 ff81 	bl	9b14 <strstr>
	if (!completion_addr) {
    3c12:	4606      	mov	r6, r0
    3c14:	2800      	cmp	r0, #0
    3c16:	d04e      	beq.n	3cb6 <shell_wildcard_process+0xde>
    3c18:	f005 ffc7 	bl	9baa <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    3c1c:	b282      	uxth	r2, r0
    3c1e:	1c60      	adds	r0, r4, #1
    3c20:	4631      	mov	r1, r6
    3c22:	3201      	adds	r2, #1
    3c24:	4430      	add	r0, r6
    3c26:	f005 fff2 	bl	9c0e <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    3c2a:	4622      	mov	r2, r4
    3c2c:	4659      	mov	r1, fp
    3c2e:	4630      	mov	r0, r6
    3c30:	f006 f804 	bl	9c3c <memcpy>
	completion_addr[cmd_len] = ' ';
    3c34:	f04f 0320 	mov.w	r3, #32
    3c38:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    3c3a:	f8ba 0036 	ldrh.w	r0, [sl, #54]	; 0x36
			cnt++;
    3c3e:	f108 0801 	add.w	r8, r8, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
    3c42:	4404      	add	r4, r0
    3c44:	3401      	adds	r4, #1
    3c46:	f8aa 4036 	strh.w	r4, [sl, #54]	; 0x36
			ret_val = command_add(shell->ctx->temp_buff,
    3c4a:	2400      	movs	r4, #0
    3c4c:	9901      	ldr	r1, [sp, #4]
	while ((entry = shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    3c4e:	1c4b      	adds	r3, r1, #1
    3c50:	4648      	mov	r0, r9
    3c52:	aa03      	add	r2, sp, #12
    3c54:	9301      	str	r3, [sp, #4]
    3c56:	f7ff fb15 	bl	3284 <shell_cmd_get>
    3c5a:	4606      	mov	r6, r0
    3c5c:	b1f8      	cbz	r0, 3c9e <shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    3c5e:	2200      	movs	r2, #0
    3c60:	4628      	mov	r0, r5
    3c62:	6831      	ldr	r1, [r6, #0]
    3c64:	f004 f9c6 	bl	7ff4 <fnmatch>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d1ef      	bne.n	3c4c <shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    3c6c:	f8d6 b000 	ldr.w	fp, [r6]
    3c70:	f8d7 a008 	ldr.w	sl, [r7, #8]
    3c74:	f1bb 0f00 	cmp.w	fp, #0
    3c78:	d0c4      	beq.n	3c04 <shell_wildcard_process+0x2c>
    3c7a:	4658      	mov	r0, fp
    3c7c:	f005 ff95 	bl	9baa <strlen>
    3c80:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    3c82:	f8ba 2036 	ldrh.w	r2, [sl, #54]	; 0x36
    3c86:	3201      	adds	r2, #1
    3c88:	4422      	add	r2, r4
    3c8a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3c8e:	ddbb      	ble.n	3c08 <shell_wildcard_process+0x30>
				shell_internal_fprintf(shell,
    3c90:	462b      	mov	r3, r5
    3c92:	2104      	movs	r1, #4
    3c94:	4638      	mov	r0, r7
    3c96:	4a09      	ldr	r2, [pc, #36]	; (3cbc <shell_wildcard_process+0xe4>)
    3c98:	f005 fa87 	bl	91aa <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    3c9c:	2401      	movs	r4, #1
	if (cnt > 0) {
    3c9e:	f1b8 0f00 	cmp.w	r8, #0
    3ca2:	d0a1      	beq.n	3be8 <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
    3ca4:	68b8      	ldr	r0, [r7, #8]
    3ca6:	462a      	mov	r2, r5
    3ca8:	f100 0136 	add.w	r1, r0, #54	; 0x36
    3cac:	f500 709c 	add.w	r0, r0, #312	; 0x138
    3cb0:	f005 f873 	bl	8d9a <shell_pattern_remove>
	return ret_val;
    3cb4:	e798      	b.n	3be8 <shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3cb6:	2402      	movs	r4, #2
    3cb8:	e7f1      	b.n	3c9e <shell_wildcard_process+0xc6>
    3cba:	bf00      	nop
    3cbc:	0000ca06 	.word	0x0000ca06

00003cc0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    3cc0:	b510      	push	{r4, lr}
    3cc2:	4807      	ldr	r0, [pc, #28]	; (3ce0 <uart_console_init+0x20>)
    3cc4:	f002 fb06 	bl	62d4 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    3cc8:	4c06      	ldr	r4, [pc, #24]	; (3ce4 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3cca:	4b07      	ldr	r3, [pc, #28]	; (3ce8 <uart_console_init+0x28>)
    3ccc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    3cce:	4620      	mov	r0, r4
    3cd0:	f001 fd78 	bl	57c4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3cd4:	4620      	mov	r0, r4
    3cd6:	f7fc ffbb 	bl	c50 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    3cda:	2000      	movs	r0, #0
    3cdc:	bd10      	pop	{r4, pc}
    3cde:	bf00      	nop
    3ce0:	0000c387 	.word	0x0000c387
    3ce4:	00003ced 	.word	0x00003ced
    3ce8:	200007e0 	.word	0x200007e0

00003cec <console_out>:
	if ('\n' == c) {
    3cec:	280a      	cmp	r0, #10
{
    3cee:	b538      	push	{r3, r4, r5, lr}
    3cf0:	4604      	mov	r4, r0
    3cf2:	4d07      	ldr	r5, [pc, #28]	; (3d10 <console_out+0x24>)
	if ('\n' == c) {
    3cf4:	d104      	bne.n	3d00 <console_out+0x14>
    3cf6:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    3cf8:	6883      	ldr	r3, [r0, #8]
    3cfa:	210d      	movs	r1, #13
    3cfc:	685b      	ldr	r3, [r3, #4]
    3cfe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3d00:	6828      	ldr	r0, [r5, #0]
    3d02:	6883      	ldr	r3, [r0, #8]
    3d04:	b2e1      	uxtb	r1, r4
    3d06:	685b      	ldr	r3, [r3, #4]
    3d08:	4798      	blx	r3
}
    3d0a:	4620      	mov	r0, r4
    3d0c:	bd38      	pop	{r3, r4, r5, pc}
    3d0e:	bf00      	nop
    3d10:	200007e0 	.word	0x200007e0

00003d14 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    3d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    3d16:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    3d18:	4e11      	ldr	r6, [pc, #68]	; (3d60 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
    3d1a:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    3d1c:	68f3      	ldr	r3, [r6, #12]
	sub_data->started = true;
    3d1e:	fb04 3400 	mla	r4, r4, r0, r3
    3d22:	2301      	movs	r3, #1
    3d24:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    3d26:	f04f 0320 	mov.w	r3, #32
    3d2a:	f3ef 8111 	mrs	r1, BASEPRI
    3d2e:	f383 8811 	msr	BASEPRI, r3
    3d32:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    3d36:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3d38:	b12b      	cbz	r3, 3d46 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3d3a:	6860      	ldr	r0, [r4, #4]
    3d3c:	681a      	ldr	r2, [r3, #0]
    3d3e:	4283      	cmp	r3, r0
	list->head = node;
    3d40:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3d42:	bf08      	it	eq
    3d44:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    3d46:	f381 8811 	msr	BASEPRI, r1
    3d4a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    3d4e:	b903      	cbnz	r3, 3d52 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    3d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    3d52:	4629      	mov	r1, r5
    3d54:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    3d58:	4630      	mov	r0, r6
    3d5a:	47b8      	blx	r7
    3d5c:	e7e3      	b.n	3d26 <clkstarted_handle.constprop.0+0x12>
    3d5e:	bf00      	nop
    3d60:	20000134 	.word	0x20000134

00003d64 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    3d64:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3d66:	4b11      	ldr	r3, [pc, #68]	; (3dac <nrf_power_clock_isr+0x48>)
    3d68:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    3d6a:	b16a      	cbz	r2, 3d88 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
    3d6c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3d70:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    3d74:	07d1      	lsls	r1, r2, #31
    3d76:	d507      	bpl.n	3d88 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d78:	2200      	movs	r2, #0
    3d7a:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3d7c:	4b0c      	ldr	r3, [pc, #48]	; (3db0 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    3d7e:	68db      	ldr	r3, [r3, #12]
    3d80:	7a58      	ldrb	r0, [r3, #9]
    3d82:	b908      	cbnz	r0, 3d88 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3d84:	f7ff ffc6 	bl	3d14 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3d88:	4b0a      	ldr	r3, [pc, #40]	; (3db4 <nrf_power_clock_isr+0x50>)
    3d8a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    3d8c:	b162      	cbz	r2, 3da8 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
    3d8e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3d92:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    3d96:	0792      	lsls	r2, r2, #30
    3d98:	d506      	bpl.n	3da8 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d9a:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3d9c:	2001      	movs	r0, #1
    3d9e:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    3da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3da4:	f7ff bfb6 	b.w	3d14 <clkstarted_handle.constprop.0>
}
    3da8:	bd08      	pop	{r3, pc}
    3daa:	bf00      	nop
    3dac:	50005100 	.word	0x50005100
    3db0:	20000134 	.word	0x20000134
    3db4:	50005104 	.word	0x50005104

00003db8 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    3db8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3dba:	4b08      	ldr	r3, [pc, #32]	; (3ddc <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3dbc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3dc0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3dc4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    3dc8:	4290      	cmp	r0, r2
    3dca:	d100      	bne.n	3dce <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    3dcc:	4770      	bx	lr
    3dce:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    3dd2:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3dd4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3dd8:	e7f2      	b.n	3dc0 <handle_next_tick_case+0x8>
    3dda:	bf00      	nop
    3ddc:	50015000 	.word	0x50015000

00003de0 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3de0:	2200      	movs	r2, #0
    3de2:	4b06      	ldr	r3, [pc, #24]	; (3dfc <rtc1_nrf_isr+0x1c>)
    3de4:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    3de6:	4a06      	ldr	r2, [pc, #24]	; (3e00 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
    3de8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    3dec:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3dee:	1ac0      	subs	r0, r0, r3
    3df0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3df4:	4403      	add	r3, r0
    3df6:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    3df8:	f003 bba0 	b.w	753c <z_clock_announce>
    3dfc:	50015140 	.word	0x50015140
    3e00:	200007fc 	.word	0x200007fc

00003e04 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    3e04:	b538      	push	{r3, r4, r5, lr}
    3e06:	4814      	ldr	r0, [pc, #80]	; (3e58 <z_clock_driver_init+0x54>)
    3e08:	f002 fa64 	bl	62d4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    3e0c:	b300      	cbz	r0, 3e50 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    3e0e:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    3e10:	2400      	movs	r4, #0
    3e12:	2101      	movs	r1, #1
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3e1c:	4d0f      	ldr	r5, [pc, #60]	; (3e5c <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e1e:	4b10      	ldr	r3, [pc, #64]	; (3e60 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    3e20:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e24:	601c      	str	r4, [r3, #0]
    3e26:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    3e28:	2101      	movs	r1, #1
    3e2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    3e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3e32:	4622      	mov	r2, r4
    3e34:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3e38:	2015      	movs	r0, #21
    3e3a:	f000 f9ab 	bl	4194 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    3e3e:	2015      	movs	r0, #21
    3e40:	f000 f998 	bl	4174 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3e44:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    3e46:	4620      	mov	r0, r4
    3e48:	4a07      	ldr	r2, [pc, #28]	; (3e68 <z_clock_driver_init+0x64>)
    3e4a:	6013      	str	r3, [r2, #0]
    3e4c:	602b      	str	r3, [r5, #0]
}
    3e4e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    3e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e54:	e7fb      	b.n	3e4e <z_clock_driver_init+0x4a>
    3e56:	bf00      	nop
    3e58:	0000ca58 	.word	0x0000ca58
    3e5c:	50015000 	.word	0x50015000
    3e60:	50015140 	.word	0x50015140
    3e64:	e000e100 	.word	0xe000e100
    3e68:	50015008 	.word	0x50015008

00003e6c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    3e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    3e6e:	4b2c      	ldr	r3, [pc, #176]	; (3f20 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3e70:	4c2c      	ldr	r4, [pc, #176]	; (3f24 <z_clock_set_timeout+0xb8>)
    3e72:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    3e76:	4b2c      	ldr	r3, [pc, #176]	; (3f28 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3e78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3e7c:	bf08      	it	eq
    3e7e:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
    3e80:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    3e82:	1a52      	subs	r2, r2, r1
    3e84:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    3e88:	0212      	lsls	r2, r2, #8
    3e8a:	d436      	bmi.n	3efa <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    3e8c:	3801      	subs	r0, #1
    3e8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3e92:	42a0      	cmp	r0, r4
    3e94:	bfa8      	it	ge
    3e96:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3e98:	3301      	adds	r3, #1
    3e9a:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    3e9c:	42a0      	cmp	r0, r4
    3e9e:	bf94      	ite	ls
    3ea0:	180c      	addls	r4, r1, r0
    3ea2:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    3ea4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ea8:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    3eaa:	4b1d      	ldr	r3, [pc, #116]	; (3f20 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3eac:	4e1f      	ldr	r6, [pc, #124]	; (3f2c <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
    3eae:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
    3eb2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
    3eb6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3eba:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
    3ebe:	1a52      	subs	r2, r2, r1
    3ec0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    3ec4:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ec6:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
    3ec8:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3ecc:	461d      	mov	r5, r3
    3ece:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    3ed2:	d103      	bne.n	3edc <z_clock_set_timeout+0x70>
    3ed4:	200f      	movs	r0, #15
    3ed6:	f006 fa5f 	bl	a398 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3eda:	6037      	str	r7, [r6, #0]
    3edc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3ee0:	4b13      	ldr	r3, [pc, #76]	; (3f30 <z_clock_set_timeout+0xc4>)
    3ee2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    3ee6:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3eea:	1a23      	subs	r3, r4, r0
    3eec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    3ef0:	2b01      	cmp	r3, #1
    3ef2:	d104      	bne.n	3efe <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
    3ef4:	f7ff ff60 	bl	3db8 <handle_next_tick_case>
    3ef8:	e00b      	b.n	3f12 <z_clock_set_timeout+0xa6>
		ticks = 0;
    3efa:	2000      	movs	r0, #0
    3efc:	e7cc      	b.n	3e98 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3efe:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3f02:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    3f06:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3f0a:	1a24      	subs	r4, r4, r0
    3f0c:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
    3f0e:	0223      	lsls	r3, r4, #8
    3f10:	d4f0      	bmi.n	3ef4 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    3f12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3f16:	4b02      	ldr	r3, [pc, #8]	; (3f20 <z_clock_set_timeout+0xb4>)
    3f18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    3f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f1e:	bf00      	nop
    3f20:	50015000 	.word	0x50015000
    3f24:	007fffff 	.word	0x007fffff
    3f28:	200007fc 	.word	0x200007fc
    3f2c:	50015140 	.word	0x50015140
    3f30:	e000e100 	.word	0xe000e100

00003f34 <z_clock_elapsed>:
	__asm__ volatile(
    3f34:	f04f 0220 	mov.w	r2, #32
    3f38:	f3ef 8311 	mrs	r3, BASEPRI
    3f3c:	f382 8811 	msr	BASEPRI, r2
    3f40:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    3f44:	4a06      	ldr	r2, [pc, #24]	; (3f60 <z_clock_elapsed+0x2c>)
    3f46:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    3f4a:	4a06      	ldr	r2, [pc, #24]	; (3f64 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    3f4c:	6812      	ldr	r2, [r2, #0]
    3f4e:	1a80      	subs	r0, r0, r2
    3f50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    3f54:	f383 8811 	msr	BASEPRI, r3
    3f58:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    3f5c:	4770      	bx	lr
    3f5e:	bf00      	nop
    3f60:	50015000 	.word	0x50015000
    3f64:	200007fc 	.word	0x200007fc

00003f68 <z_timer_cycle_get_32>:
	__asm__ volatile(
    3f68:	f04f 0320 	mov.w	r3, #32
    3f6c:	f3ef 8211 	mrs	r2, BASEPRI
    3f70:	f383 8811 	msr	BASEPRI, r3
    3f74:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    3f78:	4906      	ldr	r1, [pc, #24]	; (3f94 <z_timer_cycle_get_32+0x2c>)
    3f7a:	4b07      	ldr	r3, [pc, #28]	; (3f98 <z_timer_cycle_get_32+0x30>)
    3f7c:	6808      	ldr	r0, [r1, #0]
    3f7e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    3f82:	f382 8811 	msr	BASEPRI, r2
    3f86:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    3f8a:	1a1b      	subs	r3, r3, r0
    3f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    3f90:	4418      	add	r0, r3
    3f92:	4770      	bx	lr
    3f94:	200007fc 	.word	0x200007fc
    3f98:	50015000 	.word	0x50015000

00003f9c <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
    3f9c:	4801      	ldr	r0, [pc, #4]	; (3fa4 <nrf_cc310_platform_abort_init+0x8>)
    3f9e:	f003 bc7b 	b.w	7898 <nrf_cc310_platform_set_abort>
    3fa2:	bf00      	nop
    3fa4:	0000b29c 	.word	0x0000b29c

00003fa8 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
    3fa8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3faa:	b130      	cbz	r0, 3fba <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    3fac:	6843      	ldr	r3, [r0, #4]
    3fae:	b13b      	cbz	r3, 3fc0 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    3fb0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3fb2:	f002 fcc3 	bl	693c <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
    3fb6:	2000      	movs	r0, #0
}
    3fb8:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    3fba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3fbe:	e7fb      	b.n	3fb8 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3fc0:	4800      	ldr	r0, [pc, #0]	; (3fc4 <mutex_unlock+0x1c>)
    3fc2:	e7f9      	b.n	3fb8 <mutex_unlock+0x10>
    3fc4:	ffff8fea 	.word	0xffff8fea

00003fc8 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    3fc8:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    3fca:	4604      	mov	r4, r0
    3fcc:	b918      	cbnz	r0, 3fd6 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    3fce:	4b0b      	ldr	r3, [pc, #44]	; (3ffc <mutex_free+0x34>)
    3fd0:	480b      	ldr	r0, [pc, #44]	; (4000 <mutex_free+0x38>)
    3fd2:	685b      	ldr	r3, [r3, #4]
    3fd4:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    3fd6:	6865      	ldr	r5, [r4, #4]
    3fd8:	b155      	cbz	r5, 3ff0 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    3fda:	f015 0502 	ands.w	r5, r5, #2
    3fde:	6820      	ldr	r0, [r4, #0]
    3fe0:	d107      	bne.n	3ff2 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    3fe2:	4601      	mov	r1, r0
    3fe4:	4807      	ldr	r0, [pc, #28]	; (4004 <mutex_free+0x3c>)
    3fe6:	f002 fb53 	bl	6690 <k_mem_slab_free>
        mutex->mutex = NULL;
    3fea:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    3fec:	2300      	movs	r3, #0
    3fee:	6063      	str	r3, [r4, #4]
}
    3ff0:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3ff2:	2214      	movs	r2, #20
    3ff4:	2100      	movs	r1, #0
    3ff6:	f005 fe4c 	bl	9c92 <memset>
    3ffa:	e7f7      	b.n	3fec <mutex_free+0x24>
    3ffc:	200000f4 	.word	0x200000f4
    4000:	0000ca82 	.word	0x0000ca82
    4004:	20000800 	.word	0x20000800

00004008 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    4008:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    400a:	4604      	mov	r4, r0
    400c:	b918      	cbnz	r0, 4016 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    400e:	4b14      	ldr	r3, [pc, #80]	; (4060 <mutex_init+0x58>)
    4010:	4814      	ldr	r0, [pc, #80]	; (4064 <mutex_init+0x5c>)
    4012:	685b      	ldr	r3, [r3, #4]
    4014:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    4016:	6863      	ldr	r3, [r4, #4]
    4018:	b9cb      	cbnz	r3, 404e <mutex_init+0x46>
    401a:	6823      	ldr	r3, [r4, #0]
    401c:	b9bb      	cbnz	r3, 404e <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    401e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4026:	4621      	mov	r1, r4
    4028:	480f      	ldr	r0, [pc, #60]	; (4068 <mutex_init+0x60>)
    402a:	f002 faff 	bl	662c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    402e:	b908      	cbnz	r0, 4034 <mutex_init+0x2c>
    4030:	6823      	ldr	r3, [r4, #0]
    4032:	b91b      	cbnz	r3, 403c <mutex_init+0x34>
            platform_abort_apis.abort_fn(
    4034:	4b0a      	ldr	r3, [pc, #40]	; (4060 <mutex_init+0x58>)
    4036:	480d      	ldr	r0, [pc, #52]	; (406c <mutex_init+0x64>)
    4038:	685b      	ldr	r3, [r3, #4]
    403a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    403c:	2214      	movs	r2, #20
    403e:	2100      	movs	r1, #0
    4040:	6820      	ldr	r0, [r4, #0]
    4042:	f005 fe26 	bl	9c92 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4046:	6863      	ldr	r3, [r4, #4]
    4048:	f043 0302 	orr.w	r3, r3, #2
    404c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    404e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4050:	f006 f878 	bl	a144 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    4054:	6863      	ldr	r3, [r4, #4]
    4056:	f043 0301 	orr.w	r3, r3, #1
    405a:	6063      	str	r3, [r4, #4]
}
    405c:	bd10      	pop	{r4, pc}
    405e:	bf00      	nop
    4060:	200000f4 	.word	0x200000f4
    4064:	0000ca82 	.word	0x0000ca82
    4068:	20000800 	.word	0x20000800
    406c:	0000caa8 	.word	0x0000caa8

00004070 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
    4070:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    4072:	b168      	cbz	r0, 4090 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    4074:	6843      	ldr	r3, [r0, #4]
    4076:	b173      	cbz	r3, 4096 <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    4078:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    407a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    407e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4082:	f002 fbe3 	bl	684c <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    4086:	4b05      	ldr	r3, [pc, #20]	; (409c <mutex_lock+0x2c>)
    if (ret == 0) {
    4088:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    408a:	bf18      	it	ne
    408c:	4618      	movne	r0, r3
}
    408e:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    4090:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4094:	e7fb      	b.n	408e <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4096:	4802      	ldr	r0, [pc, #8]	; (40a0 <mutex_lock+0x30>)
    4098:	e7f9      	b.n	408e <mutex_lock+0x1e>
    409a:	bf00      	nop
    409c:	ffff8fe9 	.word	0xffff8fe9
    40a0:	ffff8fea 	.word	0xffff8fea

000040a4 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    40a4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    40a6:	4906      	ldr	r1, [pc, #24]	; (40c0 <nrf_cc310_platform_mutex_init+0x1c>)
    40a8:	2340      	movs	r3, #64	; 0x40
    40aa:	2214      	movs	r2, #20
    40ac:	4805      	ldr	r0, [pc, #20]	; (40c4 <nrf_cc310_platform_mutex_init+0x20>)
    40ae:	f006 f814 	bl	a0da <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    40b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    40b6:	4904      	ldr	r1, [pc, #16]	; (40c8 <nrf_cc310_platform_mutex_init+0x24>)
    40b8:	4804      	ldr	r0, [pc, #16]	; (40cc <nrf_cc310_platform_mutex_init+0x28>)
    40ba:	f003 bc25 	b.w	7908 <nrf_cc310_platform_set_mutexes>
    40be:	bf00      	nop
    40c0:	2000081c 	.word	0x2000081c
    40c4:	20000800 	.word	0x20000800
    40c8:	0000b2b4 	.word	0x0000b2b4
    40cc:	0000b2a4 	.word	0x0000b2a4

000040d0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    40d0:	4a0a      	ldr	r2, [pc, #40]	; (40fc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    40d2:	490b      	ldr	r1, [pc, #44]	; (4100 <arch_swap+0x30>)
	_current->arch.basepri = key;
    40d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    40d6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    40d8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	_current->arch.swap_return_value = _k_neg_eagain;
    40dc:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    40e0:	4908      	ldr	r1, [pc, #32]	; (4104 <arch_swap+0x34>)
    40e2:	684b      	ldr	r3, [r1, #4]
    40e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    40e8:	604b      	str	r3, [r1, #4]
    40ea:	2300      	movs	r3, #0
    40ec:	f383 8811 	msr	BASEPRI, r3
    40f0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    40f4:	6893      	ldr	r3, [r2, #8]
}
    40f6:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    40fa:	4770      	bx	lr
    40fc:	20000ea0 	.word	0x20000ea0
    4100:	0000b398 	.word	0x0000b398
    4104:	e000ed00 	.word	0xe000ed00

00004108 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4108:	4910      	ldr	r1, [pc, #64]	; (414c <z_arm_pendsv+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
    410a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    410c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4110:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4112:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4116:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    411a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    411c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4120:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4124:	4f0a      	ldr	r7, [pc, #40]	; (4150 <z_arm_pendsv+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4126:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    412a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    412c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    412e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4130:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
    movs r3, #0
    4134:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4136:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    413a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    413e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4142:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4146:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    414a:	4770      	bx	lr
    ldr r1, =_kernel
    414c:	20000ea0 	.word	0x20000ea0
    ldr v4, =_SCS_ICSR
    4150:	e000ed04 	.word	0xe000ed04

00004154 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4154:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4158:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    415a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    415e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4162:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4164:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4168:	2902      	cmp	r1, #2
    beq _oops
    416a:	d0ff      	beq.n	416c <_oops>

0000416c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    416c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    416e:	f005 fc26 	bl	99be <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4172:	bd01      	pop	{r0, pc}

00004174 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4174:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4176:	2b00      	cmp	r3, #0
    4178:	db08      	blt.n	418c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    417a:	2201      	movs	r2, #1
    417c:	f000 001f 	and.w	r0, r0, #31
    4180:	fa02 f000 	lsl.w	r0, r2, r0
    4184:	4a02      	ldr	r2, [pc, #8]	; (4190 <arch_irq_enable+0x1c>)
    4186:	095b      	lsrs	r3, r3, #5
    4188:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    418c:	4770      	bx	lr
    418e:	bf00      	nop
    4190:	e000e100 	.word	0xe000e100

00004194 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4194:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4196:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    4198:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    419c:	bfac      	ite	ge
    419e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41a2:	4b06      	ldrlt	r3, [pc, #24]	; (41bc <z_arm_irq_priority_set+0x28>)
    41a4:	ea4f 1141 	mov.w	r1, r1, lsl #5
    41a8:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41aa:	bfab      	itete	ge
    41ac:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41b0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41b4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41b8:	5419      	strblt	r1, [r3, r0]
}
    41ba:	4770      	bx	lr
    41bc:	e000ed14 	.word	0xe000ed14

000041c0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    41c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41c4:	460e      	mov	r6, r1
    41c6:	4605      	mov	r5, r0
    41c8:	4617      	mov	r7, r2
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    41ca:	188c      	adds	r4, r1, r2
	ARG_UNUSED(stack);
	ARG_UNUSED(stack_size);
	ARG_UNUSED(thread);
#endif
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
    41cc:	4630      	mov	r0, r6
    41ce:	21aa      	movs	r1, #170	; 0xaa
{
    41d0:	4698      	mov	r8, r3
    41d2:	f005 fd5e 	bl	9c92 <memset>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    41d6:	4b0d      	ldr	r3, [pc, #52]	; (420c <arch_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    41d8:	f1a4 0220 	sub.w	r2, r4, #32
    41dc:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    41e0:	f023 0301 	bic.w	r3, r3, #1
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    41e4:	e9c5 6725 	strd	r6, r7, [r5, #148]	; 0x94
    41e8:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    41ea:	9b06      	ldr	r3, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    41ec:	f8c2 8000 	str.w	r8, [r2]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    41f0:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    41f2:	9b07      	ldr	r3, [sp, #28]
    41f4:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    41f6:	9b08      	ldr	r3, [sp, #32]
    41f8:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    41fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    41fe:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    4200:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    4202:	652a      	str	r2, [r5, #80]	; 0x50
	thread->arch.basepri = 0;
    4204:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    420c:	0000805b 	.word	0x0000805b

00004210 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    4210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4212:	460c      	mov	r4, r1
    4214:	4617      	mov	r7, r2
    4216:	4606      	mov	r6, r0
    4218:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    421a:	f000 fc23 	bl	4a64 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    421e:	4b09      	ldr	r3, [pc, #36]	; (4244 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    4220:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    4222:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    4226:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4228:	4628      	mov	r0, r5
    422a:	f384 8809 	msr	PSP, r4
    422e:	2100      	movs	r1, #0
    4230:	b663      	cpsie	if
    4232:	f381 8811 	msr	BASEPRI, r1
    4236:	f3bf 8f6f 	isb	sy
    423a:	2200      	movs	r2, #0
    423c:	2300      	movs	r3, #0
    423e:	f003 ff0c 	bl	805a <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4242:	bf00      	nop
    4244:	20000ea0 	.word	0x20000ea0

00004248 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4248:	4901      	ldr	r1, [pc, #4]	; (4250 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    424a:	2210      	movs	r2, #16
	str	r2, [r1]
    424c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    424e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4250:	e000ed10 	.word	0xe000ed10

00004254 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4254:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4256:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4258:	f380 8811 	msr	BASEPRI, r0
	isb
    425c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4260:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4264:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4266:	b662      	cpsie	i
	isb
    4268:	f3bf 8f6f 	isb	sy

	bx	lr
    426c:	4770      	bx	lr
    426e:	bf00      	nop

00004270 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4272:	4607      	mov	r7, r0

	if (esf != NULL) {
    4274:	460c      	mov	r4, r1
    4276:	2900      	cmp	r1, #0
    4278:	d02d      	beq.n	42d6 <z_arm_fatal_error+0x66>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    427a:	4e1a      	ldr	r6, [pc, #104]	; (42e4 <z_arm_fatal_error+0x74>)
    427c:	6833      	ldr	r3, [r6, #0]
    427e:	0758      	lsls	r0, r3, #29
    4280:	d029      	beq.n	42d6 <z_arm_fatal_error+0x66>
    4282:	4b19      	ldr	r3, [pc, #100]	; (42e8 <z_arm_fatal_error+0x78>)
    4284:	4d19      	ldr	r5, [pc, #100]	; (42ec <z_arm_fatal_error+0x7c>)
    4286:	481a      	ldr	r0, [pc, #104]	; (42f0 <z_arm_fatal_error+0x80>)
    4288:	1aed      	subs	r5, r5, r3
    428a:	08ed      	lsrs	r5, r5, #3
    428c:	01ad      	lsls	r5, r5, #6
    428e:	f045 0501 	orr.w	r5, r5, #1
    4292:	f8ad 5000 	strh.w	r5, [sp]
    4296:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    429a:	6809      	ldr	r1, [r1, #0]
    429c:	f004 f8d0 	bl	8440 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    42a0:	6833      	ldr	r3, [r6, #0]
    42a2:	0759      	lsls	r1, r3, #29
    42a4:	d017      	beq.n	42d6 <z_arm_fatal_error+0x66>
    42a6:	f8ad 5000 	strh.w	r5, [sp]
    42aa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    42ae:	68e1      	ldr	r1, [r4, #12]
    42b0:	4810      	ldr	r0, [pc, #64]	; (42f4 <z_arm_fatal_error+0x84>)
    42b2:	f004 f8c5 	bl	8440 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    42b6:	6833      	ldr	r3, [r6, #0]
    42b8:	075a      	lsls	r2, r3, #29
    42ba:	d00c      	beq.n	42d6 <z_arm_fatal_error+0x66>
    42bc:	462a      	mov	r2, r5
    42be:	69e1      	ldr	r1, [r4, #28]
    42c0:	480d      	ldr	r0, [pc, #52]	; (42f8 <z_arm_fatal_error+0x88>)
    42c2:	f004 f890 	bl	83e6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    42c6:	6833      	ldr	r3, [r6, #0]
    42c8:	075b      	lsls	r3, r3, #29
    42ca:	d004      	beq.n	42d6 <z_arm_fatal_error+0x66>
    42cc:	462a      	mov	r2, r5
    42ce:	69a1      	ldr	r1, [r4, #24]
    42d0:	480a      	ldr	r0, [pc, #40]	; (42fc <z_arm_fatal_error+0x8c>)
    42d2:	f004 f888 	bl	83e6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    42d6:	4621      	mov	r1, r4
    42d8:	4638      	mov	r0, r7
}
    42da:	b003      	add	sp, #12
    42dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
    42e0:	f002 b822 	b.w	6328 <z_fatal_error>
    42e4:	200001ac 	.word	0x200001ac
    42e8:	0000a974 	.word	0x0000a974
    42ec:	0000a9a4 	.word	0x0000a9a4
    42f0:	0000cad5 	.word	0x0000cad5
    42f4:	0000cb04 	.word	0x0000cb04
    42f8:	0000cb33 	.word	0x0000cb33
    42fc:	0000cb42 	.word	0x0000cb42

00004300 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4300:	bf30      	wfi
    b z_SysNmiOnReset
    4302:	f7ff bffd 	b.w	4300 <z_SysNmiOnReset>
    4306:	bf00      	nop

00004308 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4308:	4a0e      	ldr	r2, [pc, #56]	; (4344 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    430a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    430c:	4b0e      	ldr	r3, [pc, #56]	; (4348 <z_arm_prep_c+0x40>)
    430e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4312:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4318:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    431c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4320:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4328:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    432c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4330:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4334:	f002 f890 	bl	6458 <z_bss_zero>
	z_data_copy();
    4338:	f002 f898 	bl	646c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    433c:	f000 fb5e 	bl	49fc <z_arm_interrupt_init>
	z_cstart();
    4340:	f002 f8c6 	bl	64d0 <z_cstart>
    4344:	00000000 	.word	0x00000000
    4348:	e000ed00 	.word	0xe000ed00

0000434c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    434c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    434e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4350:	4a0b      	ldr	r2, [pc, #44]	; (4380 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4352:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    4354:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4356:	bf1e      	ittt	ne
	movne	r1, #0
    4358:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    435a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    435c:	f005 febb 	blne	a0d6 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4360:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4362:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4366:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    436a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    436e:	4905      	ldr	r1, [pc, #20]	; (4384 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4370:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4372:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    4374:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4376:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    437a:	4903      	ldr	r1, [pc, #12]	; (4388 <_isr_wrapper+0x3c>)
	bx r1
    437c:	4708      	bx	r1
    437e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4380:	20000ea0 	.word	0x20000ea0
	ldr r1, =_sw_isr_table
    4384:	0000a76c 	.word	0x0000a76c
	ldr r1, =z_arm_int_exit
    4388:	000049bd 	.word	0x000049bd

0000438c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    438c:	f003 ffd4 	bl	8338 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4390:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4392:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl z_arm_watchdog_init
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    4396:	480b      	ldr	r0, [pc, #44]	; (43c4 <__start+0x38>)
    ldr r1, =0xaa
    4398:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    439c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    43a0:	f005 fc77 	bl	9c92 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    43a4:	4807      	ldr	r0, [pc, #28]	; (43c4 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    43a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    43aa:	1840      	adds	r0, r0, r1
    msr PSP, r0
    43ac:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    43b0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    43b4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    43b6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    43b8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    43bc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    43c0:	f7ff ffa2 	bl	4308 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    43c4:	20002280 	.word	0x20002280

000043c8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    43c8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    43cc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    43d0:	4672      	mov	r2, lr

	push {r0, lr}
    43d2:	b501      	push	{r0, lr}

	bl z_arm_fault
    43d4:	f000 f9f6 	bl	47c4 <z_arm_fault>

	pop {r0, pc}
    43d8:	bd01      	pop	{r0, pc}
    43da:	bf00      	nop

000043dc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    43dc:	b510      	push	{r4, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    43de:	4c47      	ldr	r4, [pc, #284]	; (44fc <usage_fault.isra.0+0x120>)
    43e0:	6823      	ldr	r3, [r4, #0]
    43e2:	0759      	lsls	r1, r3, #29
    43e4:	d009      	beq.n	43fa <usage_fault.isra.0+0x1e>
    43e6:	4946      	ldr	r1, [pc, #280]	; (4500 <usage_fault.isra.0+0x124>)
    43e8:	4b46      	ldr	r3, [pc, #280]	; (4504 <usage_fault.isra.0+0x128>)
    43ea:	4847      	ldr	r0, [pc, #284]	; (4508 <usage_fault.isra.0+0x12c>)
    43ec:	1ac9      	subs	r1, r1, r3
    43ee:	08c9      	lsrs	r1, r1, #3
    43f0:	0189      	lsls	r1, r1, #6
    43f2:	f041 0101 	orr.w	r1, r1, #1
    43f6:	f003 ffe9 	bl	83cc <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    43fa:	4b44      	ldr	r3, [pc, #272]	; (450c <usage_fault.isra.0+0x130>)
    43fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43fe:	019a      	lsls	r2, r3, #6
    4400:	d50c      	bpl.n	441c <usage_fault.isra.0+0x40>
		PR_FAULT_INFO("  Division by zero");
    4402:	6823      	ldr	r3, [r4, #0]
    4404:	075b      	lsls	r3, r3, #29
    4406:	d009      	beq.n	441c <usage_fault.isra.0+0x40>
    4408:	493d      	ldr	r1, [pc, #244]	; (4500 <usage_fault.isra.0+0x124>)
    440a:	4b3e      	ldr	r3, [pc, #248]	; (4504 <usage_fault.isra.0+0x128>)
    440c:	4840      	ldr	r0, [pc, #256]	; (4510 <usage_fault.isra.0+0x134>)
    440e:	1ac9      	subs	r1, r1, r3
    4410:	08c9      	lsrs	r1, r1, #3
    4412:	0189      	lsls	r1, r1, #6
    4414:	f041 0101 	orr.w	r1, r1, #1
    4418:	f003 ffd8 	bl	83cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    441c:	4b3b      	ldr	r3, [pc, #236]	; (450c <usage_fault.isra.0+0x130>)
    441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4420:	01d8      	lsls	r0, r3, #7
    4422:	d50c      	bpl.n	443e <usage_fault.isra.0+0x62>
		PR_FAULT_INFO("  Unaligned memory access");
    4424:	6823      	ldr	r3, [r4, #0]
    4426:	0759      	lsls	r1, r3, #29
    4428:	d009      	beq.n	443e <usage_fault.isra.0+0x62>
    442a:	4935      	ldr	r1, [pc, #212]	; (4500 <usage_fault.isra.0+0x124>)
    442c:	4b35      	ldr	r3, [pc, #212]	; (4504 <usage_fault.isra.0+0x128>)
    442e:	4839      	ldr	r0, [pc, #228]	; (4514 <usage_fault.isra.0+0x138>)
    4430:	1ac9      	subs	r1, r1, r3
    4432:	08c9      	lsrs	r1, r1, #3
    4434:	0189      	lsls	r1, r1, #6
    4436:	f041 0101 	orr.w	r1, r1, #1
    443a:	f003 ffc7 	bl	83cc <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    443e:	4b33      	ldr	r3, [pc, #204]	; (450c <usage_fault.isra.0+0x130>)
    4440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4442:	02da      	lsls	r2, r3, #11
    4444:	d50c      	bpl.n	4460 <usage_fault.isra.0+0x84>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    4446:	6823      	ldr	r3, [r4, #0]
    4448:	075b      	lsls	r3, r3, #29
    444a:	d009      	beq.n	4460 <usage_fault.isra.0+0x84>
    444c:	492c      	ldr	r1, [pc, #176]	; (4500 <usage_fault.isra.0+0x124>)
    444e:	4b2d      	ldr	r3, [pc, #180]	; (4504 <usage_fault.isra.0+0x128>)
    4450:	4831      	ldr	r0, [pc, #196]	; (4518 <usage_fault.isra.0+0x13c>)
    4452:	1ac9      	subs	r1, r1, r3
    4454:	08c9      	lsrs	r1, r1, #3
    4456:	0189      	lsls	r1, r1, #6
    4458:	f041 0101 	orr.w	r1, r1, #1
    445c:	f003 ffb6 	bl	83cc <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4460:	4b2a      	ldr	r3, [pc, #168]	; (450c <usage_fault.isra.0+0x130>)
    4462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4464:	0318      	lsls	r0, r3, #12
    4466:	d50c      	bpl.n	4482 <usage_fault.isra.0+0xa6>
		PR_FAULT_INFO("  No coprocessor instructions");
    4468:	6823      	ldr	r3, [r4, #0]
    446a:	0759      	lsls	r1, r3, #29
    446c:	d009      	beq.n	4482 <usage_fault.isra.0+0xa6>
    446e:	4924      	ldr	r1, [pc, #144]	; (4500 <usage_fault.isra.0+0x124>)
    4470:	4b24      	ldr	r3, [pc, #144]	; (4504 <usage_fault.isra.0+0x128>)
    4472:	482a      	ldr	r0, [pc, #168]	; (451c <usage_fault.isra.0+0x140>)
    4474:	1ac9      	subs	r1, r1, r3
    4476:	08c9      	lsrs	r1, r1, #3
    4478:	0189      	lsls	r1, r1, #6
    447a:	f041 0101 	orr.w	r1, r1, #1
    447e:	f003 ffa5 	bl	83cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4482:	4b22      	ldr	r3, [pc, #136]	; (450c <usage_fault.isra.0+0x130>)
    4484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4486:	035a      	lsls	r2, r3, #13
    4488:	d50c      	bpl.n	44a4 <usage_fault.isra.0+0xc8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    448a:	6823      	ldr	r3, [r4, #0]
    448c:	075b      	lsls	r3, r3, #29
    448e:	d009      	beq.n	44a4 <usage_fault.isra.0+0xc8>
    4490:	491b      	ldr	r1, [pc, #108]	; (4500 <usage_fault.isra.0+0x124>)
    4492:	4b1c      	ldr	r3, [pc, #112]	; (4504 <usage_fault.isra.0+0x128>)
    4494:	4822      	ldr	r0, [pc, #136]	; (4520 <usage_fault.isra.0+0x144>)
    4496:	1ac9      	subs	r1, r1, r3
    4498:	08c9      	lsrs	r1, r1, #3
    449a:	0189      	lsls	r1, r1, #6
    449c:	f041 0101 	orr.w	r1, r1, #1
    44a0:	f003 ff94 	bl	83cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    44a4:	4b19      	ldr	r3, [pc, #100]	; (450c <usage_fault.isra.0+0x130>)
    44a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44a8:	0398      	lsls	r0, r3, #14
    44aa:	d50c      	bpl.n	44c6 <usage_fault.isra.0+0xea>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    44ac:	6823      	ldr	r3, [r4, #0]
    44ae:	0759      	lsls	r1, r3, #29
    44b0:	d009      	beq.n	44c6 <usage_fault.isra.0+0xea>
    44b2:	4913      	ldr	r1, [pc, #76]	; (4500 <usage_fault.isra.0+0x124>)
    44b4:	4b13      	ldr	r3, [pc, #76]	; (4504 <usage_fault.isra.0+0x128>)
    44b6:	481b      	ldr	r0, [pc, #108]	; (4524 <usage_fault.isra.0+0x148>)
    44b8:	1ac9      	subs	r1, r1, r3
    44ba:	08c9      	lsrs	r1, r1, #3
    44bc:	0189      	lsls	r1, r1, #6
    44be:	f041 0101 	orr.w	r1, r1, #1
    44c2:	f003 ff83 	bl	83cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    44c6:	4b11      	ldr	r3, [pc, #68]	; (450c <usage_fault.isra.0+0x130>)
    44c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44ca:	03da      	lsls	r2, r3, #15
    44cc:	d50c      	bpl.n	44e8 <usage_fault.isra.0+0x10c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    44ce:	6823      	ldr	r3, [r4, #0]
    44d0:	075b      	lsls	r3, r3, #29
    44d2:	d009      	beq.n	44e8 <usage_fault.isra.0+0x10c>
    44d4:	490a      	ldr	r1, [pc, #40]	; (4500 <usage_fault.isra.0+0x124>)
    44d6:	4b0b      	ldr	r3, [pc, #44]	; (4504 <usage_fault.isra.0+0x128>)
    44d8:	4813      	ldr	r0, [pc, #76]	; (4528 <usage_fault.isra.0+0x14c>)
    44da:	1ac9      	subs	r1, r1, r3
    44dc:	08c9      	lsrs	r1, r1, #3
    44de:	0189      	lsls	r1, r1, #6
    44e0:	f041 0101 	orr.w	r1, r1, #1
    44e4:	f003 ff72 	bl	83cc <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    44e8:	4a08      	ldr	r2, [pc, #32]	; (450c <usage_fault.isra.0+0x130>)

	return reason;
}
    44ea:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    44ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44ee:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    44f2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    44f6:	6293      	str	r3, [r2, #40]	; 0x28
}
    44f8:	bd10      	pop	{r4, pc}
    44fa:	bf00      	nop
    44fc:	200001ac 	.word	0x200001ac
    4500:	0000a9a4 	.word	0x0000a9a4
    4504:	0000a974 	.word	0x0000a974
    4508:	0000cb70 	.word	0x0000cb70
    450c:	e000ed00 	.word	0xe000ed00
    4510:	0000cb88 	.word	0x0000cb88
    4514:	0000cb9b 	.word	0x0000cb9b
    4518:	0000cbb5 	.word	0x0000cbb5
    451c:	0000cbdf 	.word	0x0000cbdf
    4520:	0000cbfd 	.word	0x0000cbfd
    4524:	0000cc22 	.word	0x0000cc22
    4528:	0000cc3c 	.word	0x0000cc3c

0000452c <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    452c:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    452e:	4c43      	ldr	r4, [pc, #268]	; (463c <mem_manage_fault.isra.0+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4530:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    4532:	6823      	ldr	r3, [r4, #0]
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4534:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4536:	075b      	lsls	r3, r3, #29
    4538:	d009      	beq.n	454e <mem_manage_fault.isra.0+0x22>
    453a:	4941      	ldr	r1, [pc, #260]	; (4640 <mem_manage_fault.isra.0+0x114>)
    453c:	4b41      	ldr	r3, [pc, #260]	; (4644 <mem_manage_fault.isra.0+0x118>)
    453e:	4842      	ldr	r0, [pc, #264]	; (4648 <mem_manage_fault.isra.0+0x11c>)
    4540:	1ac9      	subs	r1, r1, r3
    4542:	08c9      	lsrs	r1, r1, #3
    4544:	0189      	lsls	r1, r1, #6
    4546:	f041 0101 	orr.w	r1, r1, #1
    454a:	f003 ff3f 	bl	83cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    454e:	4b3f      	ldr	r3, [pc, #252]	; (464c <mem_manage_fault.isra.0+0x120>)
    4550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4552:	06d8      	lsls	r0, r3, #27
    4554:	d50c      	bpl.n	4570 <mem_manage_fault.isra.0+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4556:	6823      	ldr	r3, [r4, #0]
    4558:	0759      	lsls	r1, r3, #29
    455a:	d009      	beq.n	4570 <mem_manage_fault.isra.0+0x44>
    455c:	4938      	ldr	r1, [pc, #224]	; (4640 <mem_manage_fault.isra.0+0x114>)
    455e:	4b39      	ldr	r3, [pc, #228]	; (4644 <mem_manage_fault.isra.0+0x118>)
    4560:	483b      	ldr	r0, [pc, #236]	; (4650 <mem_manage_fault.isra.0+0x124>)
    4562:	1ac9      	subs	r1, r1, r3
    4564:	08c9      	lsrs	r1, r1, #3
    4566:	0189      	lsls	r1, r1, #6
    4568:	f041 0101 	orr.w	r1, r1, #1
    456c:	f003 ff2e 	bl	83cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4570:	4b36      	ldr	r3, [pc, #216]	; (464c <mem_manage_fault.isra.0+0x120>)
    4572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4574:	071a      	lsls	r2, r3, #28
    4576:	d50c      	bpl.n	4592 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Unstacking error");
    4578:	6823      	ldr	r3, [r4, #0]
    457a:	075b      	lsls	r3, r3, #29
    457c:	d009      	beq.n	4592 <mem_manage_fault.isra.0+0x66>
    457e:	4930      	ldr	r1, [pc, #192]	; (4640 <mem_manage_fault.isra.0+0x114>)
    4580:	4b30      	ldr	r3, [pc, #192]	; (4644 <mem_manage_fault.isra.0+0x118>)
    4582:	4834      	ldr	r0, [pc, #208]	; (4654 <mem_manage_fault.isra.0+0x128>)
    4584:	1ac9      	subs	r1, r1, r3
    4586:	08c9      	lsrs	r1, r1, #3
    4588:	0189      	lsls	r1, r1, #6
    458a:	f041 0101 	orr.w	r1, r1, #1
    458e:	f003 ff1d 	bl	83cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4592:	4b2e      	ldr	r3, [pc, #184]	; (464c <mem_manage_fault.isra.0+0x120>)
    4594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4596:	0798      	lsls	r0, r3, #30
    4598:	d524      	bpl.n	45e4 <mem_manage_fault.isra.0+0xb8>
		PR_FAULT_INFO("  Data Access Violation");
    459a:	6823      	ldr	r3, [r4, #0]
    459c:	0759      	lsls	r1, r3, #29
    459e:	d009      	beq.n	45b4 <mem_manage_fault.isra.0+0x88>
    45a0:	4927      	ldr	r1, [pc, #156]	; (4640 <mem_manage_fault.isra.0+0x114>)
    45a2:	4b28      	ldr	r3, [pc, #160]	; (4644 <mem_manage_fault.isra.0+0x118>)
    45a4:	482c      	ldr	r0, [pc, #176]	; (4658 <mem_manage_fault.isra.0+0x12c>)
    45a6:	1ac9      	subs	r1, r1, r3
    45a8:	08c9      	lsrs	r1, r1, #3
    45aa:	0189      	lsls	r1, r1, #6
    45ac:	f041 0101 	orr.w	r1, r1, #1
    45b0:	f003 ff0c 	bl	83cc <log_0>
		mmfar = SCB->MMFAR;
    45b4:	4b25      	ldr	r3, [pc, #148]	; (464c <mem_manage_fault.isra.0+0x120>)
    45b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    45b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45ba:	061a      	lsls	r2, r3, #24
    45bc:	d512      	bpl.n	45e4 <mem_manage_fault.isra.0+0xb8>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    45be:	6823      	ldr	r3, [r4, #0]
    45c0:	075b      	lsls	r3, r3, #29
    45c2:	d009      	beq.n	45d8 <mem_manage_fault.isra.0+0xac>
    45c4:	4a1e      	ldr	r2, [pc, #120]	; (4640 <mem_manage_fault.isra.0+0x114>)
    45c6:	4b1f      	ldr	r3, [pc, #124]	; (4644 <mem_manage_fault.isra.0+0x118>)
    45c8:	4824      	ldr	r0, [pc, #144]	; (465c <mem_manage_fault.isra.0+0x130>)
    45ca:	1ad2      	subs	r2, r2, r3
    45cc:	08d2      	lsrs	r2, r2, #3
    45ce:	0192      	lsls	r2, r2, #6
    45d0:	f042 0201 	orr.w	r2, r2, #1
    45d4:	f003 ff07 	bl	83e6 <log_1>
			if (from_hard_fault) {
    45d8:	b126      	cbz	r6, 45e4 <mem_manage_fault.isra.0+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    45da:	4a1c      	ldr	r2, [pc, #112]	; (464c <mem_manage_fault.isra.0+0x120>)
    45dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    45de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    45e2:	6293      	str	r3, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    45e4:	4b19      	ldr	r3, [pc, #100]	; (464c <mem_manage_fault.isra.0+0x120>)
    45e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45e8:	07d8      	lsls	r0, r3, #31
    45ea:	d50c      	bpl.n	4606 <mem_manage_fault.isra.0+0xda>
		PR_FAULT_INFO("  Instruction Access Violation");
    45ec:	6823      	ldr	r3, [r4, #0]
    45ee:	0759      	lsls	r1, r3, #29
    45f0:	d009      	beq.n	4606 <mem_manage_fault.isra.0+0xda>
    45f2:	4914      	ldr	r1, [pc, #80]	; (4644 <mem_manage_fault.isra.0+0x118>)
    45f4:	4b12      	ldr	r3, [pc, #72]	; (4640 <mem_manage_fault.isra.0+0x114>)
    45f6:	481a      	ldr	r0, [pc, #104]	; (4660 <mem_manage_fault.isra.0+0x134>)
    45f8:	1a5b      	subs	r3, r3, r1
    45fa:	08db      	lsrs	r3, r3, #3
    45fc:	019b      	lsls	r3, r3, #6
    45fe:	f043 0101 	orr.w	r1, r3, #1
    4602:	f003 fee3 	bl	83cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4606:	4b11      	ldr	r3, [pc, #68]	; (464c <mem_manage_fault.isra.0+0x120>)
    4608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    460a:	069a      	lsls	r2, r3, #26
    460c:	d50c      	bpl.n	4628 <mem_manage_fault.isra.0+0xfc>
		PR_FAULT_INFO(
    460e:	6823      	ldr	r3, [r4, #0]
    4610:	075b      	lsls	r3, r3, #29
    4612:	d009      	beq.n	4628 <mem_manage_fault.isra.0+0xfc>
    4614:	490b      	ldr	r1, [pc, #44]	; (4644 <mem_manage_fault.isra.0+0x118>)
    4616:	4b0a      	ldr	r3, [pc, #40]	; (4640 <mem_manage_fault.isra.0+0x114>)
    4618:	4812      	ldr	r0, [pc, #72]	; (4664 <mem_manage_fault.isra.0+0x138>)
    461a:	1a5b      	subs	r3, r3, r1
    461c:	08db      	lsrs	r3, r3, #3
    461e:	019b      	lsls	r3, r3, #6
    4620:	f043 0101 	orr.w	r1, r3, #1
    4624:	f003 fed2 	bl	83cc <log_0>
	*recoverable = memory_fault_recoverable(esf);
    4628:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    462a:	4b08      	ldr	r3, [pc, #32]	; (464c <mem_manage_fault.isra.0+0x120>)
    462c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    462e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4630:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4634:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4636:	7028      	strb	r0, [r5, #0]
}
    4638:	bd70      	pop	{r4, r5, r6, pc}
    463a:	bf00      	nop
    463c:	200001ac 	.word	0x200001ac
    4640:	0000a9a4 	.word	0x0000a9a4
    4644:	0000a974 	.word	0x0000a974
    4648:	0000cc67 	.word	0x0000cc67
    464c:	e000ed00 	.word	0xe000ed00
    4650:	0000cc7d 	.word	0x0000cc7d
    4654:	0000ccb0 	.word	0x0000ccb0
    4658:	0000ccc3 	.word	0x0000ccc3
    465c:	0000ccdb 	.word	0x0000ccdb
    4660:	0000ccf1 	.word	0x0000ccf1
    4664:	0000cd10 	.word	0x0000cd10

00004668 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4668:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    466a:	4c4a      	ldr	r4, [pc, #296]	; (4794 <bus_fault.isra.0+0x12c>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    466c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    466e:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4670:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    4672:	0759      	lsls	r1, r3, #29
    4674:	d009      	beq.n	468a <bus_fault.isra.0+0x22>
    4676:	4948      	ldr	r1, [pc, #288]	; (4798 <bus_fault.isra.0+0x130>)
    4678:	4b48      	ldr	r3, [pc, #288]	; (479c <bus_fault.isra.0+0x134>)
    467a:	4849      	ldr	r0, [pc, #292]	; (47a0 <bus_fault.isra.0+0x138>)
    467c:	1ac9      	subs	r1, r1, r3
    467e:	08c9      	lsrs	r1, r1, #3
    4680:	0189      	lsls	r1, r1, #6
    4682:	f041 0101 	orr.w	r1, r1, #1
    4686:	f003 fea1 	bl	83cc <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    468a:	4b46      	ldr	r3, [pc, #280]	; (47a4 <bus_fault.isra.0+0x13c>)
    468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    468e:	04da      	lsls	r2, r3, #19
    4690:	d50c      	bpl.n	46ac <bus_fault.isra.0+0x44>
		PR_FAULT_INFO("  Stacking error");
    4692:	6823      	ldr	r3, [r4, #0]
    4694:	075b      	lsls	r3, r3, #29
    4696:	d009      	beq.n	46ac <bus_fault.isra.0+0x44>
    4698:	493f      	ldr	r1, [pc, #252]	; (4798 <bus_fault.isra.0+0x130>)
    469a:	4b40      	ldr	r3, [pc, #256]	; (479c <bus_fault.isra.0+0x134>)
    469c:	4842      	ldr	r0, [pc, #264]	; (47a8 <bus_fault.isra.0+0x140>)
    469e:	1ac9      	subs	r1, r1, r3
    46a0:	08c9      	lsrs	r1, r1, #3
    46a2:	0189      	lsls	r1, r1, #6
    46a4:	f041 0101 	orr.w	r1, r1, #1
    46a8:	f003 fe90 	bl	83cc <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    46ac:	4b3d      	ldr	r3, [pc, #244]	; (47a4 <bus_fault.isra.0+0x13c>)
    46ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46b0:	0518      	lsls	r0, r3, #20
    46b2:	d50c      	bpl.n	46ce <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Unstacking error");
    46b4:	6823      	ldr	r3, [r4, #0]
    46b6:	0759      	lsls	r1, r3, #29
    46b8:	d009      	beq.n	46ce <bus_fault.isra.0+0x66>
    46ba:	4937      	ldr	r1, [pc, #220]	; (4798 <bus_fault.isra.0+0x130>)
    46bc:	4b37      	ldr	r3, [pc, #220]	; (479c <bus_fault.isra.0+0x134>)
    46be:	483b      	ldr	r0, [pc, #236]	; (47ac <bus_fault.isra.0+0x144>)
    46c0:	1ac9      	subs	r1, r1, r3
    46c2:	08c9      	lsrs	r1, r1, #3
    46c4:	0189      	lsls	r1, r1, #6
    46c6:	f041 0101 	orr.w	r1, r1, #1
    46ca:	f003 fe7f 	bl	83cc <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    46ce:	4b35      	ldr	r3, [pc, #212]	; (47a4 <bus_fault.isra.0+0x13c>)
    46d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46d2:	059a      	lsls	r2, r3, #22
    46d4:	d524      	bpl.n	4720 <bus_fault.isra.0+0xb8>
		PR_FAULT_INFO("  Precise data bus error");
    46d6:	6823      	ldr	r3, [r4, #0]
    46d8:	075b      	lsls	r3, r3, #29
    46da:	d009      	beq.n	46f0 <bus_fault.isra.0+0x88>
    46dc:	492e      	ldr	r1, [pc, #184]	; (4798 <bus_fault.isra.0+0x130>)
    46de:	4b2f      	ldr	r3, [pc, #188]	; (479c <bus_fault.isra.0+0x134>)
    46e0:	4833      	ldr	r0, [pc, #204]	; (47b0 <bus_fault.isra.0+0x148>)
    46e2:	1ac9      	subs	r1, r1, r3
    46e4:	08c9      	lsrs	r1, r1, #3
    46e6:	0189      	lsls	r1, r1, #6
    46e8:	f041 0101 	orr.w	r1, r1, #1
    46ec:	f003 fe6e 	bl	83cc <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    46f0:	4b2c      	ldr	r3, [pc, #176]	; (47a4 <bus_fault.isra.0+0x13c>)
    46f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    46f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46f6:	0418      	lsls	r0, r3, #16
    46f8:	d512      	bpl.n	4720 <bus_fault.isra.0+0xb8>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    46fa:	6823      	ldr	r3, [r4, #0]
    46fc:	075a      	lsls	r2, r3, #29
    46fe:	d009      	beq.n	4714 <bus_fault.isra.0+0xac>
    4700:	4a25      	ldr	r2, [pc, #148]	; (4798 <bus_fault.isra.0+0x130>)
    4702:	4b26      	ldr	r3, [pc, #152]	; (479c <bus_fault.isra.0+0x134>)
    4704:	482b      	ldr	r0, [pc, #172]	; (47b4 <bus_fault.isra.0+0x14c>)
    4706:	1ad2      	subs	r2, r2, r3
    4708:	08d2      	lsrs	r2, r2, #3
    470a:	0192      	lsls	r2, r2, #6
    470c:	f042 0201 	orr.w	r2, r2, #1
    4710:	f003 fe69 	bl	83e6 <log_1>
			if (from_hard_fault) {
    4714:	b126      	cbz	r6, 4720 <bus_fault.isra.0+0xb8>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4716:	4a23      	ldr	r2, [pc, #140]	; (47a4 <bus_fault.isra.0+0x13c>)
    4718:	6a93      	ldr	r3, [r2, #40]	; 0x28
    471a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    471e:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4720:	4b20      	ldr	r3, [pc, #128]	; (47a4 <bus_fault.isra.0+0x13c>)
    4722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4724:	055b      	lsls	r3, r3, #21
    4726:	d50c      	bpl.n	4742 <bus_fault.isra.0+0xda>
		PR_FAULT_INFO("  Imprecise data bus error");
    4728:	6823      	ldr	r3, [r4, #0]
    472a:	075e      	lsls	r6, r3, #29
    472c:	d009      	beq.n	4742 <bus_fault.isra.0+0xda>
    472e:	491a      	ldr	r1, [pc, #104]	; (4798 <bus_fault.isra.0+0x130>)
    4730:	4b1a      	ldr	r3, [pc, #104]	; (479c <bus_fault.isra.0+0x134>)
    4732:	4821      	ldr	r0, [pc, #132]	; (47b8 <bus_fault.isra.0+0x150>)
    4734:	1ac9      	subs	r1, r1, r3
    4736:	08c9      	lsrs	r1, r1, #3
    4738:	0189      	lsls	r1, r1, #6
    473a:	f041 0101 	orr.w	r1, r1, #1
    473e:	f003 fe45 	bl	83cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4742:	4b18      	ldr	r3, [pc, #96]	; (47a4 <bus_fault.isra.0+0x13c>)
    4744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4746:	05d0      	lsls	r0, r2, #23
    4748:	d514      	bpl.n	4774 <bus_fault.isra.0+0x10c>
		PR_FAULT_INFO("  Instruction bus error");
    474a:	6823      	ldr	r3, [r4, #0]
    474c:	0759      	lsls	r1, r3, #29
    474e:	d009      	beq.n	4764 <bus_fault.isra.0+0xfc>
    4750:	4912      	ldr	r1, [pc, #72]	; (479c <bus_fault.isra.0+0x134>)
    4752:	4b11      	ldr	r3, [pc, #68]	; (4798 <bus_fault.isra.0+0x130>)
    4754:	4819      	ldr	r0, [pc, #100]	; (47bc <bus_fault.isra.0+0x154>)
    4756:	1a5b      	subs	r3, r3, r1
    4758:	08db      	lsrs	r3, r3, #3
    475a:	019b      	lsls	r3, r3, #6
    475c:	f043 0101 	orr.w	r1, r3, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4760:	f003 fe34 	bl	83cc <log_0>
	*recoverable = memory_fault_recoverable(esf);
    4764:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4766:	4a0f      	ldr	r2, [pc, #60]	; (47a4 <bus_fault.isra.0+0x13c>)
    4768:	6a93      	ldr	r3, [r2, #40]	; 0x28
    476a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    476e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4770:	7028      	strb	r0, [r5, #0]
}
    4772:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4776:	049a      	lsls	r2, r3, #18
    4778:	d5f4      	bpl.n	4764 <bus_fault.isra.0+0xfc>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    477a:	6823      	ldr	r3, [r4, #0]
    477c:	075b      	lsls	r3, r3, #29
    477e:	d0f1      	beq.n	4764 <bus_fault.isra.0+0xfc>
    4780:	4906      	ldr	r1, [pc, #24]	; (479c <bus_fault.isra.0+0x134>)
    4782:	4b05      	ldr	r3, [pc, #20]	; (4798 <bus_fault.isra.0+0x130>)
    4784:	480e      	ldr	r0, [pc, #56]	; (47c0 <bus_fault.isra.0+0x158>)
    4786:	1a5b      	subs	r3, r3, r1
    4788:	08db      	lsrs	r3, r3, #3
    478a:	019b      	lsls	r3, r3, #6
    478c:	f043 0101 	orr.w	r1, r3, #1
    4790:	e7e6      	b.n	4760 <bus_fault.isra.0+0xf8>
    4792:	bf00      	nop
    4794:	200001ac 	.word	0x200001ac
    4798:	0000a9a4 	.word	0x0000a9a4
    479c:	0000a974 	.word	0x0000a974
    47a0:	0000cd3f 	.word	0x0000cd3f
    47a4:	e000ed00 	.word	0xe000ed00
    47a8:	0000cd55 	.word	0x0000cd55
    47ac:	0000ccb0 	.word	0x0000ccb0
    47b0:	0000cd66 	.word	0x0000cd66
    47b4:	0000cd7f 	.word	0x0000cd7f
    47b8:	0000cd94 	.word	0x0000cd94
    47bc:	0000cdaf 	.word	0x0000cdaf
    47c0:	0000cd10 	.word	0x0000cd10

000047c4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    47c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    47c6:	4b6a      	ldr	r3, [pc, #424]	; (4970 <z_arm_fault+0x1ac>)
{
    47c8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    47ca:	685f      	ldr	r7, [r3, #4]
    47cc:	2500      	movs	r5, #0
{
    47ce:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    47d0:	f3c7 0408 	ubfx	r4, r7, #0, #9
    47d4:	f385 8811 	msr	BASEPRI, r5
    47d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    47dc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    47e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    47e4:	d112      	bne.n	480c <z_arm_fault+0x48>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    47e6:	f002 030c 	and.w	r3, r2, #12
    47ea:	2b08      	cmp	r3, #8
    47ec:	d110      	bne.n	4810 <z_arm_fault+0x4c>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    47ee:	4b61      	ldr	r3, [pc, #388]	; (4974 <z_arm_fault+0x1b0>)
    47f0:	681b      	ldr	r3, [r3, #0]
    47f2:	f013 0307 	ands.w	r3, r3, #7
    47f6:	d01d      	beq.n	4834 <z_arm_fault+0x70>
    47f8:	495f      	ldr	r1, [pc, #380]	; (4978 <z_arm_fault+0x1b4>)
    47fa:	4b60      	ldr	r3, [pc, #384]	; (497c <z_arm_fault+0x1b8>)
    47fc:	4860      	ldr	r0, [pc, #384]	; (4980 <z_arm_fault+0x1bc>)
    47fe:	1ac9      	subs	r1, r1, r3
    4800:	08c9      	lsrs	r1, r1, #3
    4802:	0189      	lsls	r1, r1, #6
    4804:	f041 0101 	orr.w	r1, r1, #1
    4808:	f003 fde0 	bl	83cc <log_0>
		return NULL;
    480c:	462e      	mov	r6, r5
    480e:	e003      	b.n	4818 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4810:	0713      	lsls	r3, r2, #28
    4812:	d401      	bmi.n	4818 <z_arm_fault+0x54>
			ptr_esf = (z_arch_esf_t *)msp;
    4814:	4606      	mov	r6, r0
			*nested_exc = true;
    4816:	2501      	movs	r5, #1
	*recoverable = false;
    4818:	2300      	movs	r3, #0
    481a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    481e:	1ee3      	subs	r3, r4, #3
    4820:	2b09      	cmp	r3, #9
    4822:	f200 8088 	bhi.w	4936 <z_arm_fault+0x172>
    4826:	e8df f003 	tbb	[pc, r3]
    482a:	6f07      	.short	0x6f07
    482c:	86866b73 	.word	0x86866b73
    4830:	77868686 	.word	0x77868686
	*nested_exc = false;
    4834:	461d      	mov	r5, r3
    4836:	e7e9      	b.n	480c <z_arm_fault+0x48>
	PR_FAULT_INFO("***** HARD FAULT *****");
    4838:	4f4e      	ldr	r7, [pc, #312]	; (4974 <z_arm_fault+0x1b0>)
    483a:	683b      	ldr	r3, [r7, #0]
    483c:	0759      	lsls	r1, r3, #29
    483e:	d009      	beq.n	4854 <z_arm_fault+0x90>
    4840:	494d      	ldr	r1, [pc, #308]	; (4978 <z_arm_fault+0x1b4>)
    4842:	4b4e      	ldr	r3, [pc, #312]	; (497c <z_arm_fault+0x1b8>)
    4844:	484f      	ldr	r0, [pc, #316]	; (4984 <z_arm_fault+0x1c0>)
    4846:	1ac9      	subs	r1, r1, r3
    4848:	08c9      	lsrs	r1, r1, #3
    484a:	0189      	lsls	r1, r1, #6
    484c:	f041 0101 	orr.w	r1, r1, #1
    4850:	f003 fdbc 	bl	83cc <log_0>
	*recoverable = false;
    4854:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4856:	4b46      	ldr	r3, [pc, #280]	; (4970 <z_arm_fault+0x1ac>)
	*recoverable = false;
    4858:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    485c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    485e:	0792      	lsls	r2, r2, #30
    4860:	d527      	bpl.n	48b2 <z_arm_fault+0xee>
		PR_EXC("  Bus fault on vector table read");
    4862:	683b      	ldr	r3, [r7, #0]
    4864:	075f      	lsls	r7, r3, #29
    4866:	d101      	bne.n	486c <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    4868:	2400      	movs	r4, #0
    486a:	e009      	b.n	4880 <z_arm_fault+0xbc>
    486c:	4942      	ldr	r1, [pc, #264]	; (4978 <z_arm_fault+0x1b4>)
    486e:	4b43      	ldr	r3, [pc, #268]	; (497c <z_arm_fault+0x1b8>)
		PR_EXC("  Bus fault on vector table read");
    4870:	4845      	ldr	r0, [pc, #276]	; (4988 <z_arm_fault+0x1c4>)
    4872:	1ac9      	subs	r1, r1, r3
    4874:	08c9      	lsrs	r1, r1, #3
    4876:	0189      	lsls	r1, r1, #6
    4878:	f041 0101 	orr.w	r1, r1, #1
    487c:	f003 fda6 	bl	83cc <log_0>
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4880:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4884:	b99b      	cbnz	r3, 48ae <z_arm_fault+0xea>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4886:	2220      	movs	r2, #32
    4888:	4631      	mov	r1, r6
    488a:	a802      	add	r0, sp, #8
    488c:	f005 f9d6 	bl	9c3c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4890:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4892:	2d00      	cmp	r5, #0
    4894:	d067      	beq.n	4966 <z_arm_fault+0x1a2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4896:	f3c3 0208 	ubfx	r2, r3, #0, #9
    489a:	b922      	cbnz	r2, 48a6 <z_arm_fault+0xe2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    489c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    48a0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    48a4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    48a6:	4620      	mov	r0, r4
    48a8:	a902      	add	r1, sp, #8
    48aa:	f7ff fce1 	bl	4270 <z_arm_fatal_error>
}
    48ae:	b00b      	add	sp, #44	; 0x2c
    48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    48b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48b4:	0058      	lsls	r0, r3, #1
    48b6:	d5d7      	bpl.n	4868 <z_arm_fault+0xa4>
		PR_EXC("  Fault escalation (see below)");
    48b8:	683b      	ldr	r3, [r7, #0]
    48ba:	0759      	lsls	r1, r3, #29
    48bc:	d009      	beq.n	48d2 <z_arm_fault+0x10e>
    48be:	492e      	ldr	r1, [pc, #184]	; (4978 <z_arm_fault+0x1b4>)
    48c0:	4b2e      	ldr	r3, [pc, #184]	; (497c <z_arm_fault+0x1b8>)
    48c2:	4832      	ldr	r0, [pc, #200]	; (498c <z_arm_fault+0x1c8>)
    48c4:	1ac9      	subs	r1, r1, r3
    48c6:	08c9      	lsrs	r1, r1, #3
    48c8:	0189      	lsls	r1, r1, #6
    48ca:	f041 0101 	orr.w	r1, r1, #1
    48ce:	f003 fd7d 	bl	83cc <log_0>
		if (SCB_MMFSR != 0) {
    48d2:	4b2f      	ldr	r3, [pc, #188]	; (4990 <z_arm_fault+0x1cc>)
    48d4:	781b      	ldrb	r3, [r3, #0]
    48d6:	b12b      	cbz	r3, 48e4 <z_arm_fault+0x120>
			reason = mem_manage_fault(esf, 1, recoverable);
    48d8:	2001      	movs	r0, #1
    48da:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    48de:	f7ff fe25 	bl	452c <mem_manage_fault.isra.0>
    48e2:	e00f      	b.n	4904 <z_arm_fault+0x140>
		} else if (SCB_BFSR != 0) {
    48e4:	4b2b      	ldr	r3, [pc, #172]	; (4994 <z_arm_fault+0x1d0>)
    48e6:	781b      	ldrb	r3, [r3, #0]
    48e8:	b12b      	cbz	r3, 48f6 <z_arm_fault+0x132>
			reason = bus_fault(esf, 1, recoverable);
    48ea:	2001      	movs	r0, #1
    48ec:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    48f0:	f7ff feba 	bl	4668 <bus_fault.isra.0>
    48f4:	e006      	b.n	4904 <z_arm_fault+0x140>
		} else if (SCB_UFSR != 0) {
    48f6:	4b28      	ldr	r3, [pc, #160]	; (4998 <z_arm_fault+0x1d4>)
    48f8:	881b      	ldrh	r3, [r3, #0]
    48fa:	b29b      	uxth	r3, r3
    48fc:	2b00      	cmp	r3, #0
    48fe:	d0b3      	beq.n	4868 <z_arm_fault+0xa4>
			reason = usage_fault(esf);
    4900:	f7ff fd6c 	bl	43dc <usage_fault.isra.0>
    4904:	4604      	mov	r4, r0
    4906:	e7bb      	b.n	4880 <z_arm_fault+0xbc>
		reason = mem_manage_fault(esf, 0, recoverable);
    4908:	2000      	movs	r0, #0
    490a:	f10d 0107 	add.w	r1, sp, #7
    490e:	e7e6      	b.n	48de <z_arm_fault+0x11a>
		reason = bus_fault(esf, 0, recoverable);
    4910:	2000      	movs	r0, #0
    4912:	f10d 0107 	add.w	r1, sp, #7
    4916:	e7eb      	b.n	48f0 <z_arm_fault+0x12c>
	PR_FAULT_INFO(
    4918:	4b16      	ldr	r3, [pc, #88]	; (4974 <z_arm_fault+0x1b0>)
    491a:	681b      	ldr	r3, [r3, #0]
    491c:	075a      	lsls	r2, r3, #29
    491e:	d0a3      	beq.n	4868 <z_arm_fault+0xa4>
    4920:	4b16      	ldr	r3, [pc, #88]	; (497c <z_arm_fault+0x1b8>)
    4922:	4915      	ldr	r1, [pc, #84]	; (4978 <z_arm_fault+0x1b4>)
    4924:	481d      	ldr	r0, [pc, #116]	; (499c <z_arm_fault+0x1d8>)
    4926:	1ac9      	subs	r1, r1, r3
    4928:	08c9      	lsrs	r1, r1, #3
    492a:	0189      	lsls	r1, r1, #6
    492c:	f041 0101 	orr.w	r1, r1, #1
    4930:	f003 fd4c 	bl	83cc <log_0>
    4934:	e798      	b.n	4868 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    4936:	4b0f      	ldr	r3, [pc, #60]	; (4974 <z_arm_fault+0x1b0>)
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	075b      	lsls	r3, r3, #29
    493c:	d094      	beq.n	4868 <z_arm_fault+0xa4>
    493e:	4a0f      	ldr	r2, [pc, #60]	; (497c <z_arm_fault+0x1b8>)
    4940:	4b0d      	ldr	r3, [pc, #52]	; (4978 <z_arm_fault+0x1b4>)
    4942:	4817      	ldr	r0, [pc, #92]	; (49a0 <z_arm_fault+0x1dc>)
    4944:	1a9b      	subs	r3, r3, r2
    4946:	08db      	lsrs	r3, r3, #3
    4948:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    494c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4950:	4914      	ldr	r1, [pc, #80]	; (49a4 <z_arm_fault+0x1e0>)
    4952:	f043 0301 	orr.w	r3, r3, #1
    4956:	bf18      	it	ne
    4958:	4601      	movne	r1, r0
    495a:	f1a4 0210 	sub.w	r2, r4, #16
    495e:	4812      	ldr	r0, [pc, #72]	; (49a8 <z_arm_fault+0x1e4>)
    4960:	f003 fd55 	bl	840e <log_2>
    4964:	e780      	b.n	4868 <z_arm_fault+0xa4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4966:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    496a:	f023 0301 	bic.w	r3, r3, #1
    496e:	e799      	b.n	48a4 <z_arm_fault+0xe0>
    4970:	e000ed00 	.word	0xe000ed00
    4974:	200001ac 	.word	0x200001ac
    4978:	0000a9a4 	.word	0x0000a9a4
    497c:	0000a974 	.word	0x0000a974
    4980:	0000cdc7 	.word	0x0000cdc7
    4984:	0000cdf2 	.word	0x0000cdf2
    4988:	0000ce09 	.word	0x0000ce09
    498c:	0000ce2a 	.word	0x0000ce2a
    4990:	e000ed28 	.word	0xe000ed28
    4994:	e000ed29 	.word	0xe000ed29
    4998:	e000ed2a 	.word	0xe000ed2a
    499c:	0000ce49 	.word	0x0000ce49
    49a0:	0000ce94 	.word	0x0000ce94
    49a4:	0000ce7f 	.word	0x0000ce7f
    49a8:	0000cead 	.word	0x0000cead

000049ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    49ac:	4a02      	ldr	r2, [pc, #8]	; (49b8 <z_arm_fault_init+0xc>)
    49ae:	6953      	ldr	r3, [r2, #20]
    49b0:	f043 0310 	orr.w	r3, r3, #16
    49b4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    49b6:	4770      	bx	lr
    49b8:	e000ed00 	.word	0xe000ed00

000049bc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    49bc:	4b04      	ldr	r3, [pc, #16]	; (49d0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    49be:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    49c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    49c2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    49c4:	d003      	beq.n	49ce <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    49c6:	4903      	ldr	r1, [pc, #12]	; (49d4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    49c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    49cc:	600a      	str	r2, [r1, #0]

000049ce <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    49ce:	4770      	bx	lr
	ldr r3, =_kernel
    49d0:	20000ea0 	.word	0x20000ea0
	ldr r1, =_SCS_ICSR
    49d4:	e000ed04 	.word	0xe000ed04

000049d8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    49d8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    49dc:	4905      	ldr	r1, [pc, #20]	; (49f4 <sys_arch_reboot+0x1c>)
    49de:	4b06      	ldr	r3, [pc, #24]	; (49f8 <sys_arch_reboot+0x20>)
    49e0:	68ca      	ldr	r2, [r1, #12]
    49e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    49e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    49e8:	60cb      	str	r3, [r1, #12]
    49ea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    49ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    49f0:	e7fd      	b.n	49ee <sys_arch_reboot+0x16>
    49f2:	bf00      	nop
    49f4:	e000ed00 	.word	0xe000ed00
    49f8:	05fa0004 	.word	0x05fa0004

000049fc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    49fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49fe:	2120      	movs	r1, #32
    4a00:	4803      	ldr	r0, [pc, #12]	; (4a10 <z_arm_interrupt_init+0x14>)
    4a02:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4a04:	3301      	adds	r3, #1
    4a06:	2b41      	cmp	r3, #65	; 0x41
    4a08:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4a0c:	d1f9      	bne.n	4a02 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4a0e:	4770      	bx	lr
    4a10:	e000e100 	.word	0xe000e100

00004a14 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    4a14:	b538      	push	{r3, r4, r5, lr}
    4a16:	4604      	mov	r4, r0
	__asm__ volatile(
    4a18:	f04f 0320 	mov.w	r3, #32
    4a1c:	f3ef 8511 	mrs	r5, BASEPRI
    4a20:	f383 8811 	msr	BASEPRI, r3
    4a24:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    4a28:	f002 f97e 	bl	6d28 <z_thread_single_abort>
	z_thread_monitor_exit(thread);
    4a2c:	4620      	mov	r0, r4
    4a2e:	f002 fb89 	bl	7144 <z_thread_monitor_exit>

	if (_current == thread) {
    4a32:	4b0a      	ldr	r3, [pc, #40]	; (4a5c <z_impl_k_thread_abort+0x48>)
    4a34:	689b      	ldr	r3, [r3, #8]
    4a36:	42a3      	cmp	r3, r4
    4a38:	d10b      	bne.n	4a52 <z_impl_k_thread_abort+0x3e>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    4a3a:	4b09      	ldr	r3, [pc, #36]	; (4a60 <z_impl_k_thread_abort+0x4c>)
    4a3c:	685a      	ldr	r2, [r3, #4]
    4a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4a42:	b912      	cbnz	r2, 4a4a <z_impl_k_thread_abort+0x36>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    4a44:	4628      	mov	r0, r5
    4a46:	f7ff fb43 	bl	40d0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4a4a:	685a      	ldr	r2, [r3, #4]
    4a4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4a50:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    4a52:	4628      	mov	r0, r5
}
    4a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    4a58:	f005 bbb8 	b.w	a1cc <z_reschedule_irqlock>
    4a5c:	20000ea0 	.word	0x20000ea0
    4a60:	e000ed00 	.word	0xe000ed00

00004a64 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4a64:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    4a66:	4b0e      	ldr	r3, [pc, #56]	; (4aa0 <z_arm_configure_static_mpu_regions+0x3c>)
{
    4a68:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    4a6a:	9302      	str	r3, [sp, #8]
    4a6c:	4b0d      	ldr	r3, [pc, #52]	; (4aa4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4a6e:	4c0e      	ldr	r4, [pc, #56]	; (4aa8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    4a70:	9303      	str	r3, [sp, #12]
    4a72:	4b0e      	ldr	r3, [pc, #56]	; (4aac <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4a74:	4a0e      	ldr	r2, [pc, #56]	; (4ab0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    4a76:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    4a78:	ab02      	add	r3, sp, #8
    4a7a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4a7c:	a801      	add	r0, sp, #4
    4a7e:	4623      	mov	r3, r4
    4a80:	2101      	movs	r1, #1
    4a82:	f000 f94f 	bl	4d24 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    4a86:	2300      	movs	r3, #0
    4a88:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    4a8a:	4b0a      	ldr	r3, [pc, #40]	; (4ab4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4a8c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    4a8e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4a90:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    4a92:	9305      	str	r3, [sp, #20]
    4a94:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4a96:	f000 f94f 	bl	4d38 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4a9a:	b008      	add	sp, #32
    4a9c:	bd10      	pop	{r4, pc}
    4a9e:	bf00      	nop
    4aa0:	20000000 	.word	0x20000000
    4aa4:	00000000 	.word	0x00000000
    4aa8:	20010000 	.word	0x20010000
    4aac:	00010006 	.word	0x00010006
    4ab0:	20000000 	.word	0x20000000
    4ab4:	200002b8 	.word	0x200002b8

00004ab8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    4ab8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    4aba:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    4abc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    4abe:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    4ac2:	f004 031f 	and.w	r3, r4, #31
    4ac6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4ac8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    4aca:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4acc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    4ad0:	4904      	ldr	r1, [pc, #16]	; (4ae4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    4ad2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    4ad6:	f043 0301 	orr.w	r3, r3, #1
    4ada:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    4adc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    4ade:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    4ae0:	bd10      	pop	{r4, pc}
    4ae2:	bf00      	nop
    4ae4:	e000ed90 	.word	0xe000ed90

00004ae8 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    4ae8:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4aea:	4b09      	ldr	r3, [pc, #36]	; (4b10 <region_allocate_and_init.part.0+0x28>)
static int region_allocate_and_init(const u8_t index,
    4aec:	4601      	mov	r1, r0
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	075b      	lsls	r3, r3, #29
    4af2:	d009      	beq.n	4b08 <region_allocate_and_init.part.0+0x20>
    4af4:	4a07      	ldr	r2, [pc, #28]	; (4b14 <region_allocate_and_init.part.0+0x2c>)
    4af6:	4b08      	ldr	r3, [pc, #32]	; (4b18 <region_allocate_and_init.part.0+0x30>)
    4af8:	4808      	ldr	r0, [pc, #32]	; (4b1c <region_allocate_and_init.part.0+0x34>)
    4afa:	1ad2      	subs	r2, r2, r3
    4afc:	08d2      	lsrs	r2, r2, #3
    4afe:	0192      	lsls	r2, r2, #6
    4b00:	f042 0201 	orr.w	r2, r2, #1
    4b04:	f003 fc6f 	bl	83e6 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    4b08:	f06f 0015 	mvn.w	r0, #21
    4b0c:	bd08      	pop	{r3, pc}
    4b0e:	bf00      	nop
    4b10:	200001a8 	.word	0x200001a8
    4b14:	0000a99c 	.word	0x0000a99c
    4b18:	0000a974 	.word	0x0000a974
    4b1c:	0000cec4 	.word	0x0000cec4

00004b20 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    4b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b24:	4607      	mov	r7, r0
    4b26:	4688      	mov	r8, r1
    4b28:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4b2a:	2600      	movs	r6, #0
	MPU->RNR = index;
    4b2c:	4d5b      	ldr	r5, [pc, #364]	; (4c9c <mpu_configure_regions_and_partition.constprop.0+0x17c>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    4b2e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    4b30:	4546      	cmp	r6, r8
    4b32:	da32      	bge.n	4b9a <mpu_configure_regions_and_partition.constprop.0+0x7a>
		if (regions[i]->size == 0U) {
    4b34:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    4b38:	f8d3 9004 	ldr.w	r9, [r3, #4]
    4b3c:	f1b9 0f00 	cmp.w	r9, #0
    4b40:	d05a      	beq.n	4bf8 <mpu_configure_regions_and_partition.constprop.0+0xd8>
		&&
    4b42:	f1b9 0f1f 	cmp.w	r9, #31
    4b46:	d922      	bls.n	4b8e <mpu_configure_regions_and_partition.constprop.0+0x6e>
		&&
    4b48:	f019 0f1f 	tst.w	r9, #31
    4b4c:	d11f      	bne.n	4b8e <mpu_configure_regions_and_partition.constprop.0+0x6e>
		((part->start &
    4b4e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    4b52:	f01a 0f1f 	tst.w	sl, #31
    4b56:	d11a      	bne.n	4b8e <mpu_configure_regions_and_partition.constprop.0+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4b58:	4650      	mov	r0, sl
    4b5a:	f004 ff5c 	bl	9a16 <arm_cmse_mpu_region_get>
    4b5e:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4b60:	eb09 000a 	add.w	r0, r9, sl
    4b64:	3801      	subs	r0, #1
    4b66:	f004 ff56 	bl	9a16 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4b6a:	4583      	cmp	fp, r0
    4b6c:	d025      	beq.n	4bba <mpu_configure_regions_and_partition.constprop.0+0x9a>
	return -EINVAL;
    4b6e:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    4b72:	4b4b      	ldr	r3, [pc, #300]	; (4ca0 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    4b74:	681b      	ldr	r3, [r3, #0]
    4b76:	075b      	lsls	r3, r3, #29
    4b78:	d00d      	beq.n	4b96 <mpu_configure_regions_and_partition.constprop.0+0x76>
    4b7a:	4a4a      	ldr	r2, [pc, #296]	; (4ca4 <mpu_configure_regions_and_partition.constprop.0+0x184>)
    4b7c:	4b4a      	ldr	r3, [pc, #296]	; (4ca8 <mpu_configure_regions_and_partition.constprop.0+0x188>)
    4b7e:	4659      	mov	r1, fp
    4b80:	1ad2      	subs	r2, r2, r3
    4b82:	08d2      	lsrs	r2, r2, #3
    4b84:	0192      	lsls	r2, r2, #6
    4b86:	4849      	ldr	r0, [pc, #292]	; (4cac <mpu_configure_regions_and_partition.constprop.0+0x18c>)
    4b88:	f042 0201 	orr.w	r2, r2, #1
    4b8c:	e012      	b.n	4bb4 <mpu_configure_regions_and_partition.constprop.0+0x94>
			LOG_ERR("Partition %u: sanity check failed.", i);
    4b8e:	4b44      	ldr	r3, [pc, #272]	; (4ca0 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	075a      	lsls	r2, r3, #29
    4b94:	d105      	bne.n	4ba2 <mpu_configure_regions_and_partition.constprop.0+0x82>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    4b96:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    4b9a:	4620      	mov	r0, r4
    4b9c:	b005      	add	sp, #20
    4b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Partition %u: sanity check failed.", i);
    4ba2:	4631      	mov	r1, r6
    4ba4:	4a3f      	ldr	r2, [pc, #252]	; (4ca4 <mpu_configure_regions_and_partition.constprop.0+0x184>)
    4ba6:	4b40      	ldr	r3, [pc, #256]	; (4ca8 <mpu_configure_regions_and_partition.constprop.0+0x188>)
    4ba8:	4841      	ldr	r0, [pc, #260]	; (4cb0 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    4baa:	1ad2      	subs	r2, r2, r3
    4bac:	08d2      	lsrs	r2, r2, #3
    4bae:	0192      	lsls	r2, r2, #6
    4bb0:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    4bb4:	f003 fc17 	bl	83e6 <log_1>
    4bb8:	e7ed      	b.n	4b96 <mpu_configure_regions_and_partition.constprop.0+0x76>
		if ((u_reg_index == -EINVAL) ||
    4bba:	f11b 0f16 	cmn.w	fp, #22
    4bbe:	d0d8      	beq.n	4b72 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
    4bc0:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4bc2:	455b      	cmp	r3, fp
    4bc4:	dbd5      	blt.n	4b72 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
    4bc6:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    4bca:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    4bcc:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4bd0:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    4bd2:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    4bd6:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4bda:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    4bde:	e9d1 3200 	ldrd	r3, r2, [r1]
    4be2:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    4be4:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    4be6:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    4bea:	d118      	bne.n	4c1e <mpu_configure_regions_and_partition.constprop.0+0xfe>
    4bec:	45ca      	cmp	sl, r9
    4bee:	d105      	bne.n	4bfc <mpu_configure_regions_and_partition.constprop.0+0xdc>
			mpu_configure_region(u_reg_index, regions[i]);
    4bf0:	fa5f f08b 	uxtb.w	r0, fp
    4bf4:	f004 feee 	bl	99d4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    4bf8:	3601      	adds	r6, #1
    4bfa:	e799      	b.n	4b30 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    4bfc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4c00:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    4c02:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4c06:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    4c0a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4c0c:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    4c0e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    4c10:	f004 fee0 	bl	99d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4c14:	f110 0f16 	cmn.w	r0, #22
    4c18:	d0bd      	beq.n	4b96 <mpu_configure_regions_and_partition.constprop.0+0x76>
			reg_index++;
    4c1a:	1c44      	adds	r4, r0, #1
    4c1c:	e7ec      	b.n	4bf8 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RNR = index;
    4c1e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4c22:	692a      	ldr	r2, [r5, #16]
    4c24:	3b01      	subs	r3, #1
    4c26:	f023 031f 	bic.w	r3, r3, #31
    4c2a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4c2e:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    4c30:	45ca      	cmp	sl, r9
    4c32:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4c34:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    4c36:	d0eb      	beq.n	4c10 <mpu_configure_regions_and_partition.constprop.0+0xf0>
				mpu_configure_region(reg_index, regions[i]);
    4c38:	f004 fecc 	bl	99d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4c3c:	f110 0f16 	cmn.w	r0, #22
    4c40:	d0a9      	beq.n	4b96 <mpu_configure_regions_and_partition.constprop.0+0x76>
	MPU->RNR = index;
    4c42:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    4c46:	68ea      	ldr	r2, [r5, #12]
    4c48:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    4c4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    4c50:	f362 0304 	bfi	r3, r2, #0, #5
    4c54:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4c58:	692b      	ldr	r3, [r5, #16]
    4c5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    4c5e:	085b      	lsrs	r3, r3, #1
    4c60:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    4c64:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4c68:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    4c6c:	e9d3 1300 	ldrd	r1, r3, [r3]
    4c70:	440b      	add	r3, r1
    4c72:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    4c74:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    4c78:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    4c7a:	4453      	add	r3, sl
    4c7c:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    4c80:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    4c82:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    4c86:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    4c88:	9303      	str	r3, [sp, #12]
    4c8a:	d902      	bls.n	4c92 <mpu_configure_regions_and_partition.constprop.0+0x172>
    4c8c:	f7ff ff2c 	bl	4ae8 <region_allocate_and_init.part.0>
    4c90:	e7c0      	b.n	4c14 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    4c92:	4669      	mov	r1, sp
    4c94:	f7ff ff10 	bl	4ab8 <region_init>
			if (reg_index == -EINVAL) {
    4c98:	e7bf      	b.n	4c1a <mpu_configure_regions_and_partition.constprop.0+0xfa>
    4c9a:	bf00      	nop
    4c9c:	e000ed90 	.word	0xe000ed90
    4ca0:	200001a8 	.word	0x200001a8
    4ca4:	0000a99c 	.word	0x0000a99c
    4ca8:	0000a974 	.word	0x0000a974
    4cac:	0000cf0d 	.word	0x0000cf0d
    4cb0:	0000ceea 	.word	0x0000ceea

00004cb4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4cb4:	2205      	movs	r2, #5
    4cb6:	4b03      	ldr	r3, [pc, #12]	; (4cc4 <arm_core_mpu_enable+0x10>)
    4cb8:	605a      	str	r2, [r3, #4]
    4cba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4cbe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4cc2:	4770      	bx	lr
    4cc4:	e000ed90 	.word	0xe000ed90

00004cc8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4cc8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4ccc:	2200      	movs	r2, #0
    4cce:	4b01      	ldr	r3, [pc, #4]	; (4cd4 <arm_core_mpu_disable+0xc>)
    4cd0:	605a      	str	r2, [r3, #4]
}
    4cd2:	4770      	bx	lr
    4cd4:	e000ed90 	.word	0xe000ed90

00004cd8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    4cd8:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4cda:	4c0e      	ldr	r4, [pc, #56]	; (4d14 <arm_mpu_init+0x3c>)
    4cdc:	6825      	ldr	r5, [r4, #0]
    4cde:	2d10      	cmp	r5, #16
    4ce0:	d814      	bhi.n	4d0c <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4ce2:	f7ff fff1 	bl	4cc8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4ce6:	2000      	movs	r0, #0
	MPU->MAIR0 =
    4ce8:	4b0b      	ldr	r3, [pc, #44]	; (4d18 <arm_mpu_init+0x40>)
    4cea:	4a0c      	ldr	r2, [pc, #48]	; (4d1c <arm_mpu_init+0x44>)
    4cec:	631a      	str	r2, [r3, #48]	; 0x30
    4cee:	4285      	cmp	r5, r0
    4cf0:	d105      	bne.n	4cfe <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4cf2:	4b0b      	ldr	r3, [pc, #44]	; (4d20 <arm_mpu_init+0x48>)
    4cf4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4cf6:	f7ff ffdd 	bl	4cb4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    4cfa:	2000      	movs	r0, #0
}
    4cfc:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4cfe:	6861      	ldr	r1, [r4, #4]
    4d00:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    4d04:	f7ff fed8 	bl	4ab8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4d08:	3001      	adds	r0, #1
    4d0a:	e7f0      	b.n	4cee <arm_mpu_init+0x16>
		return -1;
    4d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4d10:	e7f4      	b.n	4cfc <arm_mpu_init+0x24>
    4d12:	bf00      	nop
    4d14:	0000b2c8 	.word	0x0000b2c8
    4d18:	e000ed90 	.word	0xe000ed90
    4d1c:	0044ffaa 	.word	0x0044ffaa
    4d20:	200011f9 	.word	0x200011f9

00004d24 <arm_core_mpu_configure_static_mpu_regions>:
{
    4d24:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4d26:	4c03      	ldr	r4, [pc, #12]	; (4d34 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4d28:	7822      	ldrb	r2, [r4, #0]
    4d2a:	f7ff fef9 	bl	4b20 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4d2e:	7020      	strb	r0, [r4, #0]
}
    4d30:	bd10      	pop	{r4, pc}
    4d32:	bf00      	nop
    4d34:	200011f9 	.word	0x200011f9

00004d38 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    4d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d3c:	4d26      	ldr	r5, [pc, #152]	; (4dd8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    4d3e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4d40:	4606      	mov	r6, r0
    4d42:	f04f 0800 	mov.w	r8, #0
    4d46:	46ab      	mov	fp, r5
	MPU->RNR = index;
    4d48:	4f24      	ldr	r7, [pc, #144]	; (4ddc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4d4a:	45d0      	cmp	r8, sl
    4d4c:	da1b      	bge.n	4d86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    4d4e:	f8d6 9004 	ldr.w	r9, [r6, #4]
    4d52:	f1b9 0f00 	cmp.w	r9, #0
    4d56:	d039      	beq.n	4dcc <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4d58:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4d5a:	4608      	mov	r0, r1
    4d5c:	9101      	str	r1, [sp, #4]
    4d5e:	f004 fe5a 	bl	9a16 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4d62:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4d64:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4d66:	eb09 0001 	add.w	r0, r9, r1
    4d6a:	3801      	subs	r0, #1
    4d6c:	f004 fe53 	bl	9a16 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4d70:	4284      	cmp	r4, r0
    4d72:	f04f 0214 	mov.w	r2, #20
    4d76:	4b1a      	ldr	r3, [pc, #104]	; (4de0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    4d78:	d008      	beq.n	4d8c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    4d7a:	f06f 0315 	mvn.w	r3, #21
    4d7e:	fb02 f808 	mul.w	r8, r2, r8
    4d82:	f84b 3008 	str.w	r3, [fp, r8]
}
    4d86:	b003      	add	sp, #12
    4d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4d8c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    4d90:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    4d92:	d0f8      	beq.n	4d86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4d94:	7819      	ldrb	r1, [r3, #0]
    4d96:	42a1      	cmp	r1, r4
    4d98:	ddf5      	ble.n	4d86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    4d9a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    4d9e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    4da0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    4da2:	68fc      	ldr	r4, [r7, #12]
    4da4:	f100 0108 	add.w	r1, r0, #8
    4da8:	7b00      	ldrb	r0, [r0, #12]
    4daa:	f364 0004 	bfi	r0, r4, #0, #5
    4dae:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4db0:	6938      	ldr	r0, [r7, #16]
    4db2:	790c      	ldrb	r4, [r1, #4]
    4db4:	0840      	lsrs	r0, r0, #1
    4db6:	f360 1447 	bfi	r4, r0, #5, #3
    4dba:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    4dbc:	68f9      	ldr	r1, [r7, #12]
    4dbe:	f021 011f 	bic.w	r1, r1, #31
    4dc2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4dc4:	6939      	ldr	r1, [r7, #16]
    4dc6:	f021 011f 	bic.w	r1, r1, #31
    4dca:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4dcc:	f108 0801 	add.w	r8, r8, #1
    4dd0:	3514      	adds	r5, #20
    4dd2:	360c      	adds	r6, #12
    4dd4:	e7b9      	b.n	4d4a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    4dd6:	bf00      	nop
    4dd8:	20000d1c 	.word	0x20000d1c
    4ddc:	e000ed90 	.word	0xe000ed90
    4de0:	200011f9 	.word	0x200011f9

00004de4 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    4de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4de8:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    4dea:	2300      	movs	r3, #0
{
    4dec:	4689      	mov	r9, r1
    4dee:	b0a1      	sub	sp, #132	; 0x84
    4df0:	9003      	str	r0, [sp, #12]
	count = 0;
    4df2:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    4df4:	4613      	mov	r3, r2
    4df6:	f813 0b01 	ldrb.w	r0, [r3], #1
    4dfa:	9306      	str	r3, [sp, #24]
    4dfc:	b158      	cbz	r0, 4e16 <z_prf+0x32>
		if (c != '%') {
    4dfe:	2825      	cmp	r0, #37	; 0x25
    4e00:	f000 8081 	beq.w	4f06 <z_prf+0x122>
			PUTC(c);
    4e04:	4649      	mov	r1, r9
    4e06:	9b03      	ldr	r3, [sp, #12]
    4e08:	4798      	blx	r3
    4e0a:	3001      	adds	r0, #1
    4e0c:	f040 844b 	bne.w	56a6 <z_prf+0x8c2>
    4e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e14:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    4e16:	9802      	ldr	r0, [sp, #8]
    4e18:	b021      	add	sp, #132	; 0x84
    4e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    4e1e:	2d2b      	cmp	r5, #43	; 0x2b
    4e20:	d065      	beq.n	4eee <z_prf+0x10a>
    4e22:	d85c      	bhi.n	4ede <z_prf+0xfa>
    4e24:	2d20      	cmp	r5, #32
    4e26:	d065      	beq.n	4ef4 <z_prf+0x110>
    4e28:	2d23      	cmp	r5, #35	; 0x23
    4e2a:	d066      	beq.n	4efa <z_prf+0x116>
    4e2c:	2d00      	cmp	r5, #0
    4e2e:	d0f2      	beq.n	4e16 <z_prf+0x32>
					fzero = true;
    4e30:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    4e34:	f8dd 8018 	ldr.w	r8, [sp, #24]
    4e38:	48a4      	ldr	r0, [pc, #656]	; (50cc <z_prf+0x2e8>)
    4e3a:	f818 5b01 	ldrb.w	r5, [r8], #1
    4e3e:	4629      	mov	r1, r5
    4e40:	f004 fea5 	bl	9b8e <strchr>
    4e44:	2800      	cmp	r0, #0
    4e46:	d1ea      	bne.n	4e1e <z_prf+0x3a>
			if (c == '*') {
    4e48:	2d2a      	cmp	r5, #42	; 0x2a
    4e4a:	d163      	bne.n	4f14 <z_prf+0x130>
				width = va_arg(vargs, int);
    4e4c:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    4e50:	f898 5000 	ldrb.w	r5, [r8]
				if (width < 0) {
    4e54:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    4e56:	9307      	str	r3, [sp, #28]
					width = -width;
    4e58:	bfbf      	itttt	lt
    4e5a:	425b      	neglt	r3, r3
    4e5c:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    4e5e:	2301      	movlt	r3, #1
    4e60:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    4e62:	9b06      	ldr	r3, [sp, #24]
    4e64:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    4e68:	2d2e      	cmp	r5, #46	; 0x2e
    4e6a:	d178      	bne.n	4f5e <z_prf+0x17a>
				if (c == '*') {
    4e6c:	f898 3000 	ldrb.w	r3, [r8]
    4e70:	2b2a      	cmp	r3, #42	; 0x2a
    4e72:	d171      	bne.n	4f58 <z_prf+0x174>
					precision = va_arg(vargs, int);
    4e74:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    4e78:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    4e7c:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    4e80:	4629      	mov	r1, r5
    4e82:	4893      	ldr	r0, [pc, #588]	; (50d0 <z_prf+0x2ec>)
    4e84:	462f      	mov	r7, r5
    4e86:	f004 fe82 	bl	9b8e <strchr>
    4e8a:	2800      	cmp	r0, #0
    4e8c:	d06a      	beq.n	4f64 <z_prf+0x180>
				c = *format++;
    4e8e:	4643      	mov	r3, r8
    4e90:	f813 5b01 	ldrb.w	r5, [r3], #1
				} else if (i == 'h' && c == 'h') {
    4e94:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    4e96:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    4e98:	d107      	bne.n	4eaa <z_prf+0xc6>
    4e9a:	2d68      	cmp	r5, #104	; 0x68
    4e9c:	d105      	bne.n	4eaa <z_prf+0xc6>
					i = 'H';
    4e9e:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    4ea0:	f108 0302 	add.w	r3, r8, #2
    4ea4:	f898 5001 	ldrb.w	r5, [r8, #1]
    4ea8:	9306      	str	r3, [sp, #24]
			switch (c) {
    4eaa:	2d78      	cmp	r5, #120	; 0x78
    4eac:	d808      	bhi.n	4ec0 <z_prf+0xdc>
    4eae:	2d57      	cmp	r5, #87	; 0x57
    4eb0:	d85c      	bhi.n	4f6c <z_prf+0x188>
    4eb2:	2d25      	cmp	r5, #37	; 0x25
    4eb4:	f000 83f3 	beq.w	569e <z_prf+0x8ba>
    4eb8:	f200 80a2 	bhi.w	5000 <z_prf+0x21c>
    4ebc:	2d00      	cmp	r5, #0
    4ebe:	d0aa      	beq.n	4e16 <z_prf+0x32>
				PUTC('%');
    4ec0:	4649      	mov	r1, r9
    4ec2:	2025      	movs	r0, #37	; 0x25
    4ec4:	9b03      	ldr	r3, [sp, #12]
    4ec6:	4798      	blx	r3
    4ec8:	3001      	adds	r0, #1
    4eca:	d0a1      	beq.n	4e10 <z_prf+0x2c>
				PUTC(c);
    4ecc:	4649      	mov	r1, r9
    4ece:	4628      	mov	r0, r5
    4ed0:	9b03      	ldr	r3, [sp, #12]
    4ed2:	4798      	blx	r3
    4ed4:	3001      	adds	r0, #1
    4ed6:	d09b      	beq.n	4e10 <z_prf+0x2c>
				count += 2;
    4ed8:	9b02      	ldr	r3, [sp, #8]
    4eda:	3302      	adds	r3, #2
    4edc:	e3e5      	b.n	56aa <z_prf+0x8c6>
				switch (c) {
    4ede:	2d2d      	cmp	r5, #45	; 0x2d
    4ee0:	d00e      	beq.n	4f00 <z_prf+0x11c>
					fzero = true;
    4ee2:	2d30      	cmp	r5, #48	; 0x30
    4ee4:	9b08      	ldr	r3, [sp, #32]
    4ee6:	bf08      	it	eq
    4ee8:	2301      	moveq	r3, #1
    4eea:	9308      	str	r3, [sp, #32]
    4eec:	e7a0      	b.n	4e30 <z_prf+0x4c>
					fplus = true;
    4eee:	2301      	movs	r3, #1
    4ef0:	9309      	str	r3, [sp, #36]	; 0x24
    4ef2:	e79d      	b.n	4e30 <z_prf+0x4c>
					fspace = true;
    4ef4:	2301      	movs	r3, #1
    4ef6:	930c      	str	r3, [sp, #48]	; 0x30
    4ef8:	e79a      	b.n	4e30 <z_prf+0x4c>
					falt = true;
    4efa:	f04f 0a01 	mov.w	sl, #1
    4efe:	e797      	b.n	4e30 <z_prf+0x4c>
				switch (c) {
    4f00:	2301      	movs	r3, #1
    4f02:	930d      	str	r3, [sp, #52]	; 0x34
    4f04:	e794      	b.n	4e30 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    4f06:	2300      	movs	r3, #0
    4f08:	469a      	mov	sl, r3
    4f0a:	9308      	str	r3, [sp, #32]
    4f0c:	930c      	str	r3, [sp, #48]	; 0x30
    4f0e:	9309      	str	r3, [sp, #36]	; 0x24
    4f10:	930d      	str	r3, [sp, #52]	; 0x34
    4f12:	e78f      	b.n	4e34 <z_prf+0x50>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4f14:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit(c)) {
    4f18:	2b09      	cmp	r3, #9
				width = 0;
    4f1a:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    4f1c:	d8a4      	bhi.n	4e68 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    4f1e:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    4f20:	f8dd 8018 	ldr.w	r8, [sp, #24]
    4f24:	f818 5b01 	ldrb.w	r5, [r8], #1
    4f28:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    4f2c:	2b09      	cmp	r3, #9
    4f2e:	d89b      	bhi.n	4e68 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    4f30:	9b07      	ldr	r3, [sp, #28]
    4f32:	fb02 5503 	mla	r5, r2, r3, r5
    4f36:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    4f3a:	e9cd 8306 	strd	r8, r3, [sp, #24]
    4f3e:	e7ef      	b.n	4f20 <z_prf+0x13c>
    4f40:	4690      	mov	r8, r2
    4f42:	fb01 3404 	mla	r4, r1, r4, r3
    4f46:	3c30      	subs	r4, #48	; 0x30
	while (isdigit(*p)) {
    4f48:	4642      	mov	r2, r8
    4f4a:	f812 3b01 	ldrb.w	r3, [r2], #1
    4f4e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4f52:	2809      	cmp	r0, #9
    4f54:	d9f4      	bls.n	4f40 <z_prf+0x15c>
    4f56:	e791      	b.n	4e7c <z_prf+0x98>
	int i = 0;
    4f58:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    4f5a:	210a      	movs	r1, #10
    4f5c:	e7f4      	b.n	4f48 <z_prf+0x164>
			precision = -1;
    4f5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4f62:	e78d      	b.n	4e80 <z_prf+0x9c>
			i = 0;
    4f64:	4607      	mov	r7, r0
    4f66:	f8cd 8018 	str.w	r8, [sp, #24]
    4f6a:	e79e      	b.n	4eaa <z_prf+0xc6>
    4f6c:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    4f70:	2b20      	cmp	r3, #32
    4f72:	d8a5      	bhi.n	4ec0 <z_prf+0xdc>
    4f74:	a201      	add	r2, pc, #4	; (adr r2, 4f7c <z_prf+0x198>)
    4f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4f7a:	bf00      	nop
    4f7c:	00005603 	.word	0x00005603
    4f80:	00004ec1 	.word	0x00004ec1
    4f84:	00004ec1 	.word	0x00004ec1
    4f88:	00004ec1 	.word	0x00004ec1
    4f8c:	00004ec1 	.word	0x00004ec1
    4f90:	00004ec1 	.word	0x00004ec1
    4f94:	00004ec1 	.word	0x00004ec1
    4f98:	00004ec1 	.word	0x00004ec1
    4f9c:	00004ec1 	.word	0x00004ec1
    4fa0:	00004ec1 	.word	0x00004ec1
    4fa4:	00004ec1 	.word	0x00004ec1
    4fa8:	000050d5 	.word	0x000050d5
    4fac:	000051ab 	.word	0x000051ab
    4fb0:	0000500d 	.word	0x0000500d
    4fb4:	0000500d 	.word	0x0000500d
    4fb8:	0000500d 	.word	0x0000500d
    4fbc:	00004ec1 	.word	0x00004ec1
    4fc0:	000051ab 	.word	0x000051ab
    4fc4:	00004ec1 	.word	0x00004ec1
    4fc8:	00004ec1 	.word	0x00004ec1
    4fcc:	00004ec1 	.word	0x00004ec1
    4fd0:	00004ec1 	.word	0x00004ec1
    4fd4:	0000558f 	.word	0x0000558f
    4fd8:	00005603 	.word	0x00005603
    4fdc:	000055b9 	.word	0x000055b9
    4fe0:	00004ec1 	.word	0x00004ec1
    4fe4:	00004ec1 	.word	0x00004ec1
    4fe8:	000055db 	.word	0x000055db
    4fec:	00004ec1 	.word	0x00004ec1
    4ff0:	00005603 	.word	0x00005603
    4ff4:	00004ec1 	.word	0x00004ec1
    4ff8:	00004ec1 	.word	0x00004ec1
    4ffc:	00005603 	.word	0x00005603
			switch (c) {
    5000:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    5004:	b2db      	uxtb	r3, r3
    5006:	2b02      	cmp	r3, #2
    5008:	f63f af5a 	bhi.w	4ec0 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    500c:	3607      	adds	r6, #7
    500e:	f026 0307 	bic.w	r3, r6, #7
    5012:	4619      	mov	r1, r3
    5014:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    5018:	02d8      	lsls	r0, r3, #11
    501a:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    501e:	02d6      	lsls	r6, r2, #11
    5020:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    5024:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    5026:	9101      	str	r1, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
    5028:	9604      	str	r6, [sp, #16]
	exp = double_temp >> 52 & 0x7ff;
    502a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    502e:	9005      	str	r0, [sp, #20]
	if (sign) {
    5030:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    5034:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    5038:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    503c:	f280 80e5 	bge.w	520a <z_prf+0x426>
		*buf++ = '-';
    5040:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    5042:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    5046:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    504a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    504e:	4299      	cmp	r1, r3
    5050:	f040 80f6 	bne.w	5240 <z_prf+0x45c>
		if (!fract) {
    5054:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5058:	430a      	orrs	r2, r1
    505a:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    505e:	f107 0303 	add.w	r3, r7, #3
    5062:	f040 80e2 	bne.w	522a <z_prf+0x446>
			if (isupper(c)) {
    5066:	2d19      	cmp	r5, #25
    5068:	f200 80d9 	bhi.w	521e <z_prf+0x43a>
				*buf++ = 'I';
    506c:	2249      	movs	r2, #73	; 0x49
    506e:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    5070:	224e      	movs	r2, #78	; 0x4e
    5072:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    5074:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    5076:	2400      	movs	r4, #0
			zero.predot = zero.postdot = zero.trail = 0;
    5078:	46a2      	mov	sl, r4
    507a:	46a3      	mov	fp, r4
		return buf - start;
    507c:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    507e:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    5080:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    5082:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    5084:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5086:	2a00      	cmp	r2, #0
    5088:	f040 827e 	bne.w	5588 <z_prf+0x7a4>
    508c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    508e:	2a00      	cmp	r2, #0
    5090:	f040 827a 	bne.w	5588 <z_prf+0x7a4>
    5094:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    5098:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    509c:	f1d2 0800 	rsbs	r8, r2, #0
    50a0:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    50a4:	eb0b 060a 	add.w	r6, fp, sl
    50a8:	4433      	add	r3, r6
    50aa:	191e      	adds	r6, r3, r4
				if (!isdigit(buf[prefix])) {
    50ac:	ab20      	add	r3, sp, #128	; 0x80
    50ae:	4443      	add	r3, r8
    50b0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    50b4:	3b30      	subs	r3, #48	; 0x30
    50b6:	2b09      	cmp	r3, #9
    50b8:	f200 82ff 	bhi.w	56ba <z_prf+0x8d6>
			} else if (fzero) {
    50bc:	9b08      	ldr	r3, [sp, #32]
    50be:	2b00      	cmp	r3, #0
    50c0:	f000 82fe 	beq.w	56c0 <z_prf+0x8dc>
    50c4:	9b07      	ldr	r3, [sp, #28]
    50c6:	af19      	add	r7, sp, #100	; 0x64
    50c8:	1b9b      	subs	r3, r3, r6
    50ca:	e014      	b.n	50f6 <z_prf+0x312>
    50cc:	0000cf30 	.word	0x0000cf30
    50d0:	0000cf36 	.word	0x0000cf36
				break;
    50d4:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    50d8:	4632      	mov	r2, r6
				break;
    50da:	4644      	mov	r4, r8
				clen = 1;
    50dc:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    50de:	f852 3b04 	ldr.w	r3, [r2], #4
    50e2:	9201      	str	r2, [sp, #4]
    50e4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				break;
    50e8:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    50ea:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    50ee:	2400      	movs	r4, #0
    50f0:	46a2      	mov	sl, r4
    50f2:	46a3      	mov	fp, r4
				zero_head = precision - clen + prefix;
    50f4:	1b9b      	subs	r3, r3, r6
			if (zero_head < 0) {
    50f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    50fa:	199a      	adds	r2, r3, r6
    50fc:	9208      	str	r2, [sp, #32]
    50fe:	9a07      	ldr	r2, [sp, #28]
    5100:	1999      	adds	r1, r3, r6
    5102:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    5104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5106:	b912      	cbnz	r2, 510e <z_prf+0x32a>
    5108:	2d00      	cmp	r5, #0
    510a:	f300 82ee 	bgt.w	56ea <z_prf+0x906>
			while (prefix-- > 0) {
    510e:	eb07 0208 	add.w	r2, r7, r8
    5112:	42ba      	cmp	r2, r7
    5114:	f040 82eb 	bne.w	56ee <z_prf+0x90a>
			while (zero_head-- > 0) {
    5118:	3b01      	subs	r3, #1
    511a:	f080 82f6 	bcs.w	570a <z_prf+0x926>
			clen -= prefix;
    511e:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    5122:	f1bb 0f00 	cmp.w	fp, #0
    5126:	d010      	beq.n	514a <z_prf+0x366>
				c = *cptr;
    5128:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c)) {
    512a:	eb07 0806 	add.w	r8, r7, r6
    512e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5132:	2b09      	cmp	r3, #9
    5134:	eba8 0607 	sub.w	r6, r8, r7
    5138:	f240 82f2 	bls.w	5720 <z_prf+0x93c>
    513c:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    513e:	f1b8 0801 	subs.w	r8, r8, #1
    5142:	f080 82f6 	bcs.w	5732 <z_prf+0x94e>
				clen -= zero.predot;
    5146:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    514a:	f1ba 0f00 	cmp.w	sl, #0
    514e:	d016      	beq.n	517e <z_prf+0x39a>
    5150:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    5154:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    5158:	4649      	mov	r1, r9
    515a:	4658      	mov	r0, fp
    515c:	9b03      	ldr	r3, [sp, #12]
    515e:	4798      	blx	r3
    5160:	3001      	adds	r0, #1
    5162:	f43f ae55 	beq.w	4e10 <z_prf+0x2c>
				} while (c != '.');
    5166:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    516a:	eba8 0607 	sub.w	r6, r8, r7
    516e:	d1f1      	bne.n	5154 <z_prf+0x370>
				while (zero.postdot-- > 0) {
    5170:	46d0      	mov	r8, sl
    5172:	f1b8 0f00 	cmp.w	r8, #0
    5176:	f300 82e5 	bgt.w	5744 <z_prf+0x960>
				clen -= zero.postdot;
    517a:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    517e:	b194      	cbz	r4, 51a6 <z_prf+0x3c2>
				c = *cptr;
    5180:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c) || c == '.') {
    5182:	eb07 0806 	add.w	r8, r7, r6
    5186:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    518a:	2b09      	cmp	r3, #9
    518c:	eba8 0607 	sub.w	r6, r8, r7
    5190:	f240 82e3 	bls.w	575a <z_prf+0x976>
    5194:	282e      	cmp	r0, #46	; 0x2e
    5196:	f000 82e0 	beq.w	575a <z_prf+0x976>
				while (zero.trail-- > 0) {
    519a:	46a0      	mov	r8, r4
    519c:	f1b8 0f00 	cmp.w	r8, #0
    51a0:	f300 82e4 	bgt.w	576c <z_prf+0x988>
				clen -= zero.trail;
    51a4:	1b36      	subs	r6, r6, r4
    51a6:	443e      	add	r6, r7
    51a8:	e2f3      	b.n	5792 <z_prf+0x9ae>
				switch (i) {
    51aa:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    51ac:	1d33      	adds	r3, r6, #4
    51ae:	2d00      	cmp	r5, #0
    51b0:	9301      	str	r3, [sp, #4]
    51b2:	da1c      	bge.n	51ee <z_prf+0x40a>
		*buf++ = '-';
    51b4:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    51b6:	4269      	negs	r1, r5
		*buf++ = '-';
    51b8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		*buf++ = ' ';
    51bc:	f10d 0665 	add.w	r6, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    51c0:	4630      	mov	r0, r6
    51c2:	220a      	movs	r2, #10
    51c4:	f004 fd88 	bl	9cd8 <_to_x>
				if (fplus || fspace || val < 0) {
    51c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    51ca:	4406      	add	r6, r0
    51cc:	a819      	add	r0, sp, #100	; 0x64
    51ce:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    51d0:	2b00      	cmp	r3, #0
    51d2:	f040 826d 	bne.w	56b0 <z_prf+0x8cc>
    51d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    51d8:	2b00      	cmp	r3, #0
    51da:	f040 8269 	bne.w	56b0 <z_prf+0x8cc>
    51de:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    51e2:	2c00      	cmp	r4, #0
    51e4:	da80      	bge.n	50e8 <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    51e6:	2400      	movs	r4, #0
    51e8:	46a2      	mov	sl, r4
    51ea:	46a3      	mov	fp, r4
    51ec:	e766      	b.n	50bc <z_prf+0x2d8>
	} else if (fplus) {
    51ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51f0:	b123      	cbz	r3, 51fc <z_prf+0x418>
		*buf++ = '+';
    51f2:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    51f4:	4629      	mov	r1, r5
    51f6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    51fa:	e7df      	b.n	51bc <z_prf+0x3d8>
	} else if (fspace) {
    51fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    51fe:	b10b      	cbz	r3, 5204 <z_prf+0x420>
		*buf++ = ' ';
    5200:	2320      	movs	r3, #32
    5202:	e7f7      	b.n	51f4 <z_prf+0x410>
    5204:	4629      	mov	r1, r5
    5206:	ae19      	add	r6, sp, #100	; 0x64
    5208:	e7da      	b.n	51c0 <z_prf+0x3dc>
	} else if (fplus) {
    520a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    520c:	b10b      	cbz	r3, 5212 <z_prf+0x42e>
		*buf++ = '+';
    520e:	232b      	movs	r3, #43	; 0x2b
    5210:	e717      	b.n	5042 <z_prf+0x25e>
	} else if (fspace) {
    5212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5214:	b10b      	cbz	r3, 521a <z_prf+0x436>
		*buf++ = ' ';
    5216:	2320      	movs	r3, #32
    5218:	e713      	b.n	5042 <z_prf+0x25e>
    521a:	af19      	add	r7, sp, #100	; 0x64
    521c:	e715      	b.n	504a <z_prf+0x266>
				*buf++ = 'i';
    521e:	2269      	movs	r2, #105	; 0x69
    5220:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    5222:	226e      	movs	r2, #110	; 0x6e
    5224:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    5226:	2266      	movs	r2, #102	; 0x66
    5228:	e725      	b.n	5076 <z_prf+0x292>
			if (isupper(c)) {
    522a:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    522c:	bf99      	ittee	ls
    522e:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    5230:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    5232:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    5234:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    5236:	bf94      	ite	ls
    5238:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    523a:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    523c:	7079      	strb	r1, [r7, #1]
    523e:	e71a      	b.n	5076 <z_prf+0x292>
	if ((exp | fract) != 0) {
    5240:	9b04      	ldr	r3, [sp, #16]
    5242:	9805      	ldr	r0, [sp, #20]
    5244:	430b      	orrs	r3, r1
    5246:	930e      	str	r3, [sp, #56]	; 0x38
    5248:	17cb      	asrs	r3, r1, #31
    524a:	4303      	orrs	r3, r0
		c = 'f';
    524c:	2d46      	cmp	r5, #70	; 0x46
	if ((exp | fract) != 0) {
    524e:	930f      	str	r3, [sp, #60]	; 0x3c
		c = 'f';
    5250:	bf08      	it	eq
    5252:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    5254:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    5258:	4313      	orrs	r3, r2
    525a:	f000 8107 	beq.w	546c <z_prf+0x688>
		if (exp == 0) {
    525e:	2900      	cmp	r1, #0
    5260:	f000 809f 	beq.w	53a2 <z_prf+0x5be>
		fract |= HIGHBIT64;
    5264:	2600      	movs	r6, #0
    5266:	9b15      	ldr	r3, [sp, #84]	; 0x54
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    5268:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    526c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5270:	9315      	str	r3, [sp, #84]	; 0x54
	while (exp <= -3) {
    5272:	f118 0f02 	cmn.w	r8, #2
    5276:	f2c0 80a8 	blt.w	53ca <z_prf+0x5e6>
	while (exp > 0) {
    527a:	f1b8 0f00 	cmp.w	r8, #0
    527e:	f300 80d4 	bgt.w	542a <z_prf+0x646>
		_rlrshift(&fract);
    5282:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    5284:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    5288:	f004 fd4a 	bl	9d20 <_rlrshift>
	while (exp < (0 + 4)) {
    528c:	f1b8 0f04 	cmp.w	r8, #4
    5290:	d1f7      	bne.n	5282 <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    5292:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    5294:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    5298:	bfb8      	it	lt
    529a:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    529c:	2b47      	cmp	r3, #71	; 0x47
    529e:	f040 80ee 	bne.w	547e <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    52a2:	1cf1      	adds	r1, r6, #3
    52a4:	db02      	blt.n	52ac <z_prf+0x4c8>
    52a6:	42b4      	cmp	r4, r6
    52a8:	f280 80e3 	bge.w	5472 <z_prf+0x68e>
			c += 'e' - 'g';
    52ac:	3d02      	subs	r5, #2
    52ae:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    52b0:	2c00      	cmp	r4, #0
    52b2:	f000 80ea 	beq.w	548a <z_prf+0x6a6>
				precision--;
    52b6:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    52b8:	f1ba 0f00 	cmp.w	sl, #0
    52bc:	f040 80e5 	bne.w	548a <z_prf+0x6a6>
    52c0:	2c00      	cmp	r4, #0
    52c2:	bfd4      	ite	le
    52c4:	f04f 0800 	movle.w	r8, #0
    52c8:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    52cc:	2d66      	cmp	r5, #102	; 0x66
    52ce:	f040 80de 	bne.w	548e <z_prf+0x6aa>
		if (exp < 0) {
    52d2:	eb14 0b06 	adds.w	fp, r4, r6
    52d6:	f04f 0566 	mov.w	r5, #102	; 0x66
    52da:	f100 80db 	bmi.w	5494 <z_prf+0x6b0>
	if (exp > 16) {
    52de:	f1bb 0f10 	cmp.w	fp, #16
    52e2:	bfa8      	it	ge
    52e4:	f04f 0b10 	movge.w	fp, #16
    52e8:	2310      	movs	r3, #16
	ltemp = 0x0800000000000000;
    52ea:	2200      	movs	r2, #0
    52ec:	9313      	str	r3, [sp, #76]	; 0x4c
    52ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    52f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    52f6:	f1bb 0b01 	subs.w	fp, fp, #1
    52fa:	f080 80ce 	bcs.w	549a <z_prf+0x6b6>
	fract += ltemp;
    52fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5300:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5302:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5304:	189b      	adds	r3, r3, r2
    5306:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5308:	eb41 0202 	adc.w	r2, r1, r2
    530c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    5310:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    5314:	9310      	str	r3, [sp, #64]	; 0x40
    5316:	2300      	movs	r3, #0
    5318:	9311      	str	r3, [sp, #68]	; 0x44
    531a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    531e:	4313      	orrs	r3, r2
    5320:	d006      	beq.n	5330 <z_prf+0x54c>
		_ldiv5(&fract);
    5322:	a814      	add	r0, sp, #80	; 0x50
    5324:	f004 fd0d 	bl	9d42 <_ldiv5>
		_rlrshift(&fract);
    5328:	a814      	add	r0, sp, #80	; 0x50
    532a:	f004 fcf9 	bl	9d20 <_rlrshift>
		decexp++;
    532e:	3601      	adds	r6, #1
	if (c == 'f') {
    5330:	2d66      	cmp	r5, #102	; 0x66
    5332:	f040 80cf 	bne.w	54d4 <z_prf+0x6f0>
		if (decexp > 0) {
    5336:	2e00      	cmp	r6, #0
    5338:	f340 80b6 	ble.w	54a8 <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    533c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    533e:	2b00      	cmp	r3, #0
    5340:	dd07      	ble.n	5352 <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    5342:	a913      	add	r1, sp, #76	; 0x4c
    5344:	a814      	add	r0, sp, #80	; 0x50
    5346:	f004 fd24 	bl	9d92 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    534a:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    534c:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    5350:	d1f4      	bne.n	533c <z_prf+0x558>
			zp->predot = decexp;
    5352:	46b3      	mov	fp, r6
    5354:	463b      	mov	r3, r7
			decexp = 0;
    5356:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    5358:	f1ba 0f00 	cmp.w	sl, #0
    535c:	d101      	bne.n	5362 <z_prf+0x57e>
    535e:	2c00      	cmp	r4, #0
    5360:	dd15      	ble.n	538e <z_prf+0x5aa>
			*buf++ = '.';
    5362:	222e      	movs	r2, #46	; 0x2e
    5364:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    5368:	2e00      	cmp	r6, #0
    536a:	f000 80ae 	beq.w	54ca <z_prf+0x6e6>
    536e:	2c00      	cmp	r4, #0
    5370:	f340 80ad 	ble.w	54ce <z_prf+0x6ea>
			zp->postdot = -decexp;
    5374:	f1c6 0a00 	rsb	sl, r6, #0
    5378:	45a2      	cmp	sl, r4
    537a:	bfa8      	it	ge
    537c:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    537e:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    5382:	2c00      	cmp	r4, #0
    5384:	dd03      	ble.n	538e <z_prf+0x5aa>
    5386:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5388:	2a00      	cmp	r2, #0
    538a:	f300 8094 	bgt.w	54b6 <z_prf+0x6d2>
	if (prune_zero) {
    538e:	f1b8 0f00 	cmp.w	r8, #0
    5392:	f040 80b4 	bne.w	54fe <z_prf+0x71a>
	*buf = 0;
    5396:	2200      	movs	r2, #0
	return buf - start;
    5398:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    539a:	701a      	strb	r2, [r3, #0]
	return buf - start;
    539c:	1b9b      	subs	r3, r3, r6
    539e:	e671      	b.n	5084 <z_prf+0x2a0>
				exp--;
    53a0:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    53a2:	9b04      	ldr	r3, [sp, #16]
    53a4:	18db      	adds	r3, r3, r3
    53a6:	9304      	str	r3, [sp, #16]
    53a8:	9b05      	ldr	r3, [sp, #20]
    53aa:	415b      	adcs	r3, r3
    53ac:	9305      	str	r3, [sp, #20]
    53ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    53b2:	2a00      	cmp	r2, #0
    53b4:	f173 0300 	sbcs.w	r3, r3, #0
    53b8:	daf2      	bge.n	53a0 <z_prf+0x5bc>
    53ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    53be:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    53c2:	e74f      	b.n	5264 <z_prf+0x480>
			_rlrshift(&fract);
    53c4:	a814      	add	r0, sp, #80	; 0x50
    53c6:	f004 fcab 	bl	9d20 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    53ca:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    53ce:	2300      	movs	r3, #0
    53d0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    53d4:	930b      	str	r3, [sp, #44]	; 0x2c
    53d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    53da:	2900      	cmp	r1, #0
    53dc:	bf08      	it	eq
    53de:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    53e2:	f108 0801 	add.w	r8, r8, #1
    53e6:	d2ed      	bcs.n	53c4 <z_prf+0x5e0>
		fract *= 5U;
    53e8:	2005      	movs	r0, #5
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    53ea:	f04f 0e00 	mov.w	lr, #0
		fract *= 5U;
    53ee:	fba2 2300 	umull	r2, r3, r2, r0
    53f2:	fb00 330c 	mla	r3, r0, ip, r3
    53f6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    53fa:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    53fc:	2100      	movs	r1, #0
    53fe:	f04f 0c00 	mov.w	ip, #0
    5402:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5406:	458c      	cmp	ip, r1
    5408:	bf08      	it	eq
    540a:	459b      	cmpeq	fp, r3
    540c:	d206      	bcs.n	541c <z_prf+0x638>
    540e:	f1be 0f00 	cmp.w	lr, #0
    5412:	f43f af2e 	beq.w	5272 <z_prf+0x48e>
    5416:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    541a:	e72a      	b.n	5272 <z_prf+0x48e>
			fract <<= 1;
    541c:	1892      	adds	r2, r2, r2
			exp--;
    541e:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    5422:	415b      	adcs	r3, r3
			exp--;
    5424:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5428:	e7e8      	b.n	53fc <z_prf+0x618>
		_ldiv5(&fract);
    542a:	a814      	add	r0, sp, #80	; 0x50
    542c:	f004 fc89 	bl	9d42 <_ldiv5>
		exp--;
    5430:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    5434:	f04f 0e00 	mov.w	lr, #0
		exp--;
    5438:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    543c:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    543e:	2300      	movs	r3, #0
    5440:	f04f 0c00 	mov.w	ip, #0
    5444:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5448:	459c      	cmp	ip, r3
    544a:	bf08      	it	eq
    544c:	4583      	cmpeq	fp, r0
    544e:	d206      	bcs.n	545e <z_prf+0x67a>
    5450:	f1be 0f00 	cmp.w	lr, #0
    5454:	f43f af11 	beq.w	527a <z_prf+0x496>
    5458:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    545c:	e70d      	b.n	527a <z_prf+0x496>
			fract <<= 1;
    545e:	1849      	adds	r1, r1, r1
			exp--;
    5460:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    5464:	4140      	adcs	r0, r0
			exp--;
    5466:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    546a:	e7e8      	b.n	543e <z_prf+0x65a>
    546c:	2600      	movs	r6, #0
    546e:	46b0      	mov	r8, r6
    5470:	e707      	b.n	5282 <z_prf+0x49e>
			precision -= decexp;
    5472:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    5474:	f1ba 0f00 	cmp.w	sl, #0
    5478:	d104      	bne.n	5484 <z_prf+0x6a0>
			c = 'f';
    547a:	2566      	movs	r5, #102	; 0x66
    547c:	e720      	b.n	52c0 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    547e:	f04f 0800 	mov.w	r8, #0
    5482:	e723      	b.n	52cc <z_prf+0x4e8>
    5484:	f04f 0800 	mov.w	r8, #0
    5488:	e723      	b.n	52d2 <z_prf+0x4ee>
    548a:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    548e:	f104 0b01 	add.w	fp, r4, #1
    5492:	e724      	b.n	52de <z_prf+0x4fa>
			exp = 0;
    5494:	f04f 0b00 	mov.w	fp, #0
    5498:	e726      	b.n	52e8 <z_prf+0x504>
		_ldiv5(&ltemp);
    549a:	a816      	add	r0, sp, #88	; 0x58
    549c:	f004 fc51 	bl	9d42 <_ldiv5>
		_rlrshift(&ltemp);
    54a0:	a816      	add	r0, sp, #88	; 0x58
    54a2:	f004 fc3d 	bl	9d20 <_rlrshift>
    54a6:	e726      	b.n	52f6 <z_prf+0x512>
			*buf++ = '0';
    54a8:	463b      	mov	r3, r7
    54aa:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    54ac:	f04f 0b00 	mov.w	fp, #0
			*buf++ = '0';
    54b0:	f803 2b01 	strb.w	r2, [r3], #1
    54b4:	e750      	b.n	5358 <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    54b6:	a913      	add	r1, sp, #76	; 0x4c
    54b8:	a814      	add	r0, sp, #80	; 0x50
    54ba:	930a      	str	r3, [sp, #40]	; 0x28
    54bc:	f004 fc69 	bl	9d92 <_get_digit>
    54c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    54c2:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    54c4:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    54c8:	e75b      	b.n	5382 <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    54ca:	46b2      	mov	sl, r6
    54cc:	e759      	b.n	5382 <z_prf+0x59e>
    54ce:	f04f 0a00 	mov.w	sl, #0
    54d2:	e75c      	b.n	538e <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    54d4:	a913      	add	r1, sp, #76	; 0x4c
    54d6:	a814      	add	r0, sp, #80	; 0x50
    54d8:	f004 fc5b 	bl	9d92 <_get_digit>
		if (*buf++ != '0') {
    54dc:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    54de:	7038      	strb	r0, [r7, #0]
			decexp--;
    54e0:	bf18      	it	ne
    54e2:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    54e6:	f1ba 0f00 	cmp.w	sl, #0
    54ea:	d138      	bne.n	555e <z_prf+0x77a>
    54ec:	2c00      	cmp	r4, #0
    54ee:	dc36      	bgt.n	555e <z_prf+0x77a>
		if (*buf++ != '0') {
    54f0:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    54f2:	f1b8 0f00 	cmp.w	r8, #0
    54f6:	d044      	beq.n	5582 <z_prf+0x79e>
			zero.predot = zero.postdot = zero.trail = 0;
    54f8:	f04f 0b00 	mov.w	fp, #0
    54fc:	46da      	mov	sl, fp
		while (*--buf == '0')
    54fe:	4619      	mov	r1, r3
    5500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    5504:	2a30      	cmp	r2, #48	; 0x30
    5506:	d0fa      	beq.n	54fe <z_prf+0x71a>
		if (*buf != '.') {
    5508:	2a2e      	cmp	r2, #46	; 0x2e
    550a:	bf18      	it	ne
    550c:	460b      	movne	r3, r1
    550e:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    5510:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    5514:	2a45      	cmp	r2, #69	; 0x45
    5516:	f47f af3e 	bne.w	5396 <z_prf+0x5b2>
		if (decexp < 0) {
    551a:	2e00      	cmp	r6, #0
			*buf++ = '-';
    551c:	bfb4      	ite	lt
    551e:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    5520:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    5522:	4619      	mov	r1, r3
			decexp = -decexp;
    5524:	bfb8      	it	lt
    5526:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    5528:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    552a:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    552e:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    5530:	dd08      	ble.n	5544 <z_prf+0x760>
			*buf++ = (decexp / 100) + '0';
    5532:	2064      	movs	r0, #100	; 0x64
    5534:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    5538:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    553c:	f102 0530 	add.w	r5, r2, #48	; 0x30
    5540:	1cd9      	adds	r1, r3, #3
    5542:	709d      	strb	r5, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    5544:	200a      	movs	r0, #10
    5546:	fb96 f2f0 	sdiv	r2, r6, r0
    554a:	460b      	mov	r3, r1
		decexp %= 10;
    554c:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    5550:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    5554:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    5556:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    555a:	704e      	strb	r6, [r1, #1]
    555c:	e71b      	b.n	5396 <z_prf+0x5b2>
			*buf++ = '.';
    555e:	222e      	movs	r2, #46	; 0x2e
    5560:	1cbb      	adds	r3, r7, #2
    5562:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    5564:	2c00      	cmp	r4, #0
    5566:	ddc4      	ble.n	54f2 <z_prf+0x70e>
    5568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    556a:	2a00      	cmp	r2, #0
    556c:	ddc1      	ble.n	54f2 <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    556e:	a913      	add	r1, sp, #76	; 0x4c
    5570:	a814      	add	r0, sp, #80	; 0x50
    5572:	930a      	str	r3, [sp, #40]	; 0x28
    5574:	f004 fc0d 	bl	9d92 <_get_digit>
    5578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    557a:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    557c:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    5580:	e7f0      	b.n	5564 <z_prf+0x780>
			zero.predot = zero.postdot = zero.trail = 0;
    5582:	46c3      	mov	fp, r8
    5584:	46c2      	mov	sl, r8
    5586:	e7c3      	b.n	5510 <z_prf+0x72c>
					prefix = 1;
    5588:	f04f 0801 	mov.w	r8, #1
    558c:	e58a      	b.n	50a4 <z_prf+0x2c0>
				switch (i) {
    558e:	4632      	mov	r2, r6
    5590:	f852 3b04 	ldr.w	r3, [r2], #4
    5594:	2f68      	cmp	r7, #104	; 0x68
    5596:	9201      	str	r2, [sp, #4]
    5598:	d006      	beq.n	55a8 <z_prf+0x7c4>
    559a:	2f6c      	cmp	r7, #108	; 0x6c
    559c:	d009      	beq.n	55b2 <z_prf+0x7ce>
    559e:	2f48      	cmp	r7, #72	; 0x48
    55a0:	d107      	bne.n	55b2 <z_prf+0x7ce>
					*va_arg(vargs, char *) = count;
    55a2:	9a02      	ldr	r2, [sp, #8]
    55a4:	701a      	strb	r2, [r3, #0]
					break;
    55a6:	e001      	b.n	55ac <z_prf+0x7c8>
					*va_arg(vargs, short *) = count;
    55a8:	9a02      	ldr	r2, [sp, #8]
    55aa:	801a      	strh	r2, [r3, #0]
				continue;
    55ac:	9e01      	ldr	r6, [sp, #4]
    55ae:	9a06      	ldr	r2, [sp, #24]
    55b0:	e420      	b.n	4df4 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    55b2:	9a02      	ldr	r2, [sp, #8]
    55b4:	601a      	str	r2, [r3, #0]
					break;
    55b6:	e7f9      	b.n	55ac <z_prf+0x7c8>
		*buf++ = '0';
    55b8:	f647 0330 	movw	r3, #30768	; 0x7830
    55bc:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    55c0:	4633      	mov	r3, r6
    55c2:	f853 1b04 	ldr.w	r1, [r3], #4
    55c6:	2210      	movs	r2, #16
    55c8:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    55cc:	9301      	str	r3, [sp, #4]
    55ce:	f004 fb83 	bl	9cd8 <_to_x>
				prefix = 2;
    55d2:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    55d6:	1c86      	adds	r6, r0, #2
				break;
    55d8:	e603      	b.n	51e2 <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    55da:	4633      	mov	r3, r6
					precision = INT_MAX;
    55dc:	2c00      	cmp	r4, #0
    55de:	bfb8      	it	lt
    55e0:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    55e4:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    55e6:	f853 7b04 	ldr.w	r7, [r3], #4
    55ea:	9301      	str	r3, [sp, #4]
				for (clen = 0; clen < precision; clen++) {
    55ec:	42b4      	cmp	r4, r6
    55ee:	d103      	bne.n	55f8 <z_prf+0x814>
    55f0:	4626      	mov	r6, r4
    55f2:	2400      	movs	r4, #0
    55f4:	46a0      	mov	r8, r4
    55f6:	e578      	b.n	50ea <z_prf+0x306>
					if (cptr[clen] == '\0') {
    55f8:	5dbb      	ldrb	r3, [r7, r6]
    55fa:	2b00      	cmp	r3, #0
    55fc:	d05b      	beq.n	56b6 <z_prf+0x8d2>
				for (clen = 0; clen < precision; clen++) {
    55fe:	3601      	adds	r6, #1
    5600:	e7f4      	b.n	55ec <z_prf+0x808>
				switch (i) {
    5602:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    5604:	2d6f      	cmp	r5, #111	; 0x6f
    5606:	6831      	ldr	r1, [r6, #0]
    5608:	9301      	str	r3, [sp, #4]
    560a:	d119      	bne.n	5640 <z_prf+0x85c>
	if (alt_form) {
    560c:	f1ba 0f00 	cmp.w	sl, #0
    5610:	d008      	beq.n	5624 <z_prf+0x840>
		*buf++ = '0';
    5612:	2330      	movs	r3, #48	; 0x30
    5614:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    5618:	b979      	cbnz	r1, 563a <z_prf+0x856>
			prefix = 0;
    561a:	4688      	mov	r8, r1
			return 1;
    561c:	2601      	movs	r6, #1
			*buf++ = 0;
    561e:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			return 1;
    5622:	e5de      	b.n	51e2 <z_prf+0x3fe>
    5624:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    5626:	4628      	mov	r0, r5
    5628:	2208      	movs	r2, #8
    562a:	f004 fb55 	bl	9cd8 <_to_x>
    562e:	ae19      	add	r6, sp, #100	; 0x64
    5630:	1bad      	subs	r5, r5, r6
    5632:	182e      	adds	r6, r5, r0
			prefix = 0;
    5634:	f04f 0800 	mov.w	r8, #0
    5638:	e5d3      	b.n	51e2 <z_prf+0x3fe>
		*buf++ = '0';
    563a:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    563e:	e7f2      	b.n	5626 <z_prf+0x842>
				} else if (c == 'u') {
    5640:	2d75      	cmp	r5, #117	; 0x75
    5642:	d105      	bne.n	5650 <z_prf+0x86c>
	return _to_x(buf, value, 10);
    5644:	220a      	movs	r2, #10
    5646:	a819      	add	r0, sp, #100	; 0x64
    5648:	f004 fb46 	bl	9cd8 <_to_x>
    564c:	4606      	mov	r6, r0
    564e:	e7f1      	b.n	5634 <z_prf+0x850>
	if (alt_form) {
    5650:	f1ba 0f00 	cmp.w	sl, #0
    5654:	d011      	beq.n	567a <z_prf+0x896>
		*buf++ = '0';
    5656:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    565a:	f10d 0766 	add.w	r7, sp, #102	; 0x66
		*buf++ = '0';
    565e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    5662:	2210      	movs	r2, #16
    5664:	4638      	mov	r0, r7
    5666:	f004 fb37 	bl	9cd8 <_to_x>
	if (prefix == 'X') {
    566a:	2d58      	cmp	r5, #88	; 0x58
    566c:	d007      	beq.n	567e <z_prf+0x89a>
	return len + (buf - buf0);
    566e:	ae19      	add	r6, sp, #100	; 0x64
    5670:	1bbf      	subs	r7, r7, r6
    5672:	183e      	adds	r6, r7, r0
						prefix = 2;
    5674:	ea4f 084a 	mov.w	r8, sl, lsl #1
    5678:	e5b3      	b.n	51e2 <z_prf+0x3fe>
    567a:	af19      	add	r7, sp, #100	; 0x64
    567c:	e7f1      	b.n	5662 <z_prf+0x87e>
    567e:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    5680:	f812 3b01 	ldrb.w	r3, [r2], #1
    5684:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    5688:	2919      	cmp	r1, #25
    568a:	d803      	bhi.n	5694 <z_prf+0x8b0>
			*buf += 'A' - 'a';
    568c:	3b20      	subs	r3, #32
    568e:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    5692:	e7f5      	b.n	5680 <z_prf+0x89c>
    5694:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    5698:	2b00      	cmp	r3, #0
    569a:	d1f1      	bne.n	5680 <z_prf+0x89c>
    569c:	e7e7      	b.n	566e <z_prf+0x88a>
				PUTC('%');
    569e:	4649      	mov	r1, r9
    56a0:	4628      	mov	r0, r5
    56a2:	f7ff bbb0 	b.w	4e06 <z_prf+0x22>
				count++;
    56a6:	9b02      	ldr	r3, [sp, #8]
    56a8:	3301      	adds	r3, #1
				continue;
    56aa:	e9cd 6301 	strd	r6, r3, [sp, #4]
    56ae:	e77d      	b.n	55ac <z_prf+0x7c8>
					prefix = 1;
    56b0:	f04f 0801 	mov.w	r8, #1
    56b4:	e595      	b.n	51e2 <z_prf+0x3fe>
    56b6:	461c      	mov	r4, r3
    56b8:	e79c      	b.n	55f4 <z_prf+0x810>
				zero_head = 0;
    56ba:	2300      	movs	r3, #0
			cptr = buf;
    56bc:	af19      	add	r7, sp, #100	; 0x64
    56be:	e51c      	b.n	50fa <z_prf+0x316>
				zero_head = 0;
    56c0:	9b08      	ldr	r3, [sp, #32]
    56c2:	af19      	add	r7, sp, #100	; 0x64
    56c4:	e519      	b.n	50fa <z_prf+0x316>
    56c6:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    56c8:	4649      	mov	r1, r9
    56ca:	9b03      	ldr	r3, [sp, #12]
    56cc:	2020      	movs	r0, #32
    56ce:	9207      	str	r2, [sp, #28]
    56d0:	4798      	blx	r3
    56d2:	3001      	adds	r0, #1
    56d4:	9a07      	ldr	r2, [sp, #28]
    56d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56d8:	f43f ab9a 	beq.w	4e10 <z_prf+0x2c>
				while (width-- > 0) {
    56dc:	3a01      	subs	r2, #1
    56de:	d2f2      	bcs.n	56c6 <z_prf+0x8e2>
				count += width;
    56e0:	9902      	ldr	r1, [sp, #8]
    56e2:	4429      	add	r1, r5
    56e4:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    56e6:	4615      	mov	r5, r2
    56e8:	e511      	b.n	510e <z_prf+0x32a>
    56ea:	462a      	mov	r2, r5
    56ec:	e7f6      	b.n	56dc <z_prf+0x8f8>
    56ee:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    56f0:	4649      	mov	r1, r9
    56f2:	9b03      	ldr	r3, [sp, #12]
    56f4:	f817 0b01 	ldrb.w	r0, [r7], #1
    56f8:	9207      	str	r2, [sp, #28]
    56fa:	4798      	blx	r3
    56fc:	3001      	adds	r0, #1
    56fe:	9a07      	ldr	r2, [sp, #28]
    5700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5702:	f47f ad06 	bne.w	5112 <z_prf+0x32e>
    5706:	f7ff bb83 	b.w	4e10 <z_prf+0x2c>
    570a:	9307      	str	r3, [sp, #28]
				PUTC('0');
    570c:	4649      	mov	r1, r9
    570e:	9b03      	ldr	r3, [sp, #12]
    5710:	2030      	movs	r0, #48	; 0x30
    5712:	4798      	blx	r3
    5714:	3001      	adds	r0, #1
    5716:	9b07      	ldr	r3, [sp, #28]
    5718:	f47f acfe 	bne.w	5118 <z_prf+0x334>
    571c:	f7ff bb78 	b.w	4e10 <z_prf+0x2c>
					PUTC(c);
    5720:	4649      	mov	r1, r9
    5722:	9b03      	ldr	r3, [sp, #12]
    5724:	4798      	blx	r3
    5726:	3001      	adds	r0, #1
    5728:	f43f ab72 	beq.w	4e10 <z_prf+0x2c>
					c = *++cptr;
    572c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    5730:	e4fd      	b.n	512e <z_prf+0x34a>
					PUTC('0');
    5732:	4649      	mov	r1, r9
    5734:	2030      	movs	r0, #48	; 0x30
    5736:	9b03      	ldr	r3, [sp, #12]
    5738:	4798      	blx	r3
    573a:	3001      	adds	r0, #1
    573c:	f47f acff 	bne.w	513e <z_prf+0x35a>
    5740:	f7ff bb66 	b.w	4e10 <z_prf+0x2c>
					PUTC('0');
    5744:	4649      	mov	r1, r9
    5746:	2030      	movs	r0, #48	; 0x30
    5748:	9b03      	ldr	r3, [sp, #12]
    574a:	4798      	blx	r3
    574c:	3001      	adds	r0, #1
    574e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5752:	f47f ad0e 	bne.w	5172 <z_prf+0x38e>
    5756:	f7ff bb5b 	b.w	4e10 <z_prf+0x2c>
					PUTC(c);
    575a:	4649      	mov	r1, r9
    575c:	9b03      	ldr	r3, [sp, #12]
    575e:	4798      	blx	r3
    5760:	3001      	adds	r0, #1
    5762:	f43f ab55 	beq.w	4e10 <z_prf+0x2c>
					c = *++cptr;
    5766:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    576a:	e50c      	b.n	5186 <z_prf+0x3a2>
					PUTC('0');
    576c:	4649      	mov	r1, r9
    576e:	2030      	movs	r0, #48	; 0x30
    5770:	9b03      	ldr	r3, [sp, #12]
    5772:	4798      	blx	r3
    5774:	3001      	adds	r0, #1
    5776:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    577a:	f47f ad0f 	bne.w	519c <z_prf+0x3b8>
    577e:	f7ff bb47 	b.w	4e10 <z_prf+0x2c>
				PUTC(*cptr++);
    5782:	4649      	mov	r1, r9
    5784:	f817 0b01 	ldrb.w	r0, [r7], #1
    5788:	9b03      	ldr	r3, [sp, #12]
    578a:	4798      	blx	r3
    578c:	3001      	adds	r0, #1
    578e:	f43f ab3f 	beq.w	4e10 <z_prf+0x2c>
			while (clen-- > 0) {
    5792:	1bf3      	subs	r3, r6, r7
    5794:	2b00      	cmp	r3, #0
    5796:	dcf4      	bgt.n	5782 <z_prf+0x99e>
			count += clen;
    5798:	9b02      	ldr	r3, [sp, #8]
    579a:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    579c:	2d00      	cmp	r5, #0
			count += clen;
    579e:	4413      	add	r3, r2
    57a0:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    57a2:	f77f af03 	ble.w	55ac <z_prf+0x7c8>
    57a6:	462c      	mov	r4, r5
    57a8:	e006      	b.n	57b8 <z_prf+0x9d4>
					PUTC(' ');
    57aa:	4649      	mov	r1, r9
    57ac:	2020      	movs	r0, #32
    57ae:	9b03      	ldr	r3, [sp, #12]
    57b0:	4798      	blx	r3
    57b2:	3001      	adds	r0, #1
    57b4:	f43f ab2c 	beq.w	4e10 <z_prf+0x2c>
				while (width-- > 0) {
    57b8:	3c01      	subs	r4, #1
    57ba:	d2f6      	bcs.n	57aa <z_prf+0x9c6>
				count += width;
    57bc:	9b02      	ldr	r3, [sp, #8]
    57be:	442b      	add	r3, r5
    57c0:	9302      	str	r3, [sp, #8]
    57c2:	e6f3      	b.n	55ac <z_prf+0x7c8>

000057c4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    57c4:	4b01      	ldr	r3, [pc, #4]	; (57cc <__stdout_hook_install+0x8>)
    57c6:	6018      	str	r0, [r3, #0]
}
    57c8:	4770      	bx	lr
    57ca:	bf00      	nop
    57cc:	2000009c 	.word	0x2000009c

000057d0 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    57d0:	b40e      	push	{r1, r2, r3}
    57d2:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    57d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    57d8:	ab05      	add	r3, sp, #20
    57da:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    57de:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    57e0:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    57e2:	4806      	ldr	r0, [pc, #24]	; (57fc <sprintf+0x2c>)
    57e4:	a902      	add	r1, sp, #8
	va_start(vargs, format);
    57e6:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    57e8:	f7ff fafc 	bl	4de4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    57ec:	2200      	movs	r2, #0
    57ee:	9b02      	ldr	r3, [sp, #8]
    57f0:	701a      	strb	r2, [r3, #0]
	return r;
}
    57f2:	b004      	add	sp, #16
    57f4:	f85d eb04 	ldr.w	lr, [sp], #4
    57f8:	b003      	add	sp, #12
    57fa:	4770      	bx	lr
    57fc:	00009dc7 	.word	0x00009dc7

00005800 <gmtime_r>:
 * due to time zone, leap seconds, or a different epoch must be
 * applied to @p time before invoking this function.
 */
struct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,
		    struct tm *_MLIBC_RESTRICT tp)
{
    5800:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	time_t z = *timep;
    5804:	e9d0 6700 	ldrd	r6, r7, [r0]
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
    5808:	2e00      	cmp	r6, #0
    580a:	f177 0300 	sbcs.w	r3, r7, #0
{
    580e:	468a      	mov	sl, r1
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
    5810:	f280 80a8 	bge.w	5964 <gmtime_r+0x164>
    5814:	2300      	movs	r3, #0
    5816:	4863      	ldr	r0, [pc, #396]	; (59a4 <gmtime_r+0x1a4>)
    5818:	4a63      	ldr	r2, [pc, #396]	; (59a8 <gmtime_r+0x1a8>)
    581a:	1830      	adds	r0, r6, r0
    581c:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
    5820:	f7fa fc92 	bl	148 <__aeabi_ldivmod>
	unsigned int rem = z - days * 86400;
    5824:	4b61      	ldr	r3, [pc, #388]	; (59ac <gmtime_r+0x1ac>)
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
    5826:	4604      	mov	r4, r0
	unsigned int rem = z - days * 86400;
    5828:	fb03 6600 	mla	r6, r3, r0, r6
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
    582c:	460d      	mov	r5, r1

	*tp = (struct tm){ 0 };
    582e:	2224      	movs	r2, #36	; 0x24
    5830:	2100      	movs	r1, #0
    5832:	4650      	mov	r0, sl
    5834:	f004 fa2d 	bl	9c92 <memset>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
    5838:	f06f 0203 	mvn.w	r2, #3
    583c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5840:	4294      	cmp	r4, r2
    5842:	eb75 0303 	sbcs.w	r3, r5, r3
    5846:	f04f 0207 	mov.w	r2, #7
    584a:	f04f 0300 	mov.w	r3, #0
    584e:	f2c0 808e 	blt.w	596e <gmtime_r+0x16e>
    5852:	1d20      	adds	r0, r4, #4
    5854:	f145 0100 	adc.w	r1, r5, #0
    5858:	f7fa fc76 	bl	148 <__aeabi_ldivmod>
	z += 719468;
    585c:	4b54      	ldr	r3, [pc, #336]	; (59b0 <gmtime_r+0x1b0>)
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
    585e:	f8ca 2018 	str.w	r2, [sl, #24]
	z += 719468;
    5862:	eb14 0803 	adds.w	r8, r4, r3
    5866:	f04f 0300 	mov.w	r3, #0
    586a:	eb45 0903 	adc.w	r9, r5, r3
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
    586e:	f1b8 0f00 	cmp.w	r8, #0
    5872:	f179 0300 	sbcs.w	r3, r9, #0
    5876:	f280 8081 	bge.w	597c <gmtime_r+0x17c>
    587a:	2100      	movs	r1, #0
    587c:	2300      	movs	r3, #0
    587e:	484d      	ldr	r0, [pc, #308]	; (59b4 <gmtime_r+0x1b4>)
    5880:	4a4d      	ldr	r2, [pc, #308]	; (59b8 <gmtime_r+0x1b8>)
    5882:	1820      	adds	r0, r4, r0
    5884:	eb45 0101 	adc.w	r1, r5, r1
    5888:	f7fa fc5e 	bl	148 <__aeabi_ldivmod>
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
    588c:	f648 62ac 	movw	r2, #36524	; 0x8eac
    5890:	f240 55b4 	movw	r5, #1460	; 0x5b4
	unsigned int doe = (z - era * (bigint_type)146097);
    5894:	4b49      	ldr	r3, [pc, #292]	; (59bc <gmtime_r+0x1bc>)
	bigint_type y = (time_t)yoe + era * 400;
    5896:	f44f 7cc8 	mov.w	ip, #400	; 0x190
	unsigned int doe = (z - era * (bigint_type)146097);
    589a:	fb03 8800 	mla	r8, r3, r0, r8
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
    589e:	fbb8 f2f2 	udiv	r2, r8, r2
    58a2:	fbb8 f3f5 	udiv	r3, r8, r5
    58a6:	4442      	add	r2, r8
    58a8:	1ad2      	subs	r2, r2, r3
    58aa:	4b45      	ldr	r3, [pc, #276]	; (59c0 <gmtime_r+0x1c0>)
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
    58ac:	460f      	mov	r7, r1
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
    58ae:	fbb8 f3f3 	udiv	r3, r8, r3
    58b2:	1ad2      	subs	r2, r2, r3
    58b4:	f240 136d 	movw	r3, #365	; 0x16d
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
    58b8:	f04f 0e64 	mov.w	lr, #100	; 0x64
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
    58bc:	fbb2 f4f3 	udiv	r4, r2, r3
	bigint_type y = (time_t)yoe + era * 400;
    58c0:	fba0 010c 	umull	r0, r1, r0, ip
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
    58c4:	fbb2 f5f5 	udiv	r5, r2, r5
	bigint_type y = (time_t)yoe + era * 400;
    58c8:	fb0c 1107 	mla	r1, ip, r7, r1
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
    58cc:	fbb4 f7fe 	udiv	r7, r4, lr
	bigint_type y = (time_t)yoe + era * 400;
    58d0:	1900      	adds	r0, r0, r4
    58d2:	f141 0100 	adc.w	r1, r1, #0
    58d6:	e9cd 0100 	strd	r0, r1, [sp]
	unsigned int mp = (5U * doy + 2U) / 153U;
    58da:	2199      	movs	r1, #153	; 0x99
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
    58dc:	1b7d      	subs	r5, r7, r5
    58de:	44a8      	add	r8, r5
    58e0:	fb03 8314 	mls	r3, r3, r4, r8
	unsigned int mp = (5U * doy + 2U) / 153U;
    58e4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    58e8:	f10c 0c02 	add.w	ip, ip, #2
    58ec:	fbbc f5f1 	udiv	r5, ip, r1
	unsigned int d = doy - (153U * mp + 2U) / 5U + 1U;
    58f0:	f04f 0905 	mov.w	r9, #5
    58f4:	4369      	muls	r1, r5
    58f6:	3102      	adds	r1, #2
    58f8:	fbb1 f1f9 	udiv	r1, r1, r9
    58fc:	f103 0801 	add.w	r8, r3, #1
    5900:	eba8 0101 	sub.w	r1, r8, r1
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
    5904:	f240 58f9 	movw	r8, #1529	; 0x5f9
    5908:	45c4      	cmp	ip, r8
    590a:	bf94      	ite	ls
    590c:	f04f 0c03 	movls.w	ip, #3
    5910:	f06f 0c08 	mvnhi.w	ip, #8
	tp->tm_year = y + (m <= 2) - 1900;
    5914:	9800      	ldr	r0, [sp, #0]
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
    5916:	4465      	add	r5, ip
	tp->tm_year = y + (m <= 2) - 1900;
    5918:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
    591c:	2d02      	cmp	r5, #2
    591e:	bf98      	it	ls
    5920:	3001      	addls	r0, #1
	tp->tm_mon = m - 1;
    5922:	3d01      	subs	r5, #1
	if (doy >= 306U) {
    5924:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
	tp->tm_mday = d;
    5928:	e9ca 1503 	strd	r1, r5, [sl, #12]
	tp->tm_year = y + (m <= 2) - 1900;
    592c:	f8ca 0014 	str.w	r0, [sl, #20]
	if (doy >= 306U) {
    5930:	d329      	bcc.n	5986 <gmtime_r+0x186>
		tp->tm_yday = doy - 306U;
    5932:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132

	time_civil_from_days(days, tp);

	tp->tm_hour = rem / 60U / 60U;
    5936:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
    593a:	f8ca 301c 	str.w	r3, [sl, #28]
	tp->tm_hour = rem / 60U / 60U;
    593e:	fbb6 f3f2 	udiv	r3, r6, r2
	rem -= tp->tm_hour * 60 * 60;
    5942:	fb02 6613 	mls	r6, r2, r3, r6
	tp->tm_min = rem / 60;
    5946:	223c      	movs	r2, #60	; 0x3c
	tp->tm_hour = rem / 60U / 60U;
    5948:	f8ca 3008 	str.w	r3, [sl, #8]
	tp->tm_min = rem / 60;
    594c:	fbb6 f3f2 	udiv	r3, r6, r2
	tp->tm_sec = rem - tp->tm_min * 60;

	return tp;
}
    5950:	4650      	mov	r0, sl
	tp->tm_sec = rem - tp->tm_min * 60;
    5952:	fb02 6613 	mls	r6, r2, r3, r6
	tp->tm_min = rem / 60;
    5956:	f8ca 3004 	str.w	r3, [sl, #4]
	tp->tm_sec = rem - tp->tm_min * 60;
    595a:	f8ca 6000 	str.w	r6, [sl]
}
    595e:	b002      	add	sp, #8
    5960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
    5964:	2300      	movs	r3, #0
    5966:	4630      	mov	r0, r6
    5968:	4639      	mov	r1, r7
    596a:	4a0f      	ldr	r2, [pc, #60]	; (59a8 <gmtime_r+0x1a8>)
    596c:	e758      	b.n	5820 <gmtime_r+0x20>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
    596e:	1d60      	adds	r0, r4, #5
    5970:	f145 0100 	adc.w	r1, r5, #0
    5974:	f7fa fbe8 	bl	148 <__aeabi_ldivmod>
    5978:	3206      	adds	r2, #6
    597a:	e76f      	b.n	585c <gmtime_r+0x5c>
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
    597c:	2300      	movs	r3, #0
    597e:	4640      	mov	r0, r8
    5980:	4649      	mov	r1, r9
    5982:	4a0d      	ldr	r2, [pc, #52]	; (59b8 <gmtime_r+0x1b8>)
    5984:	e780      	b.n	5888 <gmtime_r+0x88>
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
    5986:	07a1      	lsls	r1, r4, #30
    5988:	d102      	bne.n	5990 <gmtime_r+0x190>
    598a:	fb0e 4417 	mls	r4, lr, r7, r4
    598e:	b93c      	cbnz	r4, 59a0 <gmtime_r+0x1a0>
    5990:	f5b2 7fb6 	cmp.w	r2, #364	; 0x16c
    5994:	bf8c      	ite	hi
    5996:	2200      	movhi	r2, #0
    5998:	2201      	movls	r2, #1
    599a:	333b      	adds	r3, #59	; 0x3b
    599c:	4413      	add	r3, r2
    599e:	e7ca      	b.n	5936 <gmtime_r+0x136>
    59a0:	2201      	movs	r2, #1
    59a2:	e7fa      	b.n	599a <gmtime_r+0x19a>
    59a4:	fffeae81 	.word	0xfffeae81
    59a8:	00015180 	.word	0x00015180
    59ac:	fffeae80 	.word	0xfffeae80
    59b0:	000afa6c 	.word	0x000afa6c
    59b4:	0008bfbc 	.word	0x0008bfbc
    59b8:	00023ab1 	.word	0x00023ab1
    59bc:	fffdc54f 	.word	0xfffdc54f
    59c0:	00023ab0 	.word	0x00023ab0

000059c4 <z_impl_clock_gettime>:
	switch (clock_id) {
    59c4:	2801      	cmp	r0, #1
{
    59c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59ca:	460c      	mov	r4, r1
	switch (clock_id) {
    59cc:	d009      	beq.n	59e2 <z_impl_clock_gettime+0x1e>
    59ce:	2804      	cmp	r0, #4
    59d0:	d03e      	beq.n	5a50 <z_impl_clock_gettime+0x8c>
    59d2:	f000 fca3 	bl	631c <z_impl_z_errno>
		errno = EINVAL;
    59d6:	2316      	movs	r3, #22
    59d8:	6003      	str	r3, [r0, #0]
    59da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    59de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		base = rt_clock_base;
    59e2:	4b1d      	ldr	r3, [pc, #116]	; (5a58 <z_impl_clock_gettime+0x94>)
    59e4:	689d      	ldr	r5, [r3, #8]
    59e6:	e9d3 6700 	ldrd	r6, r7, [r3]
	return z_impl_k_uptime_ticks();
    59ea:	f004 fd2b 	bl	a444 <z_impl_k_uptime_ticks>
    59ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    59f2:	460a      	mov	r2, r1
    59f4:	fba0 0103 	umull	r0, r1, r0, r3
    59f8:	fb03 1102 	mla	r1, r3, r2, r1
    59fc:	ea4f 38d0 	mov.w	r8, r0, lsr #15
    5a00:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
    5a04:	ea4f 39d1 	mov.w	r9, r1, lsr #15
	ts->tv_sec = (s32_t) (elapsed_msecs / MSEC_PER_SEC);
    5a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a0c:	2300      	movs	r3, #0
    5a0e:	4640      	mov	r0, r8
    5a10:	4649      	mov	r1, r9
    5a12:	f7fa fbe9 	bl	1e8 <__aeabi_uldivmod>
	ts->tv_sec += base.tv_sec;
    5a16:	1836      	adds	r6, r6, r0
    5a18:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	ts->tv_nsec = (s32_t) ((elapsed_msecs % MSEC_PER_SEC) *
    5a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a20:	2300      	movs	r3, #0
    5a22:	4640      	mov	r0, r8
    5a24:	4649      	mov	r1, r9
	ts->tv_sec += base.tv_sec;
    5a26:	e9c4 6700 	strd	r6, r7, [r4]
	ts->tv_nsec = (s32_t) ((elapsed_msecs % MSEC_PER_SEC) *
    5a2a:	f7fa fbdd 	bl	1e8 <__aeabi_uldivmod>
	ts->tv_nsec += base.tv_nsec;
    5a2e:	4b0b      	ldr	r3, [pc, #44]	; (5a5c <z_impl_clock_gettime+0x98>)
    5a30:	fb03 5202 	mla	r2, r3, r2, r5
	if (ts->tv_nsec >= NSEC_PER_SEC) {
    5a34:	4b0a      	ldr	r3, [pc, #40]	; (5a60 <z_impl_clock_gettime+0x9c>)
	ts->tv_nsec += base.tv_nsec;
    5a36:	60a2      	str	r2, [r4, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
    5a38:	429a      	cmp	r2, r3
    5a3a:	d907      	bls.n	5a4c <z_impl_clock_gettime+0x88>
		ts->tv_sec++;
    5a3c:	1c71      	adds	r1, r6, #1
    5a3e:	f147 0300 	adc.w	r3, r7, #0
    5a42:	e9c4 1300 	strd	r1, r3, [r4]
		ts->tv_nsec -= NSEC_PER_SEC;
    5a46:	4b07      	ldr	r3, [pc, #28]	; (5a64 <z_impl_clock_gettime+0xa0>)
    5a48:	4413      	add	r3, r2
    5a4a:	60a3      	str	r3, [r4, #8]
	return 0;
    5a4c:	2000      	movs	r0, #0
    5a4e:	e7c6      	b.n	59de <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
    5a50:	2500      	movs	r5, #0
    5a52:	2600      	movs	r6, #0
    5a54:	2700      	movs	r7, #0
    5a56:	e7c8      	b.n	59ea <z_impl_clock_gettime+0x26>
    5a58:	200002e8 	.word	0x200002e8
    5a5c:	000f4240 	.word	0x000f4240
    5a60:	3b9ac9ff 	.word	0x3b9ac9ff
    5a64:	c4653600 	.word	0xc4653600

00005a68 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    5a68:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    5a6a:	4b09      	ldr	r3, [pc, #36]	; (5a90 <gpio_nrfx_init+0x28>)
    5a6c:	781a      	ldrb	r2, [r3, #0]
    5a6e:	b96a      	cbnz	r2, 5a8c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    5a70:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5a72:	200d      	movs	r0, #13
		gpio_initialized = true;
    5a74:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5a76:	2105      	movs	r1, #5
    5a78:	f7fe fb8c 	bl	4194 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    5a7c:	200d      	movs	r0, #13
    5a7e:	f7fe fb79 	bl	4174 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    5a82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5a86:	4b03      	ldr	r3, [pc, #12]	; (5a94 <gpio_nrfx_init+0x2c>)
    5a88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    5a8c:	2000      	movs	r0, #0
    5a8e:	bd08      	pop	{r3, pc}
    5a90:	200011fa 	.word	0x200011fa
    5a94:	5000d000 	.word	0x5000d000

00005a98 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5a98:	4b29      	ldr	r3, [pc, #164]	; (5b40 <gpio_nrfx_config+0xa8>)
{
    5a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a9c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5a9e:	4829      	ldr	r0, [pc, #164]	; (5b44 <gpio_nrfx_config+0xac>)
    5aa0:	4013      	ands	r3, r2
    5aa2:	4283      	cmp	r3, r0
    5aa4:	d03d      	beq.n	5b22 <gpio_nrfx_config+0x8a>
    5aa6:	d80d      	bhi.n	5ac4 <gpio_nrfx_config+0x2c>
    5aa8:	2b06      	cmp	r3, #6
    5aaa:	d015      	beq.n	5ad8 <gpio_nrfx_config+0x40>
    5aac:	d805      	bhi.n	5aba <gpio_nrfx_config+0x22>
    5aae:	b19b      	cbz	r3, 5ad8 <gpio_nrfx_config+0x40>
    5ab0:	2b02      	cmp	r3, #2
    5ab2:	d038      	beq.n	5b26 <gpio_nrfx_config+0x8e>
    5ab4:	f06f 0015 	mvn.w	r0, #21
    5ab8:	e032      	b.n	5b20 <gpio_nrfx_config+0x88>
    5aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5abe:	d1f9      	bne.n	5ab4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    5ac0:	2301      	movs	r3, #1
    5ac2:	e009      	b.n	5ad8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5ac4:	4820      	ldr	r0, [pc, #128]	; (5b48 <gpio_nrfx_config+0xb0>)
    5ac6:	4283      	cmp	r3, r0
    5ac8:	d02f      	beq.n	5b2a <gpio_nrfx_config+0x92>
    5aca:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    5ace:	d02e      	beq.n	5b2e <gpio_nrfx_config+0x96>
    5ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    5ad4:	d1ee      	bne.n	5ab4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    5ad6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    5ad8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    5ada:	bf4c      	ite	mi
    5adc:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    5ade:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    5ae2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    5ae6:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    5ae8:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    5aec:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    5af0:	d506      	bpl.n	5b00 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    5af2:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5af6:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    5af8:	d01b      	beq.n	5b32 <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
    5afa:	2201      	movs	r2, #1
    5afc:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    5afe:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    5b00:	7a32      	ldrb	r2, [r6, #8]
    5b02:	f001 011f 	and.w	r1, r1, #31
    5b06:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    5b0a:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    5b0e:	2000      	movs	r0, #0
    5b10:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    5b14:	4a0d      	ldr	r2, [pc, #52]	; (5b4c <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    5b16:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    5b1a:	3180      	adds	r1, #128	; 0x80
    5b1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    5b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    5b22:	2307      	movs	r3, #7
    5b24:	e7d8      	b.n	5ad8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    5b26:	2304      	movs	r3, #4
    5b28:	e7d6      	b.n	5ad8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    5b2a:	2305      	movs	r3, #5
    5b2c:	e7d4      	b.n	5ad8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    5b2e:	2303      	movs	r3, #3
    5b30:	e7d2      	b.n	5ad8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5b32:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    5b34:	bf42      	ittt	mi
    5b36:	2201      	movmi	r2, #1
    5b38:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    5b3a:	60fa      	strmi	r2, [r7, #12]
}
    5b3c:	e7e0      	b.n	5b00 <gpio_nrfx_config+0x68>
    5b3e:	bf00      	nop
    5b40:	00f00006 	.word	0x00f00006
    5b44:	00100006 	.word	0x00100006
    5b48:	00400002 	.word	0x00400002
    5b4c:	50842500 	.word	0x50842500

00005b50 <gpiote_pin_int_cfg>:
{
    5b50:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5b52:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    5b54:	4c4c      	ldr	r4, [pc, #304]	; (5c88 <gpiote_pin_int_cfg+0x138>)
    5b56:	7a1a      	ldrb	r2, [r3, #8]
    5b58:	f001 031f 	and.w	r3, r1, #31
    5b5c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    5b60:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    5b62:	68c5      	ldr	r5, [r0, #12]
    5b64:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    5b68:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5b6a:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    5b6e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    5b72:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    5b76:	42b3      	cmp	r3, r6
    5b78:	d16d      	bne.n	5c56 <gpiote_pin_int_cfg+0x106>
		    && (intenset & BIT(i))) {
    5b7a:	fa20 f602 	lsr.w	r6, r0, r2
    5b7e:	07f6      	lsls	r6, r6, #31
    5b80:	d569      	bpl.n	5c56 <gpiote_pin_int_cfg+0x106>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    5b82:	0090      	lsls	r0, r2, #2
    5b84:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    5b88:	f500 4050 	add.w	r0, r0, #53248	; 0xd000
    5b8c:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
    5b90:	f026 0601 	bic.w	r6, r6, #1
    5b94:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    5b98:	2001      	movs	r0, #1
    5b9a:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
    5b9e:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5ba2:	4c3a      	ldr	r4, [pc, #232]	; (5c8c <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    5ba4:	68e8      	ldr	r0, [r5, #12]
    5ba6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5baa:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    5bae:	40c8      	lsrs	r0, r1
    5bb0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    5bb4:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5bb8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    5bbc:	d04a      	beq.n	5c54 <gpiote_pin_int_cfg+0x104>
    5bbe:	6928      	ldr	r0, [r5, #16]
    5bc0:	40c8      	lsrs	r0, r1
    5bc2:	f010 0001 	ands.w	r0, r0, #1
    5bc6:	d045      	beq.n	5c54 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
    5bc8:	69a8      	ldr	r0, [r5, #24]
    5bca:	40c8      	lsrs	r0, r1
    5bcc:	f010 0001 	ands.w	r0, r0, #1
    5bd0:	d04b      	beq.n	5c6a <gpiote_pin_int_cfg+0x11a>
			if (data->double_edge & BIT(pin)) {
    5bd2:	69ea      	ldr	r2, [r5, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    5bd4:	2400      	movs	r4, #0
			if (data->double_edge & BIT(pin)) {
    5bd6:	40ca      	lsrs	r2, r1
    5bd8:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    5bda:	bf4c      	ite	mi
    5bdc:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    5bde:	696a      	ldrpl	r2, [r5, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    5be0:	4d29      	ldr	r5, [pc, #164]	; (5c88 <gpiote_pin_int_cfg+0x138>)
    5be2:	bf5f      	itttt	pl
    5be4:	40ca      	lsrpl	r2, r1
    5be6:	f002 0201 	andpl.w	r2, r2, #1
    5bea:	f1c2 0202 	rsbpl	r2, r2, #2
    5bee:	b2d2      	uxtbpl	r2, r2
    5bf0:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    5bf4:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    5bf8:	f010 0003 	ands.w	r0, r0, #3
    5bfc:	d12f      	bne.n	5c5e <gpiote_pin_int_cfg+0x10e>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5bfe:	00a1      	lsls	r1, r4, #2
    5c00:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    5c04:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    5c08:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c0c:	021b      	lsls	r3, r3, #8
    5c0e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5c12:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    5c16:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
    5c1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5c22:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    5c26:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c28:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    5c2c:	b29b      	uxth	r3, r3
    5c2e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5c32:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c36:	4332      	orrs	r2, r6
    5c38:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5c3c:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5c3e:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    5c42:	f043 0301 	orr.w	r3, r3, #1
    5c46:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    5c4a:	2301      	movs	r3, #1
    5c4c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    5c50:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    5c54:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    5c56:	3201      	adds	r2, #1
    5c58:	2a08      	cmp	r2, #8
    5c5a:	d186      	bne.n	5b6a <gpiote_pin_int_cfg+0x1a>
    5c5c:	e7a1      	b.n	5ba2 <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    5c5e:	3401      	adds	r4, #1
    5c60:	2c08      	cmp	r4, #8
    5c62:	d1c5      	bne.n	5bf0 <gpiote_pin_int_cfg+0xa0>
	return -ENODEV;
    5c64:	f06f 0012 	mvn.w	r0, #18
    5c68:	e7f4      	b.n	5c54 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    5c6a:	696a      	ldr	r2, [r5, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5c6c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    5c70:	40ca      	lsrs	r2, r1
    5c72:	f002 0201 	and.w	r2, r2, #1
    5c76:	f1c2 0203 	rsb	r2, r2, #3
    5c7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5c7e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    5c82:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
}
    5c86:	e7e5      	b.n	5c54 <gpiote_pin_int_cfg+0x104>
    5c88:	5000d000 	.word	0x5000d000
    5c8c:	50842500 	.word	0x50842500

00005c90 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    5c90:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    5c94:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
    5c96:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    5c98:	d10f      	bne.n	5cba <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5c9a:	6845      	ldr	r5, [r0, #4]
    5c9c:	7a2e      	ldrb	r6, [r5, #8]
    5c9e:	f001 051f 	and.w	r5, r1, #31
    5ca2:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5ca6:	4e1d      	ldr	r6, [pc, #116]	; (5d1c <gpio_nrfx_pin_interrupt_configure+0x8c>)
    5ca8:	3580      	adds	r5, #128	; 0x80
    5caa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    5cae:	07ed      	lsls	r5, r5, #31
    5cb0:	d507      	bpl.n	5cc2 <gpio_nrfx_pin_interrupt_configure+0x32>
}
    5cb2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5cb6:	bc70      	pop	{r4, r5, r6}
    5cb8:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    5cba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    5cbe:	68e5      	ldr	r5, [r4, #12]
    5cc0:	d026      	beq.n	5d10 <gpio_nrfx_pin_interrupt_configure+0x80>
    5cc2:	2501      	movs	r5, #1
    5cc4:	68e6      	ldr	r6, [r4, #12]
    5cc6:	408d      	lsls	r5, r1
    5cc8:	4335      	orrs	r5, r6
    5cca:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    5ccc:	2501      	movs	r5, #1
    5cce:	6926      	ldr	r6, [r4, #16]
    5cd0:	408d      	lsls	r5, r1
    5cd2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    5cd6:	bf14      	ite	ne
    5cd8:	432e      	orrne	r6, r5
    5cda:	43ae      	biceq	r6, r5
    5cdc:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    5cde:	69a6      	ldr	r6, [r4, #24]
    5ce0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5ce4:	69e2      	ldr	r2, [r4, #28]
    5ce6:	bf0c      	ite	eq
    5ce8:	432e      	orreq	r6, r5
    5cea:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    5cec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    5cf0:	bf0c      	ite	eq
    5cf2:	432a      	orreq	r2, r5
    5cf4:	43aa      	bicne	r2, r5
    5cf6:	61e2      	str	r2, [r4, #28]
    5cf8:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    5cfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    5cfe:	bf0c      	ite	eq
    5d00:	4315      	orreq	r5, r2
    5d02:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    5d06:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    5d08:	6165      	str	r5, [r4, #20]
}
    5d0a:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
    5d0c:	f7ff bf20 	b.w	5b50 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    5d10:	2601      	movs	r6, #1
    5d12:	408e      	lsls	r6, r1
    5d14:	ea25 0506 	bic.w	r5, r5, r6
    5d18:	e7d7      	b.n	5cca <gpio_nrfx_pin_interrupt_configure+0x3a>
    5d1a:	bf00      	nop
    5d1c:	50842500 	.word	0x50842500

00005d20 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d20:	4950      	ldr	r1, [pc, #320]	; (5e64 <gpiote_event_handler+0x144>)
{
    5d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d26:	680e      	ldr	r6, [r1, #0]
	if (port_event) {
    5d28:	2e00      	cmp	r6, #0
    5d2a:	d05f      	beq.n	5dec <gpiote_event_handler+0xcc>
	struct gpio_nrfx_data *data = get_port_data(port);
    5d2c:	4b4e      	ldr	r3, [pc, #312]	; (5e68 <gpiote_event_handler+0x148>)
	u32_t pin = 0U;
    5d2e:	2500      	movs	r5, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    5d30:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    5d32:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
    5d36:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
    5d3a:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    5d3c:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
    5d40:	4320      	orrs	r0, r4
    5d42:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    5d46:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    5d4a:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
    5d4c:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
    5d4e:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    5d50:	4054      	eors	r4, r2
    5d52:	f8df e11c 	ldr.w	lr, [pc, #284]	; 5e70 <gpiote_event_handler+0x150>
	u32_t out = pin_states & level_pins;
    5d56:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
    5d5a:	bb93      	cbnz	r3, 5dc2 <gpiote_event_handler+0xa2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d5c:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    5d5e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    5d60:	2501      	movs	r5, #1
    5d62:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    5d64:	4841      	ldr	r0, [pc, #260]	; (5e6c <gpiote_event_handler+0x14c>)
    5d66:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    5d6a:	fa05 f103 	lsl.w	r1, r5, r3
    5d6e:	4211      	tst	r1, r2
    5d70:	d010      	beq.n	5d94 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d72:	009a      	lsls	r2, r3, #2
    5d74:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    5d78:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
    5d7c:	6811      	ldr	r1, [r2, #0]
    5d7e:	b149      	cbz	r1, 5d94 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5d80:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    5d84:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d88:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5d8a:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    5d8e:	fa05 f101 	lsl.w	r1, r5, r1
    5d92:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    5d94:	3301      	adds	r3, #1
    5d96:	2b08      	cmp	r3, #8
    5d98:	d1e5      	bne.n	5d66 <gpiote_event_handler+0x46>
	if (fired_triggers[0]) {
    5d9a:	bb4c      	cbnz	r4, 5df0 <gpiote_event_handler+0xd0>
	if (port_event) {
    5d9c:	b17e      	cbz	r6, 5dbe <gpiote_event_handler+0x9e>
	u32_t bit = 1U << pin;
    5d9e:	2401      	movs	r4, #1
	u32_t pin = 0U;
    5da0:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    5da2:	4b31      	ldr	r3, [pc, #196]	; (5e68 <gpiote_event_handler+0x148>)
    5da4:	4f32      	ldr	r7, [pc, #200]	; (5e70 <gpiote_event_handler+0x150>)
    5da6:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    5da8:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
    5daa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
    5dae:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    5db0:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
    5db4:	430a      	orrs	r2, r1
    5db6:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d135      	bne.n	5e2a <gpiote_event_handler+0x10a>
}
    5dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    5dc2:	4203      	tst	r3, r0
    5dc4:	d00f      	beq.n	5de6 <gpiote_event_handler+0xc6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5dc6:	f89c 7008 	ldrb.w	r7, [ip, #8]
    5dca:	f005 021f 	and.w	r2, r5, #31
    5dce:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
    5dd2:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5dd6:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
    5dda:	ea23 0300 	bic.w	r3, r3, r0
    5dde:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5de2:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
    5de6:	3501      	adds	r5, #1
		bit <<= 1;
    5de8:	0040      	lsls	r0, r0, #1
    5dea:	e7b6      	b.n	5d5a <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    5dec:	4634      	mov	r4, r6
    5dee:	e7b6      	b.n	5d5e <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
    5df0:	4f1d      	ldr	r7, [pc, #116]	; (5e68 <gpiote_event_handler+0x148>)
    5df2:	f8d7 800c 	ldr.w	r8, [r7, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5df6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    5dfa:	2900      	cmp	r1, #0
    5dfc:	d0ce      	beq.n	5d9c <gpiote_event_handler+0x7c>
	return node->next;
    5dfe:	680d      	ldr	r5, [r1, #0]
    5e00:	2d00      	cmp	r5, #0
    5e02:	bf38      	it	cc
    5e04:	2500      	movcc	r5, #0
		if ((cb->pin_mask & pins) & data->int_en) {
    5e06:	688a      	ldr	r2, [r1, #8]
    5e08:	f8d8 3010 	ldr.w	r3, [r8, #16]
    5e0c:	4022      	ands	r2, r4
    5e0e:	421a      	tst	r2, r3
    5e10:	d002      	beq.n	5e18 <gpiote_event_handler+0xf8>
			cb->handler(port, cb, cb->pin_mask & pins);
    5e12:	4638      	mov	r0, r7
    5e14:	684b      	ldr	r3, [r1, #4]
    5e16:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e18:	2d00      	cmp	r5, #0
    5e1a:	d0bf      	beq.n	5d9c <gpiote_event_handler+0x7c>
    5e1c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5e1e:	4629      	mov	r1, r5
    5e20:	2b00      	cmp	r3, #0
    5e22:	bf38      	it	cc
    5e24:	2300      	movcc	r3, #0
    5e26:	461d      	mov	r5, r3
    5e28:	e7ed      	b.n	5e06 <gpiote_event_handler+0xe6>
		if (level_pins & bit) {
    5e2a:	421c      	tst	r4, r3
    5e2c:	d016      	beq.n	5e5c <gpiote_event_handler+0x13c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5e2e:	7a32      	ldrb	r2, [r6, #8]
    5e30:	f005 011f 	and.w	r1, r5, #31
    5e34:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    5e38:	6942      	ldr	r2, [r0, #20]
    5e3a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5e3e:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
    5e42:	40ea      	lsrs	r2, r5
    5e44:	f002 0201 	and.w	r2, r2, #1
    5e48:	f1c2 0203 	rsb	r2, r2, #3
    5e4c:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5e50:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5e54:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
    5e58:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    5e5c:	3501      	adds	r5, #1
		bit <<= 1;
    5e5e:	0064      	lsls	r4, r4, #1
    5e60:	e7ab      	b.n	5dba <gpiote_event_handler+0x9a>
    5e62:	bf00      	nop
    5e64:	5000d17c 	.word	0x5000d17c
    5e68:	20000174 	.word	0x20000174
    5e6c:	5000d000 	.word	0x5000d000
    5e70:	50842500 	.word	0x50842500

00005e74 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    5e74:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    5e76:	794b      	ldrb	r3, [r1, #5]
    5e78:	2b01      	cmp	r3, #1
    5e7a:	d029      	beq.n	5ed0 <uarte_nrfx_configure+0x5c>
    5e7c:	2b03      	cmp	r3, #3
    5e7e:	d124      	bne.n	5eca <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5e80:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5e82:	798b      	ldrb	r3, [r1, #6]
    5e84:	2b03      	cmp	r3, #3
    5e86:	d120      	bne.n	5eca <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    5e88:	79cc      	ldrb	r4, [r1, #7]
    5e8a:	b124      	cbz	r4, 5e96 <uarte_nrfx_configure+0x22>
    5e8c:	2c01      	cmp	r4, #1
    5e8e:	d11c      	bne.n	5eca <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    5e90:	6843      	ldr	r3, [r0, #4]
    5e92:	791b      	ldrb	r3, [r3, #4]
    5e94:	b1cb      	cbz	r3, 5eca <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    5e96:	790a      	ldrb	r2, [r1, #4]
    5e98:	b112      	cbz	r2, 5ea0 <uarte_nrfx_configure+0x2c>
    5e9a:	2a02      	cmp	r2, #2
    5e9c:	d115      	bne.n	5eca <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5e9e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5ea0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    5ea2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    5ea4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    5ea8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    5eaa:	d064      	beq.n	5f76 <uarte_nrfx_configure+0x102>
    5eac:	d82d      	bhi.n	5f0a <uarte_nrfx_configure+0x96>
    5eae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    5eb2:	d063      	beq.n	5f7c <uarte_nrfx_configure+0x108>
    5eb4:	d816      	bhi.n	5ee4 <uarte_nrfx_configure+0x70>
    5eb6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5eba:	d061      	beq.n	5f80 <uarte_nrfx_configure+0x10c>
    5ebc:	d80a      	bhi.n	5ed4 <uarte_nrfx_configure+0x60>
    5ebe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    5ec2:	d060      	beq.n	5f86 <uarte_nrfx_configure+0x112>
    5ec4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    5ec8:	d060      	beq.n	5f8c <uarte_nrfx_configure+0x118>
    5eca:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5ece:	e051      	b.n	5f74 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    5ed0:	2600      	movs	r6, #0
    5ed2:	e7d6      	b.n	5e82 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    5ed4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    5ed8:	d05b      	beq.n	5f92 <uarte_nrfx_configure+0x11e>
    5eda:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5ede:	d1f4      	bne.n	5eca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5ee0:	4b36      	ldr	r3, [pc, #216]	; (5fbc <uarte_nrfx_configure+0x148>)
    5ee2:	e03c      	b.n	5f5e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    5ee4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    5ee8:	d056      	beq.n	5f98 <uarte_nrfx_configure+0x124>
    5eea:	d807      	bhi.n	5efc <uarte_nrfx_configure+0x88>
    5eec:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    5ef0:	d054      	beq.n	5f9c <uarte_nrfx_configure+0x128>
    5ef2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5ef6:	d1e8      	bne.n	5eca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5ef8:	4b31      	ldr	r3, [pc, #196]	; (5fc0 <uarte_nrfx_configure+0x14c>)
    5efa:	e030      	b.n	5f5e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    5efc:	f647 2712 	movw	r7, #31250	; 0x7a12
    5f00:	42bb      	cmp	r3, r7
    5f02:	d1e2      	bne.n	5eca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5f04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5f08:	e029      	b.n	5f5e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    5f0a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5f0e:	d047      	beq.n	5fa0 <uarte_nrfx_configure+0x12c>
    5f10:	d813      	bhi.n	5f3a <uarte_nrfx_configure+0xc6>
    5f12:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    5f16:	d046      	beq.n	5fa6 <uarte_nrfx_configure+0x132>
    5f18:	d809      	bhi.n	5f2e <uarte_nrfx_configure+0xba>
    5f1a:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5f1e:	42bb      	cmp	r3, r7
    5f20:	d043      	beq.n	5faa <uarte_nrfx_configure+0x136>
    5f22:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    5f26:	d1d0      	bne.n	5eca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5f28:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5f2c:	e017      	b.n	5f5e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    5f2e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5f32:	d1ca      	bne.n	5eca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5f34:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5f38:	e011      	b.n	5f5e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    5f3a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5f3e:	d037      	beq.n	5fb0 <uarte_nrfx_configure+0x13c>
    5f40:	d808      	bhi.n	5f54 <uarte_nrfx_configure+0xe0>
    5f42:	4f20      	ldr	r7, [pc, #128]	; (5fc4 <uarte_nrfx_configure+0x150>)
    5f44:	42bb      	cmp	r3, r7
    5f46:	d036      	beq.n	5fb6 <uarte_nrfx_configure+0x142>
    5f48:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5f4c:	d1bd      	bne.n	5eca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5f4e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5f52:	e004      	b.n	5f5e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    5f54:	4f1c      	ldr	r7, [pc, #112]	; (5fc8 <uarte_nrfx_configure+0x154>)
    5f56:	42bb      	cmp	r3, r7
    5f58:	d1b7      	bne.n	5eca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5f5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5f5e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    5f62:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    5f64:	68c3      	ldr	r3, [r0, #12]
    5f66:	4322      	orrs	r2, r4
    5f68:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5f6a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    5f6e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    5f72:	2000      	movs	r0, #0
}
    5f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5f76:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5f7a:	e7f0      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5f7c:	4b13      	ldr	r3, [pc, #76]	; (5fcc <uarte_nrfx_configure+0x158>)
    5f7e:	e7ee      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5f80:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5f84:	e7eb      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    5f86:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5f8a:	e7e8      	b.n	5f5e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    5f8c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5f90:	e7e5      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5f92:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5f96:	e7e2      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5f98:	4b0d      	ldr	r3, [pc, #52]	; (5fd0 <uarte_nrfx_configure+0x15c>)
    5f9a:	e7e0      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5f9c:	4b0d      	ldr	r3, [pc, #52]	; (5fd4 <uarte_nrfx_configure+0x160>)
    5f9e:	e7de      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5fa0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5fa4:	e7db      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5fa6:	4b0c      	ldr	r3, [pc, #48]	; (5fd8 <uarte_nrfx_configure+0x164>)
    5fa8:	e7d9      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5faa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5fae:	e7d6      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5fb0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5fb4:	e7d3      	b.n	5f5e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5fb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5fba:	e7d0      	b.n	5f5e <uarte_nrfx_configure+0xea>
    5fbc:	0013b000 	.word	0x0013b000
    5fc0:	004ea000 	.word	0x004ea000
    5fc4:	0003d090 	.word	0x0003d090
    5fc8:	000f4240 	.word	0x000f4240
    5fcc:	00275000 	.word	0x00275000
    5fd0:	0075c000 	.word	0x0075c000
    5fd4:	003af000 	.word	0x003af000
    5fd8:	013a9000 	.word	0x013a9000

00005fdc <uarte_instance_init.constprop.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5fdc:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
    5fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    5fe0:	2703      	movs	r7, #3
    5fe2:	460d      	mov	r5, r1
	return config->uarte_regs;
    5fe4:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    5fe6:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
    5fe8:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    5fea:	4b26      	ldr	r3, [pc, #152]	; (6084 <uarte_instance_init.constprop.0+0xa8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5fec:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5fee:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
    5ff0:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    5ff2:	f101 0280 	add.w	r2, r1, #128	; 0x80
    5ff6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    5ffa:	686a      	ldr	r2, [r5, #4]
    5ffc:	1c57      	adds	r7, r2, #1
    5ffe:	bf1e      	ittt	ne
    6000:	f04f 0c00 	movne.w	ip, #0
    6004:	f102 0780 	addne.w	r7, r2, #128	; 0x80
    6008:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    600c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    6010:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    6012:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    6016:	1c4a      	adds	r2, r1, #1
    6018:	d015      	beq.n	6046 <uarte_instance_init.constprop.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    601a:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    601c:	1c57      	adds	r7, r2, #1
    601e:	d012      	beq.n	6046 <uarte_instance_init.constprop.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6020:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    6022:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6026:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
    6028:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    602a:	f102 0780 	add.w	r7, r2, #128	; 0x80
    602e:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    6032:	f04f 0c00 	mov.w	ip, #0
    6036:	f101 0780 	add.w	r7, r1, #128	; 0x80
    603a:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    603e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    6042:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    6046:	4631      	mov	r1, r6
    6048:	f7ff ff14 	bl	5e74 <uarte_nrfx_configure>
	if (err) {
    604c:	b9c8      	cbnz	r0, 6082 <uarte_instance_init.constprop.0+0xa6>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    604e:	2308      	movs	r3, #8
    6050:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    6054:	686b      	ldr	r3, [r5, #4]
    6056:	3301      	adds	r3, #1
    6058:	d009      	beq.n	606e <uarte_instance_init.constprop.0+0x92>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    605a:	f106 0310 	add.w	r3, r6, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    605e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6062:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6066:	2301      	movs	r3, #1
    6068:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    606c:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    606e:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6070:	689b      	ldr	r3, [r3, #8]
    6072:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6076:	2300      	movs	r3, #0
    6078:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    607c:	2301      	movs	r3, #1
    607e:	60a3      	str	r3, [r4, #8]
    6080:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    6082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6084:	50842500 	.word	0x50842500

00006088 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6088:	b530      	push	{r4, r5, lr}
    608a:	b085      	sub	sp, #20
    608c:	466c      	mov	r4, sp
    608e:	4605      	mov	r5, r0
    6090:	4b08      	ldr	r3, [pc, #32]	; (60b4 <uarte_1_init+0x2c>)
    6092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6098:	2200      	movs	r2, #0
    609a:	2101      	movs	r1, #1
    609c:	2009      	movs	r0, #9
    609e:	f7fe f879 	bl	4194 <z_arm_irq_priority_set>
    60a2:	2009      	movs	r0, #9
    60a4:	f7fe f866 	bl	4174 <arch_irq_enable>
    60a8:	4621      	mov	r1, r4
    60aa:	4628      	mov	r0, r5
    60ac:	f7ff ff96 	bl	5fdc <uarte_instance_init.constprop.0>
    60b0:	b005      	add	sp, #20
    60b2:	bd30      	pop	{r4, r5, pc}
    60b4:	0000aab0 	.word	0x0000aab0

000060b8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    60b8:	b530      	push	{r4, r5, lr}
    60ba:	b085      	sub	sp, #20
    60bc:	466c      	mov	r4, sp
    60be:	4605      	mov	r5, r0
    60c0:	4b08      	ldr	r3, [pc, #32]	; (60e4 <uarte_0_init+0x2c>)
    60c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    60c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    60c8:	2200      	movs	r2, #0
    60ca:	2101      	movs	r1, #1
    60cc:	2008      	movs	r0, #8
    60ce:	f7fe f861 	bl	4194 <z_arm_irq_priority_set>
    60d2:	2008      	movs	r0, #8
    60d4:	f7fe f84e 	bl	4174 <arch_irq_enable>
    60d8:	4621      	mov	r1, r4
    60da:	4628      	mov	r0, r5
    60dc:	f7ff ff7e 	bl	5fdc <uarte_instance_init.constprop.0>
    60e0:	b005      	add	sp, #20
    60e2:	bd30      	pop	{r4, r5, pc}
    60e4:	0000aac0 	.word	0x0000aac0

000060e8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    60e8:	b508      	push	{r3, lr}
	z_impl_log_panic();
    60ea:	f7fb faff 	bl	16ec <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    60ee:	4b08      	ldr	r3, [pc, #32]	; (6110 <k_sys_fatal_error_handler+0x28>)
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	075b      	lsls	r3, r3, #29
    60f4:	d009      	beq.n	610a <k_sys_fatal_error_handler+0x22>
    60f6:	4907      	ldr	r1, [pc, #28]	; (6114 <k_sys_fatal_error_handler+0x2c>)
    60f8:	4b07      	ldr	r3, [pc, #28]	; (6118 <k_sys_fatal_error_handler+0x30>)
    60fa:	4808      	ldr	r0, [pc, #32]	; (611c <k_sys_fatal_error_handler+0x34>)
    60fc:	1ac9      	subs	r1, r1, r3
    60fe:	08c9      	lsrs	r1, r1, #3
    6100:	0189      	lsls	r1, r1, #6
    6102:	f041 0101 	orr.w	r1, r1, #1
    6106:	f002 f961 	bl	83cc <log_0>
	sys_arch_reboot(0);
    610a:	2000      	movs	r0, #0
    610c:	f7fe fc64 	bl	49d8 <sys_arch_reboot>

	CODE_UNREACHABLE;
    6110:	200001a0 	.word	0x200001a0
    6114:	0000a98c 	.word	0x0000a98c
    6118:	0000a974 	.word	0x0000a974
    611c:	0000cf67 	.word	0x0000cf67

00006120 <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    6120:	4b06      	ldr	r3, [pc, #24]	; (613c <nrf91_errata_31+0x1c>)
    6122:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    6124:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	2b09      	cmp	r3, #9
    612a:	d105      	bne.n	6138 <nrf91_errata_31+0x18>
            {
                switch(var2)
    612c:	3801      	subs	r0, #1
    612e:	2801      	cmp	r0, #1
    6130:	bf8c      	ite	hi
    6132:	2000      	movhi	r0, #0
    6134:	2001      	movls	r0, #1
    6136:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    6138:	2000      	movs	r0, #0
    #endif
}
    613a:	4770      	bx	lr
    613c:	00ff0134 	.word	0x00ff0134

00006140 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    6140:	4b05      	ldr	r3, [pc, #20]	; (6158 <nrf91_errata_14+0x18>)
    6142:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    6144:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    6146:	681b      	ldr	r3, [r3, #0]
    6148:	2b09      	cmp	r3, #9
    614a:	d103      	bne.n	6154 <nrf91_errata_14+0x14>
            {
                switch(var2)
    614c:	1e43      	subs	r3, r0, #1
    614e:	4258      	negs	r0, r3
    6150:	4158      	adcs	r0, r3
    6152:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    6154:	2000      	movs	r0, #0
    #endif
}
    6156:	4770      	bx	lr
    6158:	00ff0134 	.word	0x00ff0134

0000615c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    615c:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
    615e:	f7ff ffdf 	bl	6120 <nrf91_errata_31>
    6162:	b130      	cbz	r0, 6172 <SystemInit+0x16>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    6164:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6168:	2200      	movs	r2, #0
    616a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    616e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    6172:	f7ff ffe5 	bl	6140 <nrf91_errata_14>
    6176:	b130      	cbz	r0, 6186 <SystemInit+0x2a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    6178:	2301      	movs	r3, #1
    617a:	4a3f      	ldr	r2, [pc, #252]	; (6278 <SystemInit+0x11c>)
    617c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    617e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    6182:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    6186:	4b3d      	ldr	r3, [pc, #244]	; (627c <SystemInit+0x120>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	2b09      	cmp	r3, #9
    618c:	d107      	bne.n	619e <SystemInit+0x42>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    618e:	4b3c      	ldr	r3, [pc, #240]	; (6280 <SystemInit+0x124>)
            {
                switch(var2)
    6190:	681b      	ldr	r3, [r3, #0]
    6192:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    6194:	bf02      	ittt	eq
    6196:	2201      	moveq	r2, #1
    6198:	4b3a      	ldreq	r3, [pc, #232]	; (6284 <SystemInit+0x128>)
    619a:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    619e:	f7ff ffcf 	bl	6140 <nrf91_errata_14>
    61a2:	b110      	cbz	r0, 61aa <SystemInit+0x4e>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    61a4:	220e      	movs	r2, #14
    61a6:	4b38      	ldr	r3, [pc, #224]	; (6288 <SystemInit+0x12c>)
    61a8:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
    61aa:	f7ff ffb9 	bl	6120 <nrf91_errata_31>
    61ae:	b120      	cbz	r0, 61ba <SystemInit+0x5e>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    61b0:	2200      	movs	r2, #0
    61b2:	4b36      	ldr	r3, [pc, #216]	; (628c <SystemInit+0x130>)
    61b4:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    61b6:	2201      	movs	r2, #1
    61b8:	605a      	str	r2, [r3, #4]
{
    61ba:	2200      	movs	r2, #0
    61bc:	00d3      	lsls	r3, r2, #3
    61be:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    61c2:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    61c6:	3101      	adds	r1, #1
    61c8:	d008      	beq.n	61dc <SystemInit+0x80>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    61ca:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    61ce:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    61d0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    61d4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    61d8:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    61da:	d1ef      	bne.n	61bc <SystemInit+0x60>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    61dc:	4b2c      	ldr	r3, [pc, #176]	; (6290 <SystemInit+0x134>)
    61de:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    61e0:	07d1      	lsls	r1, r2, #31
    61e2:	d53b      	bpl.n	625c <SystemInit+0x100>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    61e4:	4b2b      	ldr	r3, [pc, #172]	; (6294 <SystemInit+0x138>)
    61e6:	4619      	mov	r1, r3
    61e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    61ec:	2a01      	cmp	r2, #1
    61ee:	d1fb      	bne.n	61e8 <SystemInit+0x8c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    61f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    61f4:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    61f8:	2b01      	cmp	r3, #1
    61fa:	d1fb      	bne.n	61f4 <SystemInit+0x98>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    61fc:	4b24      	ldr	r3, [pc, #144]	; (6290 <SystemInit+0x134>)
    61fe:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    6200:	07d2      	lsls	r2, r2, #31
    6202:	d508      	bpl.n	6216 <SystemInit+0xba>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    6204:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    6206:	4923      	ldr	r1, [pc, #140]	; (6294 <SystemInit+0x138>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    6208:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    620c:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    620e:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    6212:	2a01      	cmp	r2, #1
    6214:	d1fb      	bne.n	620e <SystemInit+0xb2>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    6216:	6a1a      	ldr	r2, [r3, #32]
    6218:	3201      	adds	r2, #1
    621a:	d10a      	bne.n	6232 <SystemInit+0xd6>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    621c:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    621e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    6222:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    6226:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    6228:	4a1a      	ldr	r2, [pc, #104]	; (6294 <SystemInit+0x138>)
    622a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    622e:	2b01      	cmp	r3, #1
    6230:	d1fb      	bne.n	622a <SystemInit+0xce>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    6232:	2200      	movs	r2, #0
    6234:	4b17      	ldr	r3, [pc, #92]	; (6294 <SystemInit+0x138>)
    6236:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    623a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    623e:	2a01      	cmp	r2, #1
    6240:	d1fb      	bne.n	623a <SystemInit+0xde>
  __ASM volatile ("dsb 0xF":::"memory");
    6242:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6246:	4914      	ldr	r1, [pc, #80]	; (6298 <SystemInit+0x13c>)
    6248:	4b14      	ldr	r3, [pc, #80]	; (629c <SystemInit+0x140>)
    624a:	68ca      	ldr	r2, [r1, #12]
    624c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6250:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6252:	60cb      	str	r3, [r1, #12]
    6254:	f3bf 8f4f 	dsb	sy
    __NOP();
    6258:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    625a:	e7fd      	b.n	6258 <SystemInit+0xfc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    625c:	6a1b      	ldr	r3, [r3, #32]
    625e:	3301      	adds	r3, #1
    6260:	d0c0      	beq.n	61e4 <SystemInit+0x88>
        SCB->NSACR |= (3UL << 10);
    6262:	4a0d      	ldr	r2, [pc, #52]	; (6298 <SystemInit+0x13c>)
    6264:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    6268:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    626c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    6270:	4b0b      	ldr	r3, [pc, #44]	; (62a0 <SystemInit+0x144>)
    6272:	4a0c      	ldr	r2, [pc, #48]	; (62a4 <SystemInit+0x148>)
    6274:	601a      	str	r2, [r3, #0]
}
    6276:	bd08      	pop	{r3, pc}
    6278:	50004a38 	.word	0x50004a38
    627c:	00ff0130 	.word	0x00ff0130
    6280:	00ff0134 	.word	0x00ff0134
    6284:	50004000 	.word	0x50004000
    6288:	5003aee4 	.word	0x5003aee4
    628c:	5000470c 	.word	0x5000470c
    6290:	00ff8000 	.word	0x00ff8000
    6294:	50039000 	.word	0x50039000
    6298:	e000ed00 	.word	0xe000ed00
    629c:	05fa0004 	.word	0x05fa0004
    62a0:	200000e8 	.word	0x200000e8
    62a4:	03d09000 	.word	0x03d09000

000062a8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    62a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    62aa:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    62ac:	4b08      	ldr	r3, [pc, #32]	; (62d0 <z_sys_init_run_level+0x28>)
    62ae:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    62b2:	3001      	adds	r0, #1
    62b4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    62b8:	42a6      	cmp	r6, r4
    62ba:	d800      	bhi.n	62be <z_sys_init_run_level+0x16>
			}
		}
	}
}
    62bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    62be:	e9d4 3500 	ldrd	r3, r5, [r4]
    62c2:	4628      	mov	r0, r5
    62c4:	4798      	blx	r3
		if (retval != 0) {
    62c6:	b108      	cbz	r0, 62cc <z_sys_init_run_level+0x24>
			if (dev) {
    62c8:	b105      	cbz	r5, 62cc <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    62ca:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    62cc:	3408      	adds	r4, #8
    62ce:	e7f3      	b.n	62b8 <z_sys_init_run_level+0x10>
    62d0:	0000b384 	.word	0x0000b384

000062d4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    62d4:	4b0f      	ldr	r3, [pc, #60]	; (6314 <z_impl_device_get_binding+0x40>)
{
    62d6:	b570      	push	{r4, r5, r6, lr}
    62d8:	4605      	mov	r5, r0
    62da:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    62dc:	4c0e      	ldr	r4, [pc, #56]	; (6318 <z_impl_device_get_binding+0x44>)
    62de:	429c      	cmp	r4, r3
    62e0:	d104      	bne.n	62ec <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    62e2:	4c0d      	ldr	r4, [pc, #52]	; (6318 <z_impl_device_get_binding+0x44>)
    62e4:	42b4      	cmp	r4, r6
    62e6:	d108      	bne.n	62fa <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    62e8:	2400      	movs	r4, #0
    62ea:	e010      	b.n	630e <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    62ec:	68a2      	ldr	r2, [r4, #8]
    62ee:	b112      	cbz	r2, 62f6 <z_impl_device_get_binding+0x22>
    62f0:	6822      	ldr	r2, [r4, #0]
    62f2:	42aa      	cmp	r2, r5
    62f4:	d00b      	beq.n	630e <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    62f6:	3410      	adds	r4, #16
    62f8:	e7f1      	b.n	62de <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    62fa:	68a3      	ldr	r3, [r4, #8]
    62fc:	b90b      	cbnz	r3, 6302 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    62fe:	3410      	adds	r4, #16
    6300:	e7f0      	b.n	62e4 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    6302:	4628      	mov	r0, r5
    6304:	6821      	ldr	r1, [r4, #0]
    6306:	f003 fc57 	bl	9bb8 <strcmp>
		if ((dev->driver_api != NULL) &&
    630a:	2800      	cmp	r0, #0
    630c:	d1f7      	bne.n	62fe <z_impl_device_get_binding+0x2a>
}
    630e:	4620      	mov	r0, r4
    6310:	bd70      	pop	{r4, r5, r6, pc}
    6312:	bf00      	nop
    6314:	20000194 	.word	0x20000194
    6318:	20000134 	.word	0x20000134

0000631c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    631c:	4b01      	ldr	r3, [pc, #4]	; (6324 <z_impl_z_errno+0x8>)
    631e:	6898      	ldr	r0, [r3, #8]
}
    6320:	3090      	adds	r0, #144	; 0x90
    6322:	4770      	bx	lr
    6324:	20000ea0 	.word	0x20000ea0

00006328 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    632c:	4605      	mov	r5, r0
    632e:	460e      	mov	r6, r1
    6330:	f04f 0320 	mov.w	r3, #32
    6334:	f3ef 8811 	mrs	r8, BASEPRI
    6338:	f383 8811 	msr	BASEPRI, r3
    633c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    6340:	f000 fe90 	bl	7064 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    6344:	4c2e      	ldr	r4, [pc, #184]	; (6400 <z_fatal_error+0xd8>)
    6346:	4607      	mov	r7, r0
    6348:	6823      	ldr	r3, [r4, #0]
    634a:	0759      	lsls	r1, r3, #29
    634c:	d054      	beq.n	63f8 <z_fatal_error+0xd0>
    634e:	4a2d      	ldr	r2, [pc, #180]	; (6404 <z_fatal_error+0xdc>)
    6350:	4b2d      	ldr	r3, [pc, #180]	; (6408 <z_fatal_error+0xe0>)
    6352:	2d04      	cmp	r5, #4
    6354:	eba3 0302 	sub.w	r3, r3, r2
    6358:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    635c:	bf98      	it	ls
    635e:	4a2b      	ldrls	r2, [pc, #172]	; (640c <z_fatal_error+0xe4>)
    6360:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6364:	f043 0301 	orr.w	r3, r3, #1
	switch (reason) {
    6368:	bf94      	ite	ls
    636a:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    636e:	4a28      	ldrhi	r2, [pc, #160]	; (6410 <z_fatal_error+0xe8>)
    6370:	f8ad 3000 	strh.w	r3, [sp]
    6374:	4629      	mov	r1, r5
    6376:	2300      	movs	r3, #0
    6378:	4826      	ldr	r0, [pc, #152]	; (6414 <z_fatal_error+0xec>)
    637a:	f002 f861 	bl	8440 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    637e:	b186      	cbz	r6, 63a2 <z_fatal_error+0x7a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    6380:	69f3      	ldr	r3, [r6, #28]
    6382:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6386:	b163      	cbz	r3, 63a2 <z_fatal_error+0x7a>
		LOG_ERR("Fault during interrupt handling\n");
    6388:	6823      	ldr	r3, [r4, #0]
    638a:	075a      	lsls	r2, r3, #29
    638c:	d024      	beq.n	63d8 <z_fatal_error+0xb0>
    638e:	491e      	ldr	r1, [pc, #120]	; (6408 <z_fatal_error+0xe0>)
    6390:	4b1c      	ldr	r3, [pc, #112]	; (6404 <z_fatal_error+0xdc>)
    6392:	4821      	ldr	r0, [pc, #132]	; (6418 <z_fatal_error+0xf0>)
    6394:	1ac9      	subs	r1, r1, r3
    6396:	08c9      	lsrs	r1, r1, #3
    6398:	0189      	lsls	r1, r1, #6
    639a:	f041 0101 	orr.w	r1, r1, #1
    639e:	f002 f815 	bl	83cc <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    63a2:	6823      	ldr	r3, [r4, #0]
    63a4:	075b      	lsls	r3, r3, #29
    63a6:	d017      	beq.n	63d8 <z_fatal_error+0xb0>
    63a8:	4c17      	ldr	r4, [pc, #92]	; (6408 <z_fatal_error+0xe0>)
    63aa:	4b16      	ldr	r3, [pc, #88]	; (6404 <z_fatal_error+0xdc>)
	const char *thread_name = k_thread_name_get(thread);
    63ac:	4638      	mov	r0, r7
    63ae:	1ae4      	subs	r4, r4, r3
    63b0:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("Current thread: %p (%s)", thread,
    63b2:	01a4      	lsls	r4, r4, #6
    63b4:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
    63b8:	f003 fff0 	bl	a39c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    63bc:	b1d0      	cbz	r0, 63f4 <z_fatal_error+0xcc>
    63be:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    63c0:	4b16      	ldr	r3, [pc, #88]	; (641c <z_fatal_error+0xf4>)
    63c2:	2a00      	cmp	r2, #0
    63c4:	bf08      	it	eq
    63c6:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    63c8:	f7fb f800 	bl	13cc <log_strdup>
    63cc:	4623      	mov	r3, r4
    63ce:	4602      	mov	r2, r0
    63d0:	4639      	mov	r1, r7
    63d2:	4813      	ldr	r0, [pc, #76]	; (6420 <z_fatal_error+0xf8>)
    63d4:	f002 f81b 	bl	840e <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    63d8:	4631      	mov	r1, r6
    63da:	4628      	mov	r0, r5
    63dc:	f7ff fe84 	bl	60e8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    63e0:	f388 8811 	msr	BASEPRI, r8
    63e4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    63e8:	4638      	mov	r0, r7
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    63ea:	b002      	add	sp, #8
    63ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63f0:	f7fe bb10 	b.w	4a14 <z_impl_k_thread_abort>
		thread_name = "unknown";
    63f4:	4809      	ldr	r0, [pc, #36]	; (641c <z_fatal_error+0xf4>)
    63f6:	e7e7      	b.n	63c8 <z_fatal_error+0xa0>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    63f8:	2e00      	cmp	r6, #0
    63fa:	d1c1      	bne.n	6380 <z_fatal_error+0x58>
    63fc:	e7ec      	b.n	63d8 <z_fatal_error+0xb0>
    63fe:	bf00      	nop
    6400:	200001ac 	.word	0x200001ac
    6404:	0000a974 	.word	0x0000a974
    6408:	0000a9a4 	.word	0x0000a9a4
    640c:	0000b39c 	.word	0x0000b39c
    6410:	0000cf8f 	.word	0x0000cf8f
    6414:	0000cfa5 	.word	0x0000cfa5
    6418:	0000cfcd 	.word	0x0000cfcd
    641c:	0000cf9d 	.word	0x0000cf9d
    6420:	0000cfee 	.word	0x0000cfee

00006424 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    6424:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    6426:	4d0b      	ldr	r5, [pc, #44]	; (6454 <idle+0x30>)
	__asm__ volatile(
    6428:	f04f 0220 	mov.w	r2, #32
    642c:	f3ef 8311 	mrs	r3, BASEPRI
    6430:	f382 8811 	msr	BASEPRI, r2
    6434:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    6438:	f003 ffd6 	bl	a3e8 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    643c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    643e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    6440:	2802      	cmp	r0, #2
    6442:	bfd8      	it	le
    6444:	4608      	movle	r0, r1
    6446:	f003 ffdf 	bl	a408 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    644a:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    644c:	f7fd ff02 	bl	4254 <arch_cpu_idle>
}
    6450:	e7ea      	b.n	6428 <idle+0x4>
    6452:	bf00      	nop
    6454:	20000ea0 	.word	0x20000ea0

00006458 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    6458:	4802      	ldr	r0, [pc, #8]	; (6464 <z_bss_zero+0xc>)
    645a:	4a03      	ldr	r2, [pc, #12]	; (6468 <z_bss_zero+0x10>)
    645c:	2100      	movs	r1, #0
    645e:	1a12      	subs	r2, r2, r0
    6460:	f003 bc17 	b.w	9c92 <memset>
    6464:	200002b8 	.word	0x200002b8
    6468:	2000123c 	.word	0x2000123c

0000646c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    646c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    646e:	4806      	ldr	r0, [pc, #24]	; (6488 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    6470:	4a06      	ldr	r2, [pc, #24]	; (648c <z_data_copy+0x20>)
    6472:	4907      	ldr	r1, [pc, #28]	; (6490 <z_data_copy+0x24>)
    6474:	1a12      	subs	r2, r2, r0
    6476:	f003 fbe1 	bl	9c3c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    647a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    647e:	4a05      	ldr	r2, [pc, #20]	; (6494 <z_data_copy+0x28>)
    6480:	4905      	ldr	r1, [pc, #20]	; (6498 <z_data_copy+0x2c>)
    6482:	4806      	ldr	r0, [pc, #24]	; (649c <z_data_copy+0x30>)
    6484:	f003 bbda 	b.w	9c3c <memcpy>
    6488:	20000000 	.word	0x20000000
    648c:	200002b8 	.word	0x200002b8
    6490:	0000d098 	.word	0x0000d098
    6494:	00000000 	.word	0x00000000
    6498:	0000d098 	.word	0x0000d098
    649c:	20000000 	.word	0x20000000

000064a0 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    64a0:	2201      	movs	r2, #1
{
    64a2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    64a4:	4b08      	ldr	r3, [pc, #32]	; (64c8 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    64a6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    64a8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    64aa:	f7ff fefd 	bl	62a8 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    64ae:	2003      	movs	r0, #3
    64b0:	f7ff fefa 	bl	62a8 <z_sys_init_run_level>

	z_init_static_threads();
    64b4:	f000 ff28 	bl	7308 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    64b8:	f001 fb42 	bl	7b40 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    64bc:	4a03      	ldr	r2, [pc, #12]	; (64cc <bg_thread_main+0x2c>)
    64be:	7b13      	ldrb	r3, [r2, #12]
    64c0:	f023 0301 	bic.w	r3, r3, #1
    64c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    64c6:	bd08      	pop	{r3, pc}
    64c8:	2000123b 	.word	0x2000123b
    64cc:	20000df8 	.word	0x20000df8

000064d0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    64d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    64d4:	b0b3      	sub	sp, #204	; 0xcc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    64d6:	f7fa fe3d 	bl	1154 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    64da:	f8df 9104 	ldr.w	r9, [pc, #260]	; 65e0 <z_cstart+0x110>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    64de:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    64e2:	2400      	movs	r4, #0
    64e4:	23e0      	movs	r3, #224	; 0xe0
    64e6:	4d35      	ldr	r5, [pc, #212]	; (65bc <z_cstart+0xec>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    64e8:	f04f 0a01 	mov.w	sl, #1
    64ec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    64f0:	77ec      	strb	r4, [r5, #31]
    64f2:	762c      	strb	r4, [r5, #24]
    64f4:	766c      	strb	r4, [r5, #25]
    64f6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    64f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    64fa:	4e31      	ldr	r6, [pc, #196]	; (65c0 <z_cstart+0xf0>)
    64fc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6500:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6502:	f7fe fa53 	bl	49ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6506:	f7fd fe9f 	bl	4248 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    650a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    650e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6510:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    6512:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    6516:	4d2b      	ldr	r5, [pc, #172]	; (65c4 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    6518:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    651c:	ab08      	add	r3, sp, #32
    651e:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6520:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    6522:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
    6526:	f7ff febf 	bl	62a8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    652a:	2001      	movs	r0, #1
    652c:	f7ff febc 	bl	62a8 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    6530:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 65e4 <z_cstart+0x114>
	z_sched_init();
    6534:	f000 fd1c 	bl	6f70 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    6538:	4f23      	ldr	r7, [pc, #140]	; (65c8 <z_cstart+0xf8>)
    653a:	4b24      	ldr	r3, [pc, #144]	; (65cc <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
    653c:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    653e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6542:	4639      	mov	r1, r7
    6544:	4630      	mov	r0, r6
    6546:	9305      	str	r3, [sp, #20]
    6548:	e9cd 4a03 	strd	r4, sl, [sp, #12]
    654c:	4643      	mov	r3, r8
    654e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6552:	9400      	str	r4, [sp, #0]
    6554:	f000 fe5e 	bl	7214 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6558:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    655a:	4630      	mov	r0, r6
    655c:	f023 0304 	bic.w	r3, r3, #4
	snprintk(tname, 8, "idle %02d", i);
    6560:	f10d 0b18 	add.w	fp, sp, #24
    6564:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    6566:	f003 fe6e 	bl	a246 <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
    656a:	4623      	mov	r3, r4
    656c:	2108      	movs	r1, #8
    656e:	4a18      	ldr	r2, [pc, #96]	; (65d0 <z_cstart+0x100>)
    6570:	4658      	mov	r0, fp
    6572:	f001 fd65 	bl	8040 <snprintk>
	z_setup_new_thread(thread, stack,
    6576:	230f      	movs	r3, #15
    6578:	f44f 72a0 	mov.w	r2, #320	; 0x140
    657c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    6580:	4814      	ldr	r0, [pc, #80]	; (65d4 <z_cstart+0x104>)
    6582:	4b15      	ldr	r3, [pc, #84]	; (65d8 <z_cstart+0x108>)
    6584:	4915      	ldr	r1, [pc, #84]	; (65dc <z_cstart+0x10c>)
    6586:	e9cd ab04 	strd	sl, fp, [sp, #16]
    658a:	e9cd 4400 	strd	r4, r4, [sp]
    658e:	f000 fe41 	bl	7214 <z_setup_new_thread>
    6592:	4810      	ldr	r0, [pc, #64]	; (65d4 <z_cstart+0x104>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    6594:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6598:	7b43      	ldrb	r3, [r0, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    659a:	60e8      	str	r0, [r5, #12]
    659c:	f023 0304 	bic.w	r3, r3, #4
    65a0:	7343      	strb	r3, [r0, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    65a2:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    65a6:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    65aa:	4639      	mov	r1, r7
    65ac:	4643      	mov	r3, r8
    65ae:	4630      	mov	r0, r6
		_kernel.cpus[i].id = i;
    65b0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    65b2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    65b6:	f7fd fe2b 	bl	4210 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    65ba:	bf00      	nop
    65bc:	e000ed00 	.word	0xe000ed00
    65c0:	20000df8 	.word	0x20000df8
    65c4:	20000ea0 	.word	0x20000ea0
    65c8:	20001d40 	.word	0x20001d40
    65cc:	0000d050 	.word	0x0000d050
    65d0:	0000d055 	.word	0x0000d055
    65d4:	20000d50 	.word	0x20000d50
    65d8:	00006425 	.word	0x00006425
    65dc:	20002140 	.word	0x20002140
    65e0:	20002a80 	.word	0x20002a80
    65e4:	000064a1 	.word	0x000064a1

000065e8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    65e8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    65ea:	4b0e      	ldr	r3, [pc, #56]	; (6624 <init_mem_slab_module+0x3c>)
    65ec:	4c0e      	ldr	r4, [pc, #56]	; (6628 <init_mem_slab_module+0x40>)
    65ee:	42a3      	cmp	r3, r4
    65f0:	d301      	bcc.n	65f6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    65f2:	2000      	movs	r0, #0
	return rc;
}
    65f4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    65f6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    65fa:	ea41 0200 	orr.w	r2, r1, r0
    65fe:	f012 0203 	ands.w	r2, r2, #3
    6602:	d10b      	bne.n	661c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    6604:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    6606:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6608:	42aa      	cmp	r2, r5
    660a:	d101      	bne.n	6610 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    660c:	331c      	adds	r3, #28
    660e:	e7ee      	b.n	65ee <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    6610:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6612:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    6614:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    6616:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    6618:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    661a:	e7f5      	b.n	6608 <init_mem_slab_module+0x20>
		return -EINVAL;
    661c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6620:	e7e8      	b.n	65f4 <init_mem_slab_module+0xc>
    6622:	bf00      	nop
    6624:	200001f8 	.word	0x200001f8
    6628:	20000214 	.word	0x20000214

0000662c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    662c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    662e:	460c      	mov	r4, r1
    6630:	4616      	mov	r6, r2
    6632:	461f      	mov	r7, r3
    6634:	f04f 0320 	mov.w	r3, #32
    6638:	f3ef 8111 	mrs	r1, BASEPRI
    663c:	f383 8811 	msr	BASEPRI, r3
    6640:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    6644:	6943      	ldr	r3, [r0, #20]
    6646:	b15b      	cbz	r3, 6660 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    6648:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    664a:	681b      	ldr	r3, [r3, #0]
    664c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    664e:	6983      	ldr	r3, [r0, #24]
    6650:	3301      	adds	r3, #1
    6652:	6183      	str	r3, [r0, #24]
		result = 0;
    6654:	2000      	movs	r0, #0
	__asm__ volatile(
    6656:	f381 8811 	msr	BASEPRI, r1
    665a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    665e:	e011      	b.n	6684 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6660:	ea56 0207 	orrs.w	r2, r6, r7
    6664:	d103      	bne.n	666e <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    6666:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    666a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    666c:	e7f3      	b.n	6656 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    666e:	4602      	mov	r2, r0
    6670:	e9cd 6700 	strd	r6, r7, [sp]
    6674:	4804      	ldr	r0, [pc, #16]	; (6688 <k_mem_slab_alloc+0x5c>)
    6676:	f000 fc23 	bl	6ec0 <z_pend_curr>
		if (result == 0) {
    667a:	b918      	cbnz	r0, 6684 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    667c:	4b03      	ldr	r3, [pc, #12]	; (668c <k_mem_slab_alloc+0x60>)
    667e:	689b      	ldr	r3, [r3, #8]
    6680:	695b      	ldr	r3, [r3, #20]
    6682:	6023      	str	r3, [r4, #0]
}
    6684:	b002      	add	sp, #8
    6686:	bdd0      	pop	{r4, r6, r7, pc}
    6688:	2000123c 	.word	0x2000123c
    668c:	20000ea0 	.word	0x20000ea0

00006690 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6690:	b570      	push	{r4, r5, r6, lr}
    6692:	4604      	mov	r4, r0
    6694:	460d      	mov	r5, r1
	__asm__ volatile(
    6696:	f04f 0320 	mov.w	r3, #32
    669a:	f3ef 8611 	mrs	r6, BASEPRI
    669e:	f383 8811 	msr	BASEPRI, r3
    66a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    66a6:	f003 fe44 	bl	a332 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    66aa:	b160      	cbz	r0, 66c6 <k_mem_slab_free+0x36>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    66ac:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    66ae:	682a      	ldr	r2, [r5, #0]
    66b0:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    66b4:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    66b6:	f003 fdc6 	bl	a246 <z_ready_thread>
		z_reschedule(&lock, key);
    66ba:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    66bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    66c0:	4807      	ldr	r0, [pc, #28]	; (66e0 <k_mem_slab_free+0x50>)
    66c2:	f003 bd78 	b.w	a1b6 <z_reschedule>
		**(char ***)mem = slab->free_list;
    66c6:	682b      	ldr	r3, [r5, #0]
    66c8:	6962      	ldr	r2, [r4, #20]
    66ca:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    66cc:	682b      	ldr	r3, [r5, #0]
    66ce:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    66d0:	69a3      	ldr	r3, [r4, #24]
    66d2:	3b01      	subs	r3, #1
    66d4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    66d6:	f386 8811 	msr	BASEPRI, r6
    66da:	f3bf 8f6f 	isb	sy
}
    66de:	bd70      	pop	{r4, r5, r6, pc}
    66e0:	2000123c 	.word	0x2000123c

000066e4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    66e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    66e8:	4604      	mov	r4, r0
    66ea:	468a      	mov	sl, r1
    66ec:	4616      	mov	r6, r2
    66ee:	461f      	mov	r7, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    66f0:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
    66f4:	f04f 0320 	mov.w	r3, #32
    66f8:	f3ef 8811 	mrs	r8, BASEPRI
    66fc:	f383 8811 	msr	BASEPRI, r3
    6700:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
    6704:	6a02      	ldr	r2, [r0, #32]
    6706:	68c3      	ldr	r3, [r0, #12]
    6708:	429a      	cmp	r2, r3
    670a:	d22b      	bcs.n	6764 <z_impl_k_msgq_put+0x80>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    670c:	f003 fe11 	bl	a332 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
    6710:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
    6712:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
    6714:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
    6716:	b180      	cbz	r0, 673a <z_impl_k_msgq_put+0x56>
    6718:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
    671a:	6940      	ldr	r0, [r0, #20]
    671c:	f003 fa8e 	bl	9c3c <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    6720:	4628      	mov	r0, r5
    6722:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
    6726:	f003 fd8e 	bl	a246 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    672a:	4648      	mov	r0, r9
    672c:	4641      	mov	r1, r8
    672e:	f003 fd42 	bl	a1b6 <z_reschedule>
			return 0;
    6732:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    6734:	b002      	add	sp, #8
    6736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
    673a:	69e0      	ldr	r0, [r4, #28]
    673c:	f003 fa7e 	bl	9c3c <memcpy>
		result = 0;
    6740:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
    6742:	69e3      	ldr	r3, [r4, #28]
    6744:	68a2      	ldr	r2, [r4, #8]
    6746:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    6748:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    674a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    674c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    674e:	bf04      	itt	eq
    6750:	6923      	ldreq	r3, [r4, #16]
    6752:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
    6754:	6a23      	ldr	r3, [r4, #32]
    6756:	3301      	adds	r3, #1
    6758:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
    675a:	f388 8811 	msr	BASEPRI, r8
    675e:	f3bf 8f6f 	isb	sy
	return result;
    6762:	e7e7      	b.n	6734 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6764:	ea56 0307 	orrs.w	r3, r6, r7
    6768:	d00a      	beq.n	6780 <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = data;
    676a:	4b07      	ldr	r3, [pc, #28]	; (6788 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    676c:	4602      	mov	r2, r0
		_current->base.swap_data = data;
    676e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6770:	4648      	mov	r0, r9
		_current->base.swap_data = data;
    6772:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6774:	4641      	mov	r1, r8
    6776:	e9cd 6700 	strd	r6, r7, [sp]
    677a:	f000 fba1 	bl	6ec0 <z_pend_curr>
    677e:	e7d9      	b.n	6734 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
    6780:	f06f 004f 	mvn.w	r0, #79	; 0x4f
    6784:	e7e9      	b.n	675a <z_impl_k_msgq_put+0x76>
    6786:	bf00      	nop
    6788:	20000ea0 	.word	0x20000ea0

0000678c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    678c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6790:	4604      	mov	r4, r0
    6792:	4616      	mov	r6, r2
    6794:	4608      	mov	r0, r1
    6796:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    6798:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
    679c:	f04f 0320 	mov.w	r3, #32
    67a0:	f3ef 8811 	mrs	r8, BASEPRI
    67a4:	f383 8811 	msr	BASEPRI, r3
    67a8:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
    67ac:	6a23      	ldr	r3, [r4, #32]
    67ae:	2b00      	cmp	r3, #0
    67b0:	d034      	beq.n	681c <z_impl_k_msgq_get+0x90>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    67b2:	68a2      	ldr	r2, [r4, #8]
    67b4:	69a1      	ldr	r1, [r4, #24]
    67b6:	f003 fa41 	bl	9c3c <memcpy>
		msgq->read_ptr += msgq->msg_size;
    67ba:	69a3      	ldr	r3, [r4, #24]
    67bc:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    67be:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
    67c0:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
    67c2:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
    67c4:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
    67c6:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
    67c8:	bf04      	itt	eq
    67ca:	6923      	ldreq	r3, [r4, #16]
    67cc:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
    67ce:	6a23      	ldr	r3, [r4, #32]
    67d0:	3b01      	subs	r3, #1
    67d2:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    67d4:	f003 fdad 	bl	a332 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    67d8:	4605      	mov	r5, r0
    67da:	2800      	cmp	r0, #0
    67dc:	d02e      	beq.n	683c <z_impl_k_msgq_get+0xb0>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
    67de:	6941      	ldr	r1, [r0, #20]
    67e0:	68a2      	ldr	r2, [r4, #8]
    67e2:	69e0      	ldr	r0, [r4, #28]
    67e4:	f003 fa2a 	bl	9c3c <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    67e8:	69e3      	ldr	r3, [r4, #28]
    67ea:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    67ec:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
    67ee:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    67f0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    67f2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    67f4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    67f6:	bf04      	itt	eq
    67f8:	6923      	ldreq	r3, [r4, #16]
    67fa:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
    67fc:	6a23      	ldr	r3, [r4, #32]
    67fe:	3301      	adds	r3, #1
    6800:	6223      	str	r3, [r4, #32]
    6802:	2400      	movs	r4, #0
    6804:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
			z_ready_thread(pending_thread);
    6808:	f003 fd1d 	bl	a246 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    680c:	4648      	mov	r0, r9
    680e:	4641      	mov	r1, r8
    6810:	f003 fcd1 	bl	a1b6 <z_reschedule>
			return 0;
    6814:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    6816:	b003      	add	sp, #12
    6818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    681c:	ea56 0307 	orrs.w	r3, r6, r7
    6820:	d00a      	beq.n	6838 <z_impl_k_msgq_get+0xac>
		_current->base.swap_data = data;
    6822:	4b09      	ldr	r3, [pc, #36]	; (6848 <z_impl_k_msgq_get+0xbc>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6824:	4622      	mov	r2, r4
		_current->base.swap_data = data;
    6826:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6828:	4648      	mov	r0, r9
		_current->base.swap_data = data;
    682a:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    682c:	4641      	mov	r1, r8
    682e:	e9cd 6700 	strd	r6, r7, [sp]
    6832:	f000 fb45 	bl	6ec0 <z_pend_curr>
    6836:	e7ee      	b.n	6816 <z_impl_k_msgq_get+0x8a>
		result = -ENOMSG;
    6838:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
    683c:	f388 8811 	msr	BASEPRI, r8
    6840:	f3bf 8f6f 	isb	sy
	return result;
    6844:	e7e7      	b.n	6816 <z_impl_k_msgq_get+0x8a>
    6846:	bf00      	nop
    6848:	20000ea0 	.word	0x20000ea0

0000684c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    684c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6850:	4604      	mov	r4, r0
    6852:	4616      	mov	r6, r2
    6854:	461f      	mov	r7, r3
	__asm__ volatile(
    6856:	f04f 0320 	mov.w	r3, #32
    685a:	f3ef 8811 	mrs	r8, BASEPRI
    685e:	f383 8811 	msr	BASEPRI, r3
    6862:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6866:	68c3      	ldr	r3, [r0, #12]
    6868:	4a32      	ldr	r2, [pc, #200]	; (6934 <z_impl_k_mutex_lock+0xe8>)
    686a:	b16b      	cbz	r3, 6888 <z_impl_k_mutex_lock+0x3c>
    686c:	6880      	ldr	r0, [r0, #8]
    686e:	6891      	ldr	r1, [r2, #8]
    6870:	4288      	cmp	r0, r1
    6872:	d019      	beq.n	68a8 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6874:	ea56 0307 	orrs.w	r3, r6, r7
    6878:	d118      	bne.n	68ac <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    687a:	f388 8811 	msr	BASEPRI, r8
    687e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    6882:	f06f 000f 	mvn.w	r0, #15
    6886:	e00c      	b.n	68a2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    6888:	6891      	ldr	r1, [r2, #8]
    688a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    688e:	3301      	adds	r3, #1
    6890:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    6892:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6894:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    6896:	60a3      	str	r3, [r4, #8]
    6898:	f388 8811 	msr	BASEPRI, r8
    689c:	f3bf 8f6f 	isb	sy
		return 0;
    68a0:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    68a2:	b002      	add	sp, #8
    68a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    68a8:	6921      	ldr	r1, [r4, #16]
    68aa:	e7f0      	b.n	688e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    68ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
    68b0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    68b4:	4299      	cmp	r1, r3
    68b6:	bfa8      	it	ge
    68b8:	4619      	movge	r1, r3
    68ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    68be:	428b      	cmp	r3, r1
    68c0:	dd2c      	ble.n	691c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    68c2:	f000 fb11 	bl	6ee8 <z_set_prio>
    68c6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    68c8:	4622      	mov	r2, r4
    68ca:	4641      	mov	r1, r8
    68cc:	e9cd 6700 	strd	r6, r7, [sp]
    68d0:	4819      	ldr	r0, [pc, #100]	; (6938 <z_impl_k_mutex_lock+0xec>)
    68d2:	f000 faf5 	bl	6ec0 <z_pend_curr>
	if (got_mutex == 0) {
    68d6:	2800      	cmp	r0, #0
    68d8:	d0e3      	beq.n	68a2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    68da:	f04f 0320 	mov.w	r3, #32
    68de:	f3ef 8611 	mrs	r6, BASEPRI
    68e2:	f383 8811 	msr	BASEPRI, r3
    68e6:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    68ea:	6823      	ldr	r3, [r4, #0]
    68ec:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68ee:	429c      	cmp	r4, r3
    68f0:	d007      	beq.n	6902 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    68f2:	b133      	cbz	r3, 6902 <z_impl_k_mutex_lock+0xb6>
    68f4:	f993 300e 	ldrsb.w	r3, [r3, #14]
    68f8:	4299      	cmp	r1, r3
    68fa:	bfa8      	it	ge
    68fc:	4619      	movge	r1, r3
    68fe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6902:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    6904:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6908:	4299      	cmp	r1, r3
    690a:	d109      	bne.n	6920 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    690c:	b16d      	cbz	r5, 692a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    690e:	4631      	mov	r1, r6
    6910:	4809      	ldr	r0, [pc, #36]	; (6938 <z_impl_k_mutex_lock+0xec>)
    6912:	f003 fc50 	bl	a1b6 <z_reschedule>
	return -EAGAIN;
    6916:	f06f 000a 	mvn.w	r0, #10
    691a:	e7c2      	b.n	68a2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    691c:	2500      	movs	r5, #0
    691e:	e7d3      	b.n	68c8 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    6920:	f000 fae2 	bl	6ee8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6924:	2800      	cmp	r0, #0
    6926:	d1f2      	bne.n	690e <z_impl_k_mutex_lock+0xc2>
    6928:	e7f0      	b.n	690c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    692a:	f386 8811 	msr	BASEPRI, r6
    692e:	f3bf 8f6f 	isb	sy
    6932:	e7f0      	b.n	6916 <z_impl_k_mutex_lock+0xca>
    6934:	20000ea0 	.word	0x20000ea0
    6938:	2000123c 	.word	0x2000123c

0000693c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    693c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    693e:	6883      	ldr	r3, [r0, #8]
{
    6940:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    6942:	2b00      	cmp	r3, #0
    6944:	d037      	beq.n	69b6 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6946:	4a1f      	ldr	r2, [pc, #124]	; (69c4 <z_impl_k_mutex_unlock+0x88>)
    6948:	6892      	ldr	r2, [r2, #8]
    694a:	4293      	cmp	r3, r2
    694c:	d136      	bne.n	69bc <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    694e:	7bda      	ldrb	r2, [r3, #15]
    6950:	3a01      	subs	r2, #1
    6952:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    6954:	68c3      	ldr	r3, [r0, #12]
    6956:	2b01      	cmp	r3, #1
    6958:	d005      	beq.n	6966 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    695a:	3b01      	subs	r3, #1
    695c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    695e:	f000 f8c5 	bl	6aec <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    6962:	2000      	movs	r0, #0
}
    6964:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6966:	f04f 0320 	mov.w	r3, #32
    696a:	f3ef 8511 	mrs	r5, BASEPRI
    696e:	f383 8811 	msr	BASEPRI, r3
    6972:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6976:	6901      	ldr	r1, [r0, #16]
    6978:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    697a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    697e:	4299      	cmp	r1, r3
    6980:	d001      	beq.n	6986 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    6982:	f000 fab1 	bl	6ee8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6986:	4620      	mov	r0, r4
    6988:	f003 fcd3 	bl	a332 <z_unpend_first_thread>
	mutex->owner = new_owner;
    698c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    698e:	b160      	cbz	r0, 69aa <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
    6990:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6994:	6122      	str	r2, [r4, #16]
    6996:	2200      	movs	r2, #0
    6998:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
		z_ready_thread(new_owner);
    699c:	f003 fc53 	bl	a246 <z_ready_thread>
		z_reschedule(&lock, key);
    69a0:	4629      	mov	r1, r5
    69a2:	4809      	ldr	r0, [pc, #36]	; (69c8 <z_impl_k_mutex_unlock+0x8c>)
    69a4:	f003 fc07 	bl	a1b6 <z_reschedule>
    69a8:	e7d9      	b.n	695e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    69aa:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    69ac:	f385 8811 	msr	BASEPRI, r5
    69b0:	f3bf 8f6f 	isb	sy
    69b4:	e7d3      	b.n	695e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    69b6:	f06f 0015 	mvn.w	r0, #21
    69ba:	e7d3      	b.n	6964 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    69bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    69c0:	e7d0      	b.n	6964 <z_impl_k_mutex_unlock+0x28>
    69c2:	bf00      	nop
    69c4:	20000ea0 	.word	0x20000ea0
    69c8:	2000123c 	.word	0x2000123c

000069cc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    69cc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    69ce:	4c08      	ldr	r4, [pc, #32]	; (69f0 <z_reset_time_slice+0x24>)
    69d0:	6823      	ldr	r3, [r4, #0]
    69d2:	b15b      	cbz	r3, 69ec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    69d4:	f7fd faae 	bl	3f34 <z_clock_elapsed>
    69d8:	4603      	mov	r3, r0
    69da:	6820      	ldr	r0, [r4, #0]
    69dc:	4a05      	ldr	r2, [pc, #20]	; (69f4 <z_reset_time_slice+0x28>)
    69de:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    69e0:	2100      	movs	r1, #0
	}
}
    69e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    69e6:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    69e8:	f003 bd0e 	b.w	a408 <z_set_timeout_expiry>
}
    69ec:	bd10      	pop	{r4, pc}
    69ee:	bf00      	nop
    69f0:	20000edc 	.word	0x20000edc
    69f4:	20000ea0 	.word	0x20000ea0

000069f8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    69f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69fa:	4605      	mov	r5, r0
    69fc:	460c      	mov	r4, r1
	__asm__ volatile(
    69fe:	f04f 0320 	mov.w	r3, #32
    6a02:	f3ef 8611 	mrs	r6, BASEPRI
    6a06:	f383 8811 	msr	BASEPRI, r3
    6a0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    6a0e:	2200      	movs	r2, #0
			return (u32_t)((t * to_hz + off) / from_hz);
    6a10:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6a14:	f240 30e7 	movw	r0, #999	; 0x3e7
    6a18:	2100      	movs	r1, #0
    6a1a:	4b0a      	ldr	r3, [pc, #40]	; (6a44 <k_sched_time_slice_set+0x4c>)
    6a1c:	fbe7 0105 	umlal	r0, r1, r7, r5
    6a20:	611a      	str	r2, [r3, #16]
    6a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6a26:	2300      	movs	r3, #0
    6a28:	f7f9 fbde 	bl	1e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    6a2c:	4b06      	ldr	r3, [pc, #24]	; (6a48 <k_sched_time_slice_set+0x50>)
    6a2e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    6a30:	4b06      	ldr	r3, [pc, #24]	; (6a4c <k_sched_time_slice_set+0x54>)
    6a32:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    6a34:	f7ff ffca 	bl	69cc <z_reset_time_slice>
	__asm__ volatile(
    6a38:	f386 8811 	msr	BASEPRI, r6
    6a3c:	f3bf 8f6f 	isb	sy
	}
}
    6a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a42:	bf00      	nop
    6a44:	20000ea0 	.word	0x20000ea0
    6a48:	20000edc 	.word	0x20000edc
    6a4c:	20000ed8 	.word	0x20000ed8

00006a50 <k_sched_lock>:
	__asm__ volatile(
    6a50:	f04f 0320 	mov.w	r3, #32
    6a54:	f3ef 8111 	mrs	r1, BASEPRI
    6a58:	f383 8811 	msr	BASEPRI, r3
    6a5c:	f3bf 8f6f 	isb	sy
    6a60:	4b04      	ldr	r3, [pc, #16]	; (6a74 <k_sched_lock+0x24>)
    6a62:	689a      	ldr	r2, [r3, #8]
    6a64:	7bd3      	ldrb	r3, [r2, #15]
    6a66:	3b01      	subs	r3, #1
    6a68:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    6a6a:	f381 8811 	msr	BASEPRI, r1
    6a6e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    6a72:	4770      	bx	lr
    6a74:	20000ea0 	.word	0x20000ea0

00006a78 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    6a78:	4b09      	ldr	r3, [pc, #36]	; (6aa0 <z_priq_dumb_remove+0x28>)
    6a7a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    6a7e:	4282      	cmp	r2, r0
    6a80:	d105      	bne.n	6a8e <z_priq_dumb_remove+0x16>
    6a82:	689b      	ldr	r3, [r3, #8]
    6a84:	428b      	cmp	r3, r1
    6a86:	d102      	bne.n	6a8e <z_priq_dumb_remove+0x16>
    6a88:	7b4b      	ldrb	r3, [r1, #13]
    6a8a:	06db      	lsls	r3, r3, #27
    6a8c:	d106      	bne.n	6a9c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    6a8e:	e9d1 3200 	ldrd	r3, r2, [r1]
    6a92:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    6a94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6a96:	2300      	movs	r3, #0
	node->prev = NULL;
    6a98:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6a9c:	4770      	bx	lr
    6a9e:	bf00      	nop
    6aa0:	20000ea0 	.word	0x20000ea0

00006aa4 <update_cache>:
{
    6aa4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    6aa6:	4c10      	ldr	r4, [pc, #64]	; (6ae8 <update_cache+0x44>)
{
    6aa8:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    6aaa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6aae:	f003 fbc0 	bl	a232 <z_priq_dumb_best>
    6ab2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    6ab4:	68a3      	ldr	r3, [r4, #8]
    6ab6:	7b59      	ldrb	r1, [r3, #13]
    6ab8:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    6aba:	bf44      	itt	mi
    6abc:	f041 0108 	orrmi.w	r1, r1, #8
    6ac0:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    6ac2:	b905      	cbnz	r5, 6ac6 <update_cache+0x22>
    6ac4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    6ac6:	b94e      	cbnz	r6, 6adc <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    6ac8:	7b5a      	ldrb	r2, [r3, #13]
    6aca:	06d2      	lsls	r2, r2, #27
    6acc:	d106      	bne.n	6adc <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6ace:	69aa      	ldr	r2, [r5, #24]
    6ad0:	b922      	cbnz	r2, 6adc <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    6ad2:	89da      	ldrh	r2, [r3, #14]
    6ad4:	2a7f      	cmp	r2, #127	; 0x7f
    6ad6:	d901      	bls.n	6adc <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    6ad8:	6263      	str	r3, [r4, #36]	; 0x24
}
    6ada:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    6adc:	42ab      	cmp	r3, r5
    6ade:	d001      	beq.n	6ae4 <update_cache+0x40>
			z_reset_time_slice();
    6ae0:	f7ff ff74 	bl	69cc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6ae4:	6265      	str	r5, [r4, #36]	; 0x24
}
    6ae6:	e7f8      	b.n	6ada <update_cache+0x36>
    6ae8:	20000ea0 	.word	0x20000ea0

00006aec <k_sched_unlock>:
{
    6aec:	b510      	push	{r4, lr}
	__asm__ volatile(
    6aee:	f04f 0320 	mov.w	r3, #32
    6af2:	f3ef 8411 	mrs	r4, BASEPRI
    6af6:	f383 8811 	msr	BASEPRI, r3
    6afa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    6afe:	4b08      	ldr	r3, [pc, #32]	; (6b20 <k_sched_unlock+0x34>)
		update_cache(0);
    6b00:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    6b02:	689a      	ldr	r2, [r3, #8]
    6b04:	7bd3      	ldrb	r3, [r2, #15]
    6b06:	3301      	adds	r3, #1
    6b08:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6b0a:	f7ff ffcb 	bl	6aa4 <update_cache>
	__asm__ volatile(
    6b0e:	f384 8811 	msr	BASEPRI, r4
    6b12:	f3bf 8f6f 	isb	sy
}
    6b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    6b1a:	f003 bb63 	b.w	a1e4 <z_reschedule_unlocked>
    6b1e:	bf00      	nop
    6b20:	20000ea0 	.word	0x20000ea0

00006b24 <ready_thread>:
{
    6b24:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    6b26:	7b43      	ldrb	r3, [r0, #13]
    6b28:	06db      	lsls	r3, r3, #27
    6b2a:	d12a      	bne.n	6b82 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    6b2c:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    6b2e:	bb43      	cbnz	r3, 6b82 <ready_thread+0x5e>
	return list->head == list;
    6b30:	4a15      	ldr	r2, [pc, #84]	; (6b88 <ready_thread+0x64>)
    6b32:	4611      	mov	r1, r2
    6b34:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b38:	428c      	cmp	r4, r1
    6b3a:	bf18      	it	ne
    6b3c:	4623      	movne	r3, r4
    6b3e:	2b00      	cmp	r3, #0
    6b40:	bf38      	it	cc
    6b42:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6b44:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b46:	b1b3      	cbz	r3, 6b76 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    6b48:	f990 600e 	ldrsb.w	r6, [r0, #14]
    6b4c:	f993 500e 	ldrsb.w	r5, [r3, #14]
    6b50:	42ae      	cmp	r6, r5
    6b52:	db03      	blt.n	6b5c <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    6b54:	42a3      	cmp	r3, r4
    6b56:	d00e      	beq.n	6b76 <ready_thread+0x52>
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	e7f4      	b.n	6b46 <ready_thread+0x22>
	node->prev = successor->prev;
    6b5c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6b5e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    6b62:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    6b64:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    6b66:	7b43      	ldrb	r3, [r0, #13]
    6b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b6c:	7343      	strb	r3, [r0, #13]
}
    6b6e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    6b70:	2000      	movs	r0, #0
    6b72:	f7ff bf97 	b.w	6aa4 <update_cache>
	node->prev = list->tail;
    6b76:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    6b7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6b7c:	6018      	str	r0, [r3, #0]
	list->tail = node;
    6b7e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    6b80:	e7f1      	b.n	6b66 <ready_thread+0x42>
}
    6b82:	bc70      	pop	{r4, r5, r6}
    6b84:	4770      	bx	lr
    6b86:	bf00      	nop
    6b88:	20000ea0 	.word	0x20000ea0

00006b8c <z_sched_start>:
{
    6b8c:	b510      	push	{r4, lr}
	__asm__ volatile(
    6b8e:	f04f 0220 	mov.w	r2, #32
    6b92:	f3ef 8411 	mrs	r4, BASEPRI
    6b96:	f382 8811 	msr	BASEPRI, r2
    6b9a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    6b9e:	7b42      	ldrb	r2, [r0, #13]
    6ba0:	0751      	lsls	r1, r2, #29
    6ba2:	d404      	bmi.n	6bae <z_sched_start+0x22>
	__asm__ volatile(
    6ba4:	f384 8811 	msr	BASEPRI, r4
    6ba8:	f3bf 8f6f 	isb	sy
}
    6bac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6bae:	f022 0204 	bic.w	r2, r2, #4
    6bb2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    6bb4:	f7ff ffb6 	bl	6b24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6bb8:	4621      	mov	r1, r4
}
    6bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    6bbe:	4801      	ldr	r0, [pc, #4]	; (6bc4 <z_sched_start+0x38>)
    6bc0:	f003 baf9 	b.w	a1b6 <z_reschedule>
    6bc4:	2000123c 	.word	0x2000123c

00006bc8 <z_move_thread_to_end_of_prio_q>:
{
    6bc8:	4601      	mov	r1, r0
    6bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    6bcc:	f04f 0320 	mov.w	r3, #32
    6bd0:	f3ef 8411 	mrs	r4, BASEPRI
    6bd4:	f383 8811 	msr	BASEPRI, r3
    6bd8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6bdc:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6be0:	2b00      	cmp	r3, #0
    6be2:	da02      	bge.n	6bea <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    6be4:	4819      	ldr	r0, [pc, #100]	; (6c4c <z_move_thread_to_end_of_prio_q+0x84>)
    6be6:	f7ff ff47 	bl	6a78 <z_priq_dumb_remove>
	return list->head == list;
    6bea:	4a19      	ldr	r2, [pc, #100]	; (6c50 <z_move_thread_to_end_of_prio_q+0x88>)
    6bec:	4610      	mov	r0, r2
    6bee:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6bf2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6bf4:	4283      	cmp	r3, r0
    6bf6:	bf08      	it	eq
    6bf8:	2300      	moveq	r3, #0
    6bfa:	2b00      	cmp	r3, #0
    6bfc:	bf38      	it	cc
    6bfe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c00:	b1eb      	cbz	r3, 6c3e <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    6c02:	f991 700e 	ldrsb.w	r7, [r1, #14]
    6c06:	f993 600e 	ldrsb.w	r6, [r3, #14]
    6c0a:	42b7      	cmp	r7, r6
    6c0c:	db03      	blt.n	6c16 <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    6c0e:	429d      	cmp	r5, r3
    6c10:	d015      	beq.n	6c3e <z_move_thread_to_end_of_prio_q+0x76>
    6c12:	681b      	ldr	r3, [r3, #0]
    6c14:	e7f4      	b.n	6c00 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    6c16:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    6c18:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    6c1c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    6c1e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    6c20:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    6c22:	6890      	ldr	r0, [r2, #8]
    6c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6c28:	734b      	strb	r3, [r1, #13]
    6c2a:	1a43      	subs	r3, r0, r1
    6c2c:	4258      	negs	r0, r3
    6c2e:	4158      	adcs	r0, r3
    6c30:	f7ff ff38 	bl	6aa4 <update_cache>
	__asm__ volatile(
    6c34:	f384 8811 	msr	BASEPRI, r4
    6c38:	f3bf 8f6f 	isb	sy
}
    6c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    6c3e:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    6c42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6c44:	6019      	str	r1, [r3, #0]
	list->tail = node;
    6c46:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    6c48:	e7ea      	b.n	6c20 <z_move_thread_to_end_of_prio_q+0x58>
    6c4a:	bf00      	nop
    6c4c:	20000ec8 	.word	0x20000ec8
    6c50:	20000ea0 	.word	0x20000ea0

00006c54 <z_time_slice>:
{
    6c54:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    6c56:	4a15      	ldr	r2, [pc, #84]	; (6cac <z_time_slice+0x58>)
    6c58:	4b15      	ldr	r3, [pc, #84]	; (6cb0 <z_time_slice+0x5c>)
    6c5a:	6814      	ldr	r4, [r2, #0]
{
    6c5c:	4601      	mov	r1, r0
	if (pending_current == _current) {
    6c5e:	6898      	ldr	r0, [r3, #8]
    6c60:	42a0      	cmp	r0, r4
    6c62:	461c      	mov	r4, r3
    6c64:	d103      	bne.n	6c6e <z_time_slice+0x1a>
}
    6c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    6c6a:	f7ff beaf 	b.w	69cc <z_reset_time_slice>
	pending_current = NULL;
    6c6e:	2500      	movs	r5, #0
    6c70:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    6c72:	4a10      	ldr	r2, [pc, #64]	; (6cb4 <z_time_slice+0x60>)
    6c74:	6812      	ldr	r2, [r2, #0]
    6c76:	b1b2      	cbz	r2, 6ca6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    6c78:	89c2      	ldrh	r2, [r0, #14]
    6c7a:	2a7f      	cmp	r2, #127	; 0x7f
    6c7c:	d813      	bhi.n	6ca6 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6c7e:	4a0e      	ldr	r2, [pc, #56]	; (6cb8 <z_time_slice+0x64>)
    6c80:	f990 500e 	ldrsb.w	r5, [r0, #14]
    6c84:	6812      	ldr	r2, [r2, #0]
    6c86:	4295      	cmp	r5, r2
    6c88:	db0d      	blt.n	6ca6 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    6c8a:	4a0c      	ldr	r2, [pc, #48]	; (6cbc <z_time_slice+0x68>)
    6c8c:	4290      	cmp	r0, r2
    6c8e:	d00a      	beq.n	6ca6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    6c90:	6982      	ldr	r2, [r0, #24]
    6c92:	b942      	cbnz	r2, 6ca6 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    6c94:	691a      	ldr	r2, [r3, #16]
    6c96:	428a      	cmp	r2, r1
    6c98:	dc02      	bgt.n	6ca0 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    6c9a:	f7ff ff95 	bl	6bc8 <z_move_thread_to_end_of_prio_q>
    6c9e:	e7e2      	b.n	6c66 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    6ca0:	1a52      	subs	r2, r2, r1
    6ca2:	611a      	str	r2, [r3, #16]
}
    6ca4:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    6ca6:	2300      	movs	r3, #0
    6ca8:	6123      	str	r3, [r4, #16]
    6caa:	e7fb      	b.n	6ca4 <z_time_slice+0x50>
    6cac:	20000ed4 	.word	0x20000ed4
    6cb0:	20000ea0 	.word	0x20000ea0
    6cb4:	20000edc 	.word	0x20000edc
    6cb8:	20000ed8 	.word	0x20000ed8
    6cbc:	20000d50 	.word	0x20000d50

00006cc0 <z_impl_k_thread_suspend>:
{
    6cc0:	b570      	push	{r4, r5, r6, lr}
    6cc2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6cc4:	3018      	adds	r0, #24
    6cc6:	f003 fb79 	bl	a3bc <z_abort_timeout>
	__asm__ volatile(
    6cca:	f04f 0320 	mov.w	r3, #32
    6cce:	f3ef 8611 	mrs	r6, BASEPRI
    6cd2:	f383 8811 	msr	BASEPRI, r3
    6cd6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6cda:	f994 300d 	ldrsb.w	r3, [r4, #13]
    6cde:	2b00      	cmp	r3, #0
    6ce0:	da07      	bge.n	6cf2 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    6ce2:	4621      	mov	r1, r4
    6ce4:	480e      	ldr	r0, [pc, #56]	; (6d20 <z_impl_k_thread_suspend+0x60>)
    6ce6:	f7ff fec7 	bl	6a78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    6cea:	7b63      	ldrb	r3, [r4, #13]
    6cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6cf0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    6cf2:	4d0c      	ldr	r5, [pc, #48]	; (6d24 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6cf4:	7b63      	ldrb	r3, [r4, #13]
    6cf6:	68a8      	ldr	r0, [r5, #8]
    6cf8:	f043 0310 	orr.w	r3, r3, #16
    6cfc:	7363      	strb	r3, [r4, #13]
    6cfe:	1b03      	subs	r3, r0, r4
    6d00:	4258      	negs	r0, r3
    6d02:	4158      	adcs	r0, r3
    6d04:	f7ff fece 	bl	6aa4 <update_cache>
	__asm__ volatile(
    6d08:	f386 8811 	msr	BASEPRI, r6
    6d0c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6d10:	68ab      	ldr	r3, [r5, #8]
    6d12:	42a3      	cmp	r3, r4
    6d14:	d103      	bne.n	6d1e <z_impl_k_thread_suspend+0x5e>
}
    6d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6d1a:	f003 ba63 	b.w	a1e4 <z_reschedule_unlocked>
}
    6d1e:	bd70      	pop	{r4, r5, r6, pc}
    6d20:	20000ec8 	.word	0x20000ec8
    6d24:	20000ea0 	.word	0x20000ea0

00006d28 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    6d28:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    6d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d2e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    6d30:	b103      	cbz	r3, 6d34 <z_thread_single_abort+0xc>
		thread->fn_abort();
    6d32:	4798      	blx	r3
    6d34:	f104 0018 	add.w	r0, r4, #24
    6d38:	f003 fb40 	bl	a3bc <z_abort_timeout>
	__asm__ volatile(
    6d3c:	f04f 0320 	mov.w	r3, #32
    6d40:	f3ef 8611 	mrs	r6, BASEPRI
    6d44:	f383 8811 	msr	BASEPRI, r3
    6d48:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    6d4c:	7b63      	ldrb	r3, [r4, #13]
    6d4e:	06d8      	lsls	r0, r3, #27
    6d50:	d123      	bne.n	6d9a <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    6d52:	69a2      	ldr	r2, [r4, #24]
    6d54:	bb0a      	cbnz	r2, 6d9a <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    6d56:	0619      	lsls	r1, r3, #24
    6d58:	d507      	bpl.n	6d6a <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    6d5a:	4621      	mov	r1, r4
    6d5c:	481f      	ldr	r0, [pc, #124]	; (6ddc <z_thread_single_abort+0xb4>)
    6d5e:	f7ff fe8b 	bl	6a78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    6d62:	7b63      	ldrb	r3, [r4, #13]
    6d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6d68:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    6d6a:	4b1d      	ldr	r3, [pc, #116]	; (6de0 <z_thread_single_abort+0xb8>)
    6d6c:	6898      	ldr	r0, [r3, #8]
    6d6e:	1b02      	subs	r2, r0, r4
    6d70:	4250      	negs	r0, r2
    6d72:	4150      	adcs	r0, r2
    6d74:	f7ff fe96 	bl	6aa4 <update_cache>
			waiter->base.pended_on = NULL;
    6d78:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    6d7a:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6d7c:	f104 0828 	add.w	r8, r4, #40	; 0x28
    6d80:	f043 0308 	orr.w	r3, r3, #8
    6d84:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    6d86:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d88:	4545      	cmp	r5, r8
    6d8a:	d000      	beq.n	6d8e <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    6d8c:	b995      	cbnz	r5, 6db4 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    6d8e:	f386 8811 	msr	BASEPRI, r6
    6d92:	f3bf 8f6f 	isb	sy
}
    6d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    6d9a:	079b      	lsls	r3, r3, #30
    6d9c:	d5ec      	bpl.n	6d78 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    6d9e:	4621      	mov	r1, r4
    6da0:	68a0      	ldr	r0, [r4, #8]
    6da2:	f7ff fe69 	bl	6a78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6da6:	7b63      	ldrb	r3, [r4, #13]
    6da8:	f023 0302 	bic.w	r3, r3, #2
    6dac:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    6dae:	2300      	movs	r3, #0
    6db0:	60a3      	str	r3, [r4, #8]
    6db2:	e7e1      	b.n	6d78 <z_thread_single_abort+0x50>
    6db4:	f105 0018 	add.w	r0, r5, #24
    6db8:	f003 fb00 	bl	a3bc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    6dbc:	68a8      	ldr	r0, [r5, #8]
    6dbe:	4629      	mov	r1, r5
    6dc0:	f7ff fe5a 	bl	6a78 <z_priq_dumb_remove>
    6dc4:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    6dc6:	4628      	mov	r0, r5
    6dc8:	f023 0302 	bic.w	r3, r3, #2
    6dcc:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    6dce:	60af      	str	r7, [r5, #8]
    6dd0:	f8c5 70a4 	str.w	r7, [r5, #164]	; 0xa4
			ready_thread(waiter);
    6dd4:	f7ff fea6 	bl	6b24 <ready_thread>
    6dd8:	e7d5      	b.n	6d86 <z_thread_single_abort+0x5e>
    6dda:	bf00      	nop
    6ddc:	20000ec8 	.word	0x20000ec8
    6de0:	20000ea0 	.word	0x20000ea0

00006de4 <unready_thread>:
{
    6de4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    6de6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    6dea:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6dec:	2b00      	cmp	r3, #0
    6dee:	da06      	bge.n	6dfe <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    6df0:	4807      	ldr	r0, [pc, #28]	; (6e10 <unready_thread+0x2c>)
    6df2:	f7ff fe41 	bl	6a78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    6df6:	7b4b      	ldrb	r3, [r1, #13]
    6df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6dfc:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    6dfe:	4b05      	ldr	r3, [pc, #20]	; (6e14 <unready_thread+0x30>)
    6e00:	6898      	ldr	r0, [r3, #8]
    6e02:	1a43      	subs	r3, r0, r1
    6e04:	4258      	negs	r0, r3
    6e06:	4158      	adcs	r0, r3
}
    6e08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    6e0c:	f7ff be4a 	b.w	6aa4 <update_cache>
    6e10:	20000ec8 	.word	0x20000ec8
    6e14:	20000ea0 	.word	0x20000ea0

00006e18 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    6e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e1a:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    6e1c:	f003 fb0e 	bl	a43c <z_tick_get_32>
    6e20:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    6e22:	f04f 0320 	mov.w	r3, #32
    6e26:	f3ef 8711 	mrs	r7, BASEPRI
    6e2a:	f383 8811 	msr	BASEPRI, r3
    6e2e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6e32:	4e0d      	ldr	r6, [pc, #52]	; (6e68 <z_tick_sleep.part.0+0x50>)
    6e34:	4b0d      	ldr	r3, [pc, #52]	; (6e6c <z_tick_sleep.part.0+0x54>)
    6e36:	68b0      	ldr	r0, [r6, #8]
    6e38:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    6e3a:	f003 fa3f 	bl	a2bc <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    6e3e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    6e40:	490b      	ldr	r1, [pc, #44]	; (6e70 <z_tick_sleep.part.0+0x58>)
    6e42:	462a      	mov	r2, r5
    6e44:	17eb      	asrs	r3, r5, #31
    6e46:	3018      	adds	r0, #24
    6e48:	f000 fafe 	bl	7448 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6e4c:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
    6e4e:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6e50:	7b53      	ldrb	r3, [r2, #13]
    6e52:	f043 0310 	orr.w	r3, r3, #16
    6e56:	7353      	strb	r3, [r2, #13]
    6e58:	f7fd f93a 	bl	40d0 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    6e5c:	f003 faee 	bl	a43c <z_tick_get_32>
    6e60:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    6e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e68:	20000ea0 	.word	0x20000ea0
    6e6c:	20000ed4 	.word	0x20000ed4
    6e70:	0000a267 	.word	0x0000a267

00006e74 <pend>:
{
    6e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e78:	4606      	mov	r6, r0
    6e7a:	4614      	mov	r4, r2
    6e7c:	461d      	mov	r5, r3
    6e7e:	f04f 0320 	mov.w	r3, #32
    6e82:	f3ef 8711 	mrs	r7, BASEPRI
    6e86:	f383 8811 	msr	BASEPRI, r3
    6e8a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    6e8e:	f003 fa25 	bl	a2dc <add_to_waitq_locked>
	__asm__ volatile(
    6e92:	f387 8811 	msr	BASEPRI, r7
    6e96:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6e9a:	1c6b      	adds	r3, r5, #1
    6e9c:	bf08      	it	eq
    6e9e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    6ea2:	d008      	beq.n	6eb6 <pend+0x42>
    6ea4:	4622      	mov	r2, r4
    6ea6:	462b      	mov	r3, r5
    6ea8:	f106 0018 	add.w	r0, r6, #24
    6eac:	4903      	ldr	r1, [pc, #12]	; (6ebc <pend+0x48>)
}
    6eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6eb2:	f000 bac9 	b.w	7448 <z_add_timeout>
    6eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eba:	bf00      	nop
    6ebc:	0000a267 	.word	0x0000a267

00006ec0 <z_pend_curr>:
{
    6ec0:	b510      	push	{r4, lr}
    6ec2:	460c      	mov	r4, r1
	pending_current = _current;
    6ec4:	4b06      	ldr	r3, [pc, #24]	; (6ee0 <z_pend_curr+0x20>)
{
    6ec6:	4611      	mov	r1, r2
	pending_current = _current;
    6ec8:	6898      	ldr	r0, [r3, #8]
    6eca:	4b06      	ldr	r3, [pc, #24]	; (6ee4 <z_pend_curr+0x24>)
    6ecc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    6ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6ed2:	f7ff ffcf 	bl	6e74 <pend>
    6ed6:	4620      	mov	r0, r4
}
    6ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6edc:	f7fd b8f8 	b.w	40d0 <arch_swap>
    6ee0:	20000ea0 	.word	0x20000ea0
    6ee4:	20000ed4 	.word	0x20000ed4

00006ee8 <z_set_prio>:
{
    6ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6eec:	4604      	mov	r4, r0
	__asm__ volatile(
    6eee:	f04f 0320 	mov.w	r3, #32
    6ef2:	f3ef 8811 	mrs	r8, BASEPRI
    6ef6:	f383 8811 	msr	BASEPRI, r3
    6efa:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    6efe:	7b43      	ldrb	r3, [r0, #13]
    6f00:	b24e      	sxtb	r6, r1
    6f02:	06db      	lsls	r3, r3, #27
    6f04:	d12e      	bne.n	6f64 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    6f06:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    6f08:	bb65      	cbnz	r5, 6f64 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    6f0a:	4f18      	ldr	r7, [pc, #96]	; (6f6c <z_set_prio+0x84>)
    6f0c:	4621      	mov	r1, r4
    6f0e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    6f12:	f7ff fdb1 	bl	6a78 <z_priq_dumb_remove>
	return list->head == list;
    6f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f1a:	4283      	cmp	r3, r0
    6f1c:	bf18      	it	ne
    6f1e:	461d      	movne	r5, r3
    6f20:	2d00      	cmp	r5, #0
    6f22:	bf38      	it	cc
    6f24:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    6f26:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f28:	b1b5      	cbz	r5, 6f58 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    6f2a:	f995 100e 	ldrsb.w	r1, [r5, #14]
    6f2e:	42b1      	cmp	r1, r6
    6f30:	dc03      	bgt.n	6f3a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    6f32:	42aa      	cmp	r2, r5
    6f34:	d010      	beq.n	6f58 <z_set_prio+0x70>
    6f36:	682d      	ldr	r5, [r5, #0]
    6f38:	e7f6      	b.n	6f28 <z_set_prio+0x40>
	node->prev = successor->prev;
    6f3a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    6f3c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    6f40:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6f42:	606c      	str	r4, [r5, #4]
			update_cache(1);
    6f44:	2001      	movs	r0, #1
    6f46:	f7ff fdad 	bl	6aa4 <update_cache>
    6f4a:	2001      	movs	r0, #1
	__asm__ volatile(
    6f4c:	f388 8811 	msr	BASEPRI, r8
    6f50:	f3bf 8f6f 	isb	sy
}
    6f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    6f58:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    6f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f5e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6f60:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    6f62:	e7ef      	b.n	6f44 <z_set_prio+0x5c>
			thread->base.prio = prio;
    6f64:	2000      	movs	r0, #0
    6f66:	73a6      	strb	r6, [r4, #14]
    6f68:	e7f0      	b.n	6f4c <z_set_prio+0x64>
    6f6a:	bf00      	nop
    6f6c:	20000ea0 	.word	0x20000ea0

00006f70 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6f70:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    6f72:	4b04      	ldr	r3, [pc, #16]	; (6f84 <z_sched_init+0x14>)
    6f74:	4608      	mov	r0, r1
    6f76:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    6f7a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    6f7e:	f7ff bd3b 	b.w	69f8 <k_sched_time_slice_set>
    6f82:	bf00      	nop
    6f84:	20000ea0 	.word	0x20000ea0

00006f88 <z_impl_k_yield>:
{
    6f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    6f8a:	4c24      	ldr	r4, [pc, #144]	; (701c <z_impl_k_yield+0x94>)
    6f8c:	4b24      	ldr	r3, [pc, #144]	; (7020 <z_impl_k_yield+0x98>)
    6f8e:	68a2      	ldr	r2, [r4, #8]
    6f90:	429a      	cmp	r2, r3
    6f92:	d030      	beq.n	6ff6 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    6f94:	f04f 0320 	mov.w	r3, #32
    6f98:	f3ef 8511 	mrs	r5, BASEPRI
    6f9c:	f383 8811 	msr	BASEPRI, r3
    6fa0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    6fa4:	68a1      	ldr	r1, [r4, #8]
    6fa6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6faa:	f7ff fd65 	bl	6a78 <z_priq_dumb_remove>
	return list->head == list;
    6fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    6fb0:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fb2:	4283      	cmp	r3, r0
    6fb4:	bf08      	it	eq
    6fb6:	2300      	moveq	r3, #0
    6fb8:	2b00      	cmp	r3, #0
    6fba:	bf38      	it	cc
    6fbc:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6fbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6fc0:	b32b      	cbz	r3, 700e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    6fc2:	f992 700e 	ldrsb.w	r7, [r2, #14]
    6fc6:	f993 600e 	ldrsb.w	r6, [r3, #14]
    6fca:	42b7      	cmp	r7, r6
    6fcc:	db03      	blt.n	6fd6 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    6fce:	428b      	cmp	r3, r1
    6fd0:	d01d      	beq.n	700e <z_impl_k_yield+0x86>
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	e7f4      	b.n	6fc0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    6fd6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6fd8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    6fdc:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    6fde:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    6fe0:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    6fe2:	2001      	movs	r0, #1
    6fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6fe8:	7353      	strb	r3, [r2, #13]
    6fea:	f7ff fd5b 	bl	6aa4 <update_cache>
	__asm__ volatile(
    6fee:	f385 8811 	msr	BASEPRI, r5
    6ff2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    6ff6:	f04f 0320 	mov.w	r3, #32
    6ffa:	f3ef 8011 	mrs	r0, BASEPRI
    6ffe:	f383 8811 	msr	BASEPRI, r3
    7002:	f3bf 8f6f 	isb	sy
}
    7006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    700a:	f7fd b861 	b.w	40d0 <arch_swap>
	node->prev = list->tail;
    700e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    7012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7014:	601a      	str	r2, [r3, #0]
	list->tail = node;
    7016:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    7018:	e7e2      	b.n	6fe0 <z_impl_k_yield+0x58>
    701a:	bf00      	nop
    701c:	20000ea0 	.word	0x20000ea0
    7020:	20000d50 	.word	0x20000d50

00007024 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7024:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7026:	3301      	adds	r3, #1
    7028:	bf08      	it	eq
    702a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    702e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7030:	d106      	bne.n	7040 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    7032:	4b0b      	ldr	r3, [pc, #44]	; (7060 <z_impl_k_sleep+0x3c>)
    7034:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7036:	f7ff fe43 	bl	6cc0 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    703a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    703e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    7040:	4604      	mov	r4, r0
	if (ticks == 0) {
    7042:	b948      	cbnz	r0, 7058 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    7044:	f7ff ffa0 	bl	6f88 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
    7048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    704c:	fb84 3400 	smull	r3, r4, r4, r0
    7050:	0bd8      	lsrs	r0, r3, #15
    7052:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    7056:	e7f2      	b.n	703e <z_impl_k_sleep+0x1a>
    7058:	f7ff fede 	bl	6e18 <z_tick_sleep.part.0>
    705c:	4604      	mov	r4, r0
    705e:	e7f3      	b.n	7048 <z_impl_k_sleep+0x24>
    7060:	20000ea0 	.word	0x20000ea0

00007064 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7064:	4b01      	ldr	r3, [pc, #4]	; (706c <z_impl_k_current_get+0x8>)
    7066:	6898      	ldr	r0, [r3, #8]
    7068:	4770      	bx	lr
    706a:	bf00      	nop
    706c:	20000ea0 	.word	0x20000ea0

00007070 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7070:	b538      	push	{r3, r4, r5, lr}
    7072:	4604      	mov	r4, r0
    7074:	f04f 0320 	mov.w	r3, #32
    7078:	f3ef 8511 	mrs	r5, BASEPRI
    707c:	f383 8811 	msr	BASEPRI, r3
    7080:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    7084:	f003 f955 	bl	a332 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    7088:	b150      	cbz	r0, 70a0 <z_impl_k_sem_give+0x30>
    708a:	2200      	movs	r2, #0
    708c:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7090:	f003 f8d9 	bl	a246 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    7094:	4629      	mov	r1, r5
}
    7096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    709a:	4807      	ldr	r0, [pc, #28]	; (70b8 <z_impl_k_sem_give+0x48>)
    709c:	f003 b88b 	b.w	a1b6 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    70a0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    70a4:	429a      	cmp	r2, r3
    70a6:	bf18      	it	ne
    70a8:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    70aa:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    70ac:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    70ae:	f104 0010 	add.w	r0, r4, #16
    70b2:	f003 fb01 	bl	a6b8 <z_handle_obj_poll_events>
}
    70b6:	e7ed      	b.n	7094 <z_impl_k_sem_give+0x24>
    70b8:	2000123c 	.word	0x2000123c

000070bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    70bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    70be:	4614      	mov	r4, r2
    70c0:	461d      	mov	r5, r3
    70c2:	f04f 0320 	mov.w	r3, #32
    70c6:	f3ef 8111 	mrs	r1, BASEPRI
    70ca:	f383 8811 	msr	BASEPRI, r3
    70ce:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    70d2:	6883      	ldr	r3, [r0, #8]
    70d4:	b143      	cbz	r3, 70e8 <z_impl_k_sem_take+0x2c>
		sem->count--;
    70d6:	3b01      	subs	r3, #1
    70d8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    70da:	f381 8811 	msr	BASEPRI, r1
    70de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    70e2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    70e4:	b003      	add	sp, #12
    70e6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    70e8:	ea54 0305 	orrs.w	r3, r4, r5
    70ec:	d106      	bne.n	70fc <z_impl_k_sem_take+0x40>
    70ee:	f381 8811 	msr	BASEPRI, r1
    70f2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    70f6:	f06f 000f 	mvn.w	r0, #15
    70fa:	e7f3      	b.n	70e4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    70fc:	4602      	mov	r2, r0
    70fe:	e9cd 4500 	strd	r4, r5, [sp]
    7102:	4802      	ldr	r0, [pc, #8]	; (710c <z_impl_k_sem_take+0x50>)
    7104:	f7ff fedc 	bl	6ec0 <z_pend_curr>
	return ret;
    7108:	e7ec      	b.n	70e4 <z_impl_k_sem_take+0x28>
    710a:	bf00      	nop
    710c:	2000123c 	.word	0x2000123c

00007110 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	Z_STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    7110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7112:	4605      	mov	r5, r0
    7114:	460e      	mov	r6, r1
	__asm__ volatile(
    7116:	f04f 0320 	mov.w	r3, #32
    711a:	f3ef 8711 	mrs	r7, BASEPRI
    711e:	f383 8811 	msr	BASEPRI, r3
    7122:	f3bf 8f6f 	isb	sy
	 * modified by the user_cb either directly or indirectly.
	 * The indirect ways are through calling k_thread_create and
	 * k_thread_abort from user_cb.
	 */
	key = k_spin_lock(&z_thread_monitor_lock);
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    7126:	4b06      	ldr	r3, [pc, #24]	; (7140 <k_thread_foreach+0x30>)
    7128:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    712a:	b924      	cbnz	r4, 7136 <k_thread_foreach+0x26>
	__asm__ volatile(
    712c:	f387 8811 	msr	BASEPRI, r7
    7130:	f3bf 8f6f 	isb	sy
		user_cb(thread, user_data);
	}
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    7134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    7136:	4620      	mov	r0, r4
    7138:	4631      	mov	r1, r6
    713a:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    713c:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
    713e:	e7f4      	b.n	712a <k_thread_foreach+0x1a>
    7140:	20000ea0 	.word	0x20000ea0

00007144 <z_thread_monitor_exit>:
	__asm__ volatile(
    7144:	f04f 0320 	mov.w	r3, #32
    7148:	f3ef 8111 	mrs	r1, BASEPRI
    714c:	f383 8811 	msr	BASEPRI, r3
    7150:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    7154:	4a09      	ldr	r2, [pc, #36]	; (717c <z_thread_monitor_exit+0x38>)
    7156:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7158:	4283      	cmp	r3, r0
    715a:	d107      	bne.n	716c <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    715c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    715e:	6313      	str	r3, [r2, #48]	; 0x30
	__asm__ volatile(
    7160:	f381 8811 	msr	BASEPRI, r1
    7164:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    7168:	4770      	bx	lr
    716a:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    716c:	2b00      	cmp	r3, #0
    716e:	d0f7      	beq.n	7160 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    7170:	6eda      	ldr	r2, [r3, #108]	; 0x6c
		while ((prev_thread != NULL) &&
    7172:	4282      	cmp	r2, r0
    7174:	d1f9      	bne.n	716a <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    7176:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    7178:	66da      	str	r2, [r3, #108]	; 0x6c
    717a:	e7f1      	b.n	7160 <z_thread_monitor_exit+0x1c>
    717c:	20000ea0 	.word	0x20000ea0

00007180 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    7180:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    7182:	4604      	mov	r4, r0
    7184:	b908      	cbnz	r0, 718a <z_impl_k_thread_name_set+0xa>
		thread = _current;
    7186:	4b05      	ldr	r3, [pc, #20]	; (719c <z_impl_k_thread_name_set+0x1c>)
    7188:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    718a:	2220      	movs	r2, #32
    718c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    7190:	f002 fcea 	bl	9b68 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7194:	2000      	movs	r0, #0
    7196:	f884 008f 	strb.w	r0, [r4, #143]	; 0x8f
#else
	ARG_UNUSED(thread);
	ARG_UNUSED(value);
	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    719a:	bd10      	pop	{r4, pc}
    719c:	20000ea0 	.word	0x20000ea0

000071a0 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
    71a0:	7b43      	ldrb	r3, [r0, #13]
    71a2:	2b10      	cmp	r3, #16
    71a4:	d80e      	bhi.n	71c4 <k_thread_state_str+0x24>
    71a6:	2b10      	cmp	r3, #16
    71a8:	d81c      	bhi.n	71e4 <k_thread_state_str+0x44>
    71aa:	e8df f003 	tbb	[pc, r3]
    71ae:	091d      	.short	0x091d
    71b0:	1b151b13 	.word	0x1b151b13
    71b4:	1b171b1b 	.word	0x1b171b1b
    71b8:	1b1b1b1b 	.word	0x1b1b1b1b
    71bc:	1b1b      	.short	0x1b1b
    71be:	19          	.byte	0x19
    71bf:	00          	.byte	0x00
    71c0:	480b      	ldr	r0, [pc, #44]	; (71f0 <k_thread_state_str+0x50>)
    71c2:	4770      	bx	lr
    71c4:	2b20      	cmp	r3, #32
    71c6:	d011      	beq.n	71ec <k_thread_state_str+0x4c>
		break;
	case _THREAD_ABORTING:
		return "aborting";
		break;
	case _THREAD_QUEUED:
		return "queued";
    71c8:	4a0a      	ldr	r2, [pc, #40]	; (71f4 <k_thread_state_str+0x54>)
    71ca:	480b      	ldr	r0, [pc, #44]	; (71f8 <k_thread_state_str+0x58>)
    71cc:	2b80      	cmp	r3, #128	; 0x80
    71ce:	bf08      	it	eq
    71d0:	4610      	moveq	r0, r2
    71d2:	4770      	bx	lr
		return "pending";
    71d4:	4809      	ldr	r0, [pc, #36]	; (71fc <k_thread_state_str+0x5c>)
    71d6:	4770      	bx	lr
		return "prestart";
    71d8:	4809      	ldr	r0, [pc, #36]	; (7200 <k_thread_state_str+0x60>)
    71da:	4770      	bx	lr
		return "dead";
    71dc:	4809      	ldr	r0, [pc, #36]	; (7204 <k_thread_state_str+0x64>)
    71de:	4770      	bx	lr
		return "suspended";
    71e0:	4809      	ldr	r0, [pc, #36]	; (7208 <k_thread_state_str+0x68>)
    71e2:	4770      	bx	lr
		break;
	}
	return "unknown";
    71e4:	4804      	ldr	r0, [pc, #16]	; (71f8 <k_thread_state_str+0x58>)
    71e6:	4770      	bx	lr
		return "";
    71e8:	4808      	ldr	r0, [pc, #32]	; (720c <k_thread_state_str+0x6c>)
    71ea:	4770      	bx	lr
		return "aborting";
    71ec:	4808      	ldr	r0, [pc, #32]	; (7210 <k_thread_state_str+0x70>)
}
    71ee:	4770      	bx	lr
    71f0:	0000d082 	.word	0x0000d082
    71f4:	0000d091 	.word	0x0000d091
    71f8:	0000cf9d 	.word	0x0000cf9d
    71fc:	0000d062 	.word	0x0000d062
    7200:	0000d06a 	.word	0x0000d06a
    7204:	0000d073 	.word	0x0000d073
    7208:	0000d078 	.word	0x0000d078
    720c:	0000c050 	.word	0x0000c050
    7210:	0000d088 	.word	0x0000d088

00007214 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    7214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_dlist_init(&w->waitq);
    7218:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    721c:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    7220:	2504      	movs	r5, #4
    7222:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    7224:	2500      	movs	r5, #0
{
    7226:	4604      	mov	r4, r0
    7228:	461e      	mov	r6, r3
    722a:	b086      	sub	sp, #24
    722c:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
    7230:	e9dd 8c10 	ldrd	r8, ip, [sp, #64]	; 0x40
	node->prev = NULL;
    7234:	e9c0 5506 	strd	r5, r5, [r0, #24]
    7238:	e9dd e712 	ldrd	lr, r7, [sp, #72]	; 0x48
	thread_base->prio = priority;
    723c:	f880 c00e 	strb.w	ip, [r0, #14]
	thread_base->user_options = (u8_t)options;
    7240:	f880 e00c 	strb.w	lr, [r0, #12]
	thread_base->sched_locked = 0U;
    7244:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7246:	e9cd ce03 	strd	ip, lr, [sp, #12]
    724a:	e9cd 9801 	strd	r9, r8, [sp, #4]
    724e:	f8cd a000 	str.w	sl, [sp]
    7252:	f7fc ffb5 	bl	41c0 <arch_new_thread>
	new_thread->fn_abort = NULL;
    7256:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
    725a:	e9c4 6a17 	strd	r6, sl, [r4, #92]	; 0x5c
	new_thread->entry.parameter3 = p3;
    725e:	e9c4 9819 	strd	r9, r8, [r4, #100]	; 0x64
	__asm__ volatile(
    7262:	f04f 0320 	mov.w	r3, #32
    7266:	f3ef 8211 	mrs	r2, BASEPRI
    726a:	f383 8811 	msr	BASEPRI, r3
    726e:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    7272:	4e0e      	ldr	r6, [pc, #56]	; (72ac <z_setup_new_thread+0x98>)
    7274:	6b31      	ldr	r1, [r6, #48]	; 0x30
	_kernel.threads = new_thread;
    7276:	6334      	str	r4, [r6, #48]	; 0x30
	new_thread->next_thread = _kernel.threads;
    7278:	66e1      	str	r1, [r4, #108]	; 0x6c
	__asm__ volatile(
    727a:	f382 8811 	msr	BASEPRI, r2
    727e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    7282:	b187      	cbz	r7, 72a6 <z_setup_new_thread+0x92>
		strncpy(new_thread->name, name,
    7284:	221f      	movs	r2, #31
    7286:	4639      	mov	r1, r7
    7288:	f104 0070 	add.w	r0, r4, #112	; 0x70
    728c:	f002 fc6c 	bl	9b68 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7290:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
	if (!_current) {
    7294:	68b3      	ldr	r3, [r6, #8]
    7296:	b10b      	cbz	r3, 729c <z_setup_new_thread+0x88>
	new_thread->resource_pool = _current->resource_pool;
    7298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	sys_trace_thread_create(new_thread);
    729c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
    72a0:	b006      	add	sp, #24
    72a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		new_thread->name[0] = '\0';
    72a6:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    72aa:	e7f3      	b.n	7294 <z_setup_new_thread+0x80>
    72ac:	20000ea0 	.word	0x20000ea0

000072b0 <z_impl_k_thread_create>:
{
    72b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    72b2:	2500      	movs	r5, #0
{
    72b4:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    72b6:	9505      	str	r5, [sp, #20]
    72b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    72ba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    72be:	9504      	str	r5, [sp, #16]
    72c0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    72c2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    72c4:	9503      	str	r5, [sp, #12]
    72c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    72c8:	9502      	str	r5, [sp, #8]
    72ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    72cc:	9501      	str	r5, [sp, #4]
    72ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    72d0:	9500      	str	r5, [sp, #0]
    72d2:	f7ff ff9f 	bl	7214 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    72d6:	1c7b      	adds	r3, r7, #1
    72d8:	bf08      	it	eq
    72da:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    72de:	d005      	beq.n	72ec <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    72e0:	ea56 0307 	orrs.w	r3, r6, r7
    72e4:	d105      	bne.n	72f2 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    72e6:	4620      	mov	r0, r4
    72e8:	f7ff fc50 	bl	6b8c <z_sched_start>
}
    72ec:	4620      	mov	r0, r4
    72ee:	b007      	add	sp, #28
    72f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    72f2:	4632      	mov	r2, r6
    72f4:	463b      	mov	r3, r7
    72f6:	4903      	ldr	r1, [pc, #12]	; (7304 <z_impl_k_thread_create+0x54>)
    72f8:	f104 0018 	add.w	r0, r4, #24
    72fc:	f000 f8a4 	bl	7448 <z_add_timeout>
    7300:	e7f4      	b.n	72ec <z_impl_k_thread_create+0x3c>
    7302:	bf00      	nop
    7304:	0000a267 	.word	0x0000a267

00007308 <z_init_static_threads>:
{
    7308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    730c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 73c4 <z_init_static_threads+0xbc>
    7310:	4d2b      	ldr	r5, [pc, #172]	; (73c0 <z_init_static_threads+0xb8>)
    7312:	46c8      	mov	r8, r9
{
    7314:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    7316:	454d      	cmp	r5, r9
    7318:	f105 0430 	add.w	r4, r5, #48	; 0x30
    731c:	d30d      	bcc.n	733a <z_init_static_threads+0x32>
	k_sched_lock();
    731e:	f7ff fb97 	bl	6a50 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
    7322:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
    7326:	4c26      	ldr	r4, [pc, #152]	; (73c0 <z_init_static_threads+0xb8>)
    7328:	f8df a09c 	ldr.w	sl, [pc, #156]	; 73c8 <z_init_static_threads+0xc0>
    732c:	4544      	cmp	r4, r8
    732e:	d321      	bcc.n	7374 <z_init_static_threads+0x6c>
}
    7330:	b007      	add	sp, #28
    7332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    7336:	f7ff bbd9 	b.w	6aec <k_sched_unlock>
		z_setup_new_thread(
    733a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    733e:	9305      	str	r3, [sp, #20]
    7340:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7344:	9304      	str	r3, [sp, #16]
    7346:	f854 3c14 	ldr.w	r3, [r4, #-20]
    734a:	9303      	str	r3, [sp, #12]
    734c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7350:	9302      	str	r3, [sp, #8]
    7352:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7356:	9301      	str	r3, [sp, #4]
    7358:	f854 3c20 	ldr.w	r3, [r4, #-32]
    735c:	9300      	str	r3, [sp, #0]
    735e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7362:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7366:	f7ff ff55 	bl	7214 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    736a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    736e:	655d      	str	r5, [r3, #84]	; 0x54
    7370:	4625      	mov	r5, r4
    7372:	e7d0      	b.n	7316 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7374:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7376:	1c4b      	adds	r3, r1, #1
    7378:	d017      	beq.n	73aa <z_init_static_threads+0xa2>
    737a:	f240 3be7 	movw	fp, #999	; 0x3e7
    737e:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
    7382:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    7386:	fbc9 bc01 	smlal	fp, ip, r9, r1
    738a:	2300      	movs	r3, #0
    738c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7390:	4658      	mov	r0, fp
    7392:	4661      	mov	r1, ip
    7394:	f7f8 ff28 	bl	1e8 <__aeabi_uldivmod>
    7398:	2700      	movs	r7, #0
    739a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    739c:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    73a0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    73a2:	d104      	bne.n	73ae <z_init_static_threads+0xa6>
	z_sched_start(thread);
    73a4:	4628      	mov	r0, r5
    73a6:	f7ff fbf1 	bl	6b8c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    73aa:	3430      	adds	r4, #48	; 0x30
    73ac:	e7be      	b.n	732c <z_init_static_threads+0x24>
    73ae:	4602      	mov	r2, r0
    73b0:	463b      	mov	r3, r7
    73b2:	4651      	mov	r1, sl
    73b4:	f105 0018 	add.w	r0, r5, #24
    73b8:	f000 f846 	bl	7448 <z_add_timeout>
    73bc:	e7f5      	b.n	73aa <z_init_static_threads+0xa2>
    73be:	bf00      	nop
    73c0:	200001c4 	.word	0x200001c4
    73c4:	200001c4 	.word	0x200001c4
    73c8:	0000a267 	.word	0x0000a267

000073cc <sys_kernel_version_get>:
 * @return kernel version
 */
u32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    73cc:	4800      	ldr	r0, [pc, #0]	; (73d0 <sys_kernel_version_get+0x4>)
    73ce:	4770      	bx	lr
    73d0:	02030000 	.word	0x02030000

000073d4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    73d4:	4b03      	ldr	r3, [pc, #12]	; (73e4 <elapsed+0x10>)
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	b90b      	cbnz	r3, 73de <elapsed+0xa>
    73da:	f7fc bdab 	b.w	3f34 <z_clock_elapsed>
}
    73de:	2000      	movs	r0, #0
    73e0:	4770      	bx	lr
    73e2:	bf00      	nop
    73e4:	20000ee0 	.word	0x20000ee0

000073e8 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    73e8:	6803      	ldr	r3, [r0, #0]
    73ea:	b140      	cbz	r0, 73fe <remove_timeout+0x16>
    73ec:	4a07      	ldr	r2, [pc, #28]	; (740c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    73ee:	6852      	ldr	r2, [r2, #4]
    73f0:	4290      	cmp	r0, r2
    73f2:	d004      	beq.n	73fe <remove_timeout+0x16>
	if (next(t) != NULL) {
    73f4:	b11b      	cbz	r3, 73fe <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    73f6:	689a      	ldr	r2, [r3, #8]
    73f8:	6881      	ldr	r1, [r0, #8]
    73fa:	440a      	add	r2, r1
    73fc:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    73fe:	6842      	ldr	r2, [r0, #4]
    7400:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    7402:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7404:	2300      	movs	r3, #0
	node->prev = NULL;
    7406:	e9c0 3300 	strd	r3, r3, [r0]
}
    740a:	4770      	bx	lr
    740c:	200000ec 	.word	0x200000ec

00007410 <next_timeout>:
	return list->head == list;
    7410:	4b0b      	ldr	r3, [pc, #44]	; (7440 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    7412:	b510      	push	{r4, lr}
    7414:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7416:	429c      	cmp	r4, r3
    7418:	bf08      	it	eq
    741a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    741c:	f7ff ffda 	bl	73d4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    7420:	b154      	cbz	r4, 7438 <next_timeout+0x28>
    7422:	68a3      	ldr	r3, [r4, #8]
    7424:	1a18      	subs	r0, r3, r0
    7426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    742a:	4b06      	ldr	r3, [pc, #24]	; (7444 <next_timeout+0x34>)
    742c:	691b      	ldr	r3, [r3, #16]
    742e:	b113      	cbz	r3, 7436 <next_timeout+0x26>
    7430:	4298      	cmp	r0, r3
    7432:	bfa8      	it	ge
    7434:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7436:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    7438:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    743c:	e7f5      	b.n	742a <next_timeout+0x1a>
    743e:	bf00      	nop
    7440:	200000ec 	.word	0x200000ec
    7444:	20000ea0 	.word	0x20000ea0

00007448 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    744c:	9101      	str	r1, [sp, #4]
    744e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7450:	1c4b      	adds	r3, r1, #1
    7452:	bf08      	it	eq
    7454:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    7458:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    745a:	d061      	beq.n	7520 <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    745c:	f06f 0301 	mvn.w	r3, #1
    7460:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
    7464:	1c54      	adds	r4, r2, #1
    7466:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    746a:	ebb3 0804 	subs.w	r8, r3, r4
    746e:	eb6b 0905 	sbc.w	r9, fp, r5
    7472:	f1b8 0f00 	cmp.w	r8, #0
    7476:	f179 0300 	sbcs.w	r3, r9, #0
    747a:	db0f      	blt.n	749c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    747c:	f7ff ffaa 	bl	73d4 <elapsed>
    7480:	f06f 0301 	mvn.w	r3, #1
    7484:	4a2b      	ldr	r2, [pc, #172]	; (7534 <z_add_timeout+0xec>)
    7486:	e9d2 1c00 	ldrd	r1, ip, [r2]
    748a:	1a5b      	subs	r3, r3, r1
    748c:	eb6b 020c 	sbc.w	r2, fp, ip
    7490:	1b1e      	subs	r6, r3, r4
    7492:	eb62 0705 	sbc.w	r7, r2, r5
    7496:	1a34      	subs	r4, r6, r0
    7498:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    749c:	9b01      	ldr	r3, [sp, #4]
    749e:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
    74a2:	f04f 0320 	mov.w	r3, #32
    74a6:	f3ef 8611 	mrs	r6, BASEPRI
    74aa:	f383 8811 	msr	BASEPRI, r3
    74ae:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    74b2:	f7ff ff8f 	bl	73d4 <elapsed>
	ticks = MAX(1, ticks);
    74b6:	2c01      	cmp	r4, #1
    74b8:	f175 0300 	sbcs.w	r3, r5, #0
    74bc:	bfb8      	it	lt
    74be:	2401      	movlt	r4, #1
	return list->head == list;
    74c0:	4b1d      	ldr	r3, [pc, #116]	; (7538 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
    74c2:	4404      	add	r4, r0
    74c4:	681a      	ldr	r2, [r3, #0]
    74c6:	f8ca 4008 	str.w	r4, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    74ca:	429a      	cmp	r2, r3
    74cc:	d001      	beq.n	74d2 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    74ce:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    74d0:	b952      	cbnz	r2, 74e8 <z_add_timeout+0xa0>
	node->prev = list->tail;
    74d2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    74d4:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    74d8:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    74dc:	685a      	ldr	r2, [r3, #4]
    74de:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    74e2:	f8c3 a004 	str.w	sl, [r3, #4]
}
    74e6:	e00d      	b.n	7504 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    74e8:	6890      	ldr	r0, [r2, #8]
    74ea:	f8da 1008 	ldr.w	r1, [sl, #8]
    74ee:	4288      	cmp	r0, r1
    74f0:	dd19      	ble.n	7526 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    74f2:	1a41      	subs	r1, r0, r1
    74f4:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    74f6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    74f8:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    74fc:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    7500:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    7504:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7506:	429a      	cmp	r2, r3
    7508:	d006      	beq.n	7518 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    750a:	4592      	cmp	sl, r2
    750c:	d104      	bne.n	7518 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    750e:	f7ff ff7f 	bl	7410 <next_timeout>
    7512:	2100      	movs	r1, #0
    7514:	f7fc fcaa 	bl	3e6c <z_clock_set_timeout>
	__asm__ volatile(
    7518:	f386 8811 	msr	BASEPRI, r6
    751c:	f3bf 8f6f 	isb	sy
		}
	}
}
    7520:	b003      	add	sp, #12
    7522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    7526:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    7528:	4294      	cmp	r4, r2
    752a:	f8ca 1008 	str.w	r1, [sl, #8]
    752e:	d0d0      	beq.n	74d2 <z_add_timeout+0x8a>
    7530:	6812      	ldr	r2, [r2, #0]
    7532:	e7cd      	b.n	74d0 <z_add_timeout+0x88>
    7534:	200002f8 	.word	0x200002f8
    7538:	200000ec 	.word	0x200000ec

0000753c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7540:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7542:	f7ff fb87 	bl	6c54 <z_time_slice>
	__asm__ volatile(
    7546:	f04f 0320 	mov.w	r3, #32
    754a:	f3ef 8411 	mrs	r4, BASEPRI
    754e:	f383 8811 	msr	BASEPRI, r3
    7552:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7556:	f8df 8084 	ldr.w	r8, [pc, #132]	; 75dc <z_clock_announce+0xa0>
    755a:	4d1f      	ldr	r5, [pc, #124]	; (75d8 <z_clock_announce+0x9c>)
    755c:	46c1      	mov	r9, r8
	return list->head == list;
    755e:	f8df a080 	ldr.w	sl, [pc, #128]	; 75e0 <z_clock_announce+0xa4>
    7562:	602e      	str	r6, [r5, #0]
    7564:	f8da 0000 	ldr.w	r0, [sl]
    7568:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    756a:	4550      	cmp	r0, sl
    756c:	e9d8 6700 	ldrd	r6, r7, [r8]
    7570:	d005      	beq.n	757e <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7572:	b120      	cbz	r0, 757e <z_clock_announce+0x42>
    7574:	6883      	ldr	r3, [r0, #8]
    7576:	4293      	cmp	r3, r2
    7578:	dd13      	ble.n	75a2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    757a:	1a9b      	subs	r3, r3, r2
    757c:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    757e:	18b6      	adds	r6, r6, r2
    7580:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    7584:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    7588:	2600      	movs	r6, #0
    758a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    758c:	f7ff ff40 	bl	7410 <next_timeout>
    7590:	4631      	mov	r1, r6
    7592:	f7fc fc6b 	bl	3e6c <z_clock_set_timeout>
	__asm__ volatile(
    7596:	f384 8811 	msr	BASEPRI, r4
    759a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    759e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    75a2:	18f6      	adds	r6, r6, r3
    75a4:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    75a8:	1ad3      	subs	r3, r2, r3
    75aa:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    75ac:	2300      	movs	r3, #0
    75ae:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    75b0:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    75b4:	f7ff ff18 	bl	73e8 <remove_timeout>
    75b8:	f384 8811 	msr	BASEPRI, r4
    75bc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    75c0:	68c3      	ldr	r3, [r0, #12]
    75c2:	4798      	blx	r3
	__asm__ volatile(
    75c4:	f04f 0320 	mov.w	r3, #32
    75c8:	f3ef 8411 	mrs	r4, BASEPRI
    75cc:	f383 8811 	msr	BASEPRI, r3
    75d0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    75d4:	e7c6      	b.n	7564 <z_clock_announce+0x28>
    75d6:	bf00      	nop
    75d8:	20000ee0 	.word	0x20000ee0
    75dc:	200002f8 	.word	0x200002f8
    75e0:	200000ec 	.word	0x200000ec

000075e4 <z_tick_get>:

s64_t z_tick_get(void)
{
    75e4:	b510      	push	{r4, lr}
    75e6:	f04f 0320 	mov.w	r3, #32
    75ea:	f3ef 8411 	mrs	r4, BASEPRI
    75ee:	f383 8811 	msr	BASEPRI, r3
    75f2:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    75f6:	f7fc fc9d 	bl	3f34 <z_clock_elapsed>
    75fa:	4b06      	ldr	r3, [pc, #24]	; (7614 <z_tick_get+0x30>)
    75fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7600:	1812      	adds	r2, r2, r0
    7602:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    7606:	f384 8811 	msr	BASEPRI, r4
    760a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    760e:	4610      	mov	r0, r2
    7610:	4619      	mov	r1, r3
    7612:	bd10      	pop	{r4, pc}
    7614:	200002f8 	.word	0x200002f8

00007618 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    7618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    761a:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    761e:	1c56      	adds	r6, r2, #1
    7620:	f143 0700 	adc.w	r7, r3, #0
    7624:	2f00      	cmp	r7, #0
    7626:	bf08      	it	eq
    7628:	2e02      	cmpeq	r6, #2
{
    762a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    762c:	d302      	bcc.n	7634 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    762e:	490c      	ldr	r1, [pc, #48]	; (7660 <z_timer_expiration_handler+0x48>)
    7630:	f7ff ff0a 	bl	7448 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    7634:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7636:	3301      	adds	r3, #1
    7638:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    763a:	69a3      	ldr	r3, [r4, #24]
    763c:	b10b      	cbz	r3, 7642 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    763e:	4620      	mov	r0, r4
    7640:	4798      	blx	r3
	return list->head == list;
    7642:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7646:	42a5      	cmp	r5, r4
    7648:	d009      	beq.n	765e <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    764a:	b145      	cbz	r5, 765e <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    764c:	4628      	mov	r0, r5
    764e:	f002 fd99 	bl	a184 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    7652:	4628      	mov	r0, r5
    7654:	f002 fdf7 	bl	a246 <z_ready_thread>
    7658:	2300      	movs	r3, #0
    765a:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4

	arch_thread_return_value_set(thread, 0);
}
    765e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7660:	00007619 	.word	0x00007619

00007664 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7664:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    7668:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    766c:	ea54 0105 	orrs.w	r1, r4, r5
{
    7670:	4680      	mov	r8, r0
    7672:	4616      	mov	r6, r2
    7674:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    7676:	d016      	beq.n	76a6 <z_impl_k_timer_start+0x42>
    7678:	f06f 0101 	mvn.w	r1, #1
    767c:	ebb1 0a04 	subs.w	sl, r1, r4
    7680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7684:	eb61 0b05 	sbc.w	fp, r1, r5
    7688:	f1ba 0f00 	cmp.w	sl, #0
    768c:	f17b 0100 	sbcs.w	r1, fp, #0
    7690:	da09      	bge.n	76a6 <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
    7692:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    7696:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    769a:	2c01      	cmp	r4, #1
    769c:	f175 0100 	sbcs.w	r1, r5, #0
    76a0:	bfbc      	itt	lt
    76a2:	2401      	movlt	r4, #1
    76a4:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    76a6:	f06f 0101 	mvn.w	r1, #1
    76aa:	1a89      	subs	r1, r1, r2
    76ac:	9100      	str	r1, [sp, #0]
    76ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    76b2:	eb61 0103 	sbc.w	r1, r1, r3
    76b6:	9101      	str	r1, [sp, #4]
    76b8:	e9dd 0100 	ldrd	r0, r1, [sp]
    76bc:	2800      	cmp	r0, #0
    76be:	f171 0100 	sbcs.w	r1, r1, #0
    76c2:	da09      	bge.n	76d8 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
    76c4:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
    76c8:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
    76cc:	2e00      	cmp	r6, #0
    76ce:	f177 0300 	sbcs.w	r3, r7, #0
    76d2:	bfbc      	itt	lt
    76d4:	2600      	movlt	r6, #0
    76d6:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    76d8:	4640      	mov	r0, r8
    76da:	f002 fe6f 	bl	a3bc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    76de:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    76e0:	4632      	mov	r2, r6
	timer->status = 0U;
    76e2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    76e6:	4640      	mov	r0, r8
    76e8:	463b      	mov	r3, r7
    76ea:	4904      	ldr	r1, [pc, #16]	; (76fc <z_impl_k_timer_start+0x98>)
	timer->period = period;
    76ec:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
    76f0:	b002      	add	sp, #8
    76f2:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    76f6:	f7ff bea7 	b.w	7448 <z_add_timeout>
    76fa:	bf00      	nop
    76fc:	00007619 	.word	0x00007619

00007700 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    7700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7704:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
    7706:	2301      	movs	r3, #1
{
    7708:	b089      	sub	sp, #36	; 0x24
	struct _poller poller = { .is_polling = true,
    770a:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
    770e:	4b29      	ldr	r3, [pc, #164]	; (77b4 <z_impl_k_poll+0xb4>)
{
    7710:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
    7712:	689b      	ldr	r3, [r3, #8]
{
    7714:	4605      	mov	r5, r0
	struct _poller poller = { .is_polling = true,
    7716:	9306      	str	r3, [sp, #24]
    7718:	4b27      	ldr	r3, [pc, #156]	; (77b8 <z_impl_k_poll+0xb8>)
    771a:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
    771c:	ea52 0307 	orrs.w	r3, r2, r7
    7720:	bf0c      	ite	eq
    7722:	2301      	moveq	r3, #1
    7724:	2300      	movne	r3, #0
    7726:	aa05      	add	r2, sp, #20
    7728:	f002 ff56 	bl	a5d8 <register_events>
    772c:	4680      	mov	r8, r0
	__asm__ volatile(
    772e:	f04f 0320 	mov.w	r3, #32
    7732:	f3ef 8911 	mrs	r9, BASEPRI
    7736:	f383 8811 	msr	BASEPRI, r3
    773a:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
    773e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7742:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7746:	b963      	cbnz	r3, 7762 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
    7748:	4601      	mov	r1, r0
    774a:	464a      	mov	r2, r9
    774c:	4628      	mov	r0, r5
    774e:	f002 fea9 	bl	a4a4 <clear_event_registrations>
	__asm__ volatile(
    7752:	f389 8811 	msr	BASEPRI, r9
    7756:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
    775a:	4620      	mov	r0, r4
    775c:	b009      	add	sp, #36	; 0x24
    775e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
    7762:	2300      	movs	r3, #0
    7764:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7768:	ea56 0307 	orrs.w	r3, r6, r7
    776c:	d106      	bne.n	777c <z_impl_k_poll+0x7c>
    776e:	f389 8811 	msr	BASEPRI, r9
    7772:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    7776:	f06f 040a 	mvn.w	r4, #10
    777a:	e7ee      	b.n	775a <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    777c:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    777e:	4649      	mov	r1, r9
    7780:	e9cd 6700 	strd	r6, r7, [sp]
    7784:	480d      	ldr	r0, [pc, #52]	; (77bc <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    7786:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    778a:	f7ff fb99 	bl	6ec0 <z_pend_curr>
    778e:	4604      	mov	r4, r0
	__asm__ volatile(
    7790:	f04f 0320 	mov.w	r3, #32
    7794:	f3ef 8611 	mrs	r6, BASEPRI
    7798:	f383 8811 	msr	BASEPRI, r3
    779c:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    77a0:	4632      	mov	r2, r6
    77a2:	4641      	mov	r1, r8
    77a4:	4628      	mov	r0, r5
    77a6:	f002 fe7d 	bl	a4a4 <clear_event_registrations>
	__asm__ volatile(
    77aa:	f386 8811 	msr	BASEPRI, r6
    77ae:	f3bf 8f6f 	isb	sy
	return swap_rc;
    77b2:	e7d2      	b.n	775a <z_impl_k_poll+0x5a>
    77b4:	20000ea0 	.word	0x20000ea0
    77b8:	0000a531 	.word	0x0000a531
    77bc:	2000123c 	.word	0x2000123c

000077c0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
    77c0:	b538      	push	{r3, r4, r5, lr}
    77c2:	4603      	mov	r3, r0
	__asm__ volatile(
    77c4:	f04f 0220 	mov.w	r2, #32
    77c8:	f3ef 8511 	mrs	r5, BASEPRI
    77cc:	f382 8811 	msr	BASEPRI, r2
    77d0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
    77d4:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
    77d6:	2101      	movs	r1, #1
    77d8:	6081      	str	r1, [r0, #8]
	return list->head == list;
    77da:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    77dc:	4283      	cmp	r3, r0
    77de:	d106      	bne.n	77ee <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    77e0:	f385 8811 	msr	BASEPRI, r5
    77e4:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
    77e8:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
    77ea:	4620      	mov	r0, r4
    77ec:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    77ee:	e9d0 3200 	ldrd	r3, r2, [r0]
    77f2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    77f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    77f6:	2300      	movs	r3, #0
	node->prev = NULL;
    77f8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    77fc:	f002 fe7d 	bl	a4fa <signal_poll_event>
	z_reschedule(&lock, key);
    7800:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7802:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    7804:	4801      	ldr	r0, [pc, #4]	; (780c <z_impl_k_poll_signal_raise+0x4c>)
    7806:	f002 fcd6 	bl	a1b6 <z_reschedule>
	return rc;
    780a:	e7ee      	b.n	77ea <z_impl_k_poll_signal_raise+0x2a>
    780c:	2000123c 	.word	0x2000123c

00007810 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    7810:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    7812:	4c06      	ldr	r4, [pc, #24]	; (782c <statics_init+0x1c>)
    7814:	4d06      	ldr	r5, [pc, #24]	; (7830 <statics_init+0x20>)
    7816:	42ac      	cmp	r4, r5
    7818:	d301      	bcc.n	781e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    781a:	2000      	movs	r0, #0
    781c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    781e:	4620      	mov	r0, r4
    7820:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    7824:	f002 ff60 	bl	a6e8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    7828:	3414      	adds	r4, #20
    782a:	e7f4      	b.n	7816 <statics_init+0x6>
    782c:	20000214 	.word	0x20000214
    7830:	20000214 	.word	0x20000214

00007834 <nrf_cc310_platform_init_no_rng>:
    7834:	b510      	push	{r4, lr}
    7836:	4c09      	ldr	r4, [pc, #36]	; (785c <nrf_cc310_platform_init_no_rng+0x28>)
    7838:	6823      	ldr	r3, [r4, #0]
    783a:	b11b      	cbz	r3, 7844 <nrf_cc310_platform_init_no_rng+0x10>
    783c:	2301      	movs	r3, #1
    783e:	2000      	movs	r0, #0
    7840:	6023      	str	r3, [r4, #0]
    7842:	bd10      	pop	{r4, pc}
    7844:	f000 f87c 	bl	7940 <CC_LibInitNoRng>
    7848:	2800      	cmp	r0, #0
    784a:	d0f7      	beq.n	783c <nrf_cc310_platform_init_no_rng+0x8>
    784c:	3801      	subs	r0, #1
    784e:	2806      	cmp	r0, #6
    7850:	bf96      	itet	ls
    7852:	4b03      	ldrls	r3, [pc, #12]	; (7860 <nrf_cc310_platform_init_no_rng+0x2c>)
    7854:	4803      	ldrhi	r0, [pc, #12]	; (7864 <nrf_cc310_platform_init_no_rng+0x30>)
    7856:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    785a:	bd10      	pop	{r4, pc}
    785c:	20000ee4 	.word	0x20000ee4
    7860:	0000b3b0 	.word	0x0000b3b0
    7864:	ffff8ffe 	.word	0xffff8ffe

00007868 <nrf_cc310_platform_abort>:
    7868:	f3bf 8f4f 	dsb	sy
    786c:	4905      	ldr	r1, [pc, #20]	; (7884 <nrf_cc310_platform_abort+0x1c>)
    786e:	4b06      	ldr	r3, [pc, #24]	; (7888 <nrf_cc310_platform_abort+0x20>)
    7870:	68ca      	ldr	r2, [r1, #12]
    7872:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7876:	4313      	orrs	r3, r2
    7878:	60cb      	str	r3, [r1, #12]
    787a:	f3bf 8f4f 	dsb	sy
    787e:	bf00      	nop
    7880:	e7fd      	b.n	787e <nrf_cc310_platform_abort+0x16>
    7882:	bf00      	nop
    7884:	e000ed00 	.word	0xe000ed00
    7888:	05fa0004 	.word	0x05fa0004

0000788c <CC_PalAbort>:
    788c:	4b01      	ldr	r3, [pc, #4]	; (7894 <CC_PalAbort+0x8>)
    788e:	685b      	ldr	r3, [r3, #4]
    7890:	4718      	bx	r3
    7892:	bf00      	nop
    7894:	200000f4 	.word	0x200000f4

00007898 <nrf_cc310_platform_set_abort>:
    7898:	4b02      	ldr	r3, [pc, #8]	; (78a4 <nrf_cc310_platform_set_abort+0xc>)
    789a:	e9d0 1200 	ldrd	r1, r2, [r0]
    789e:	e9c3 1200 	strd	r1, r2, [r3]
    78a2:	4770      	bx	lr
    78a4:	200000f4 	.word	0x200000f4

000078a8 <mutex_free>:
    78a8:	4770      	bx	lr
    78aa:	bf00      	nop

000078ac <mutex_unlock>:
    78ac:	b510      	push	{r4, lr}
    78ae:	4604      	mov	r4, r0
    78b0:	b120      	cbz	r0, 78bc <mutex_unlock+0x10>
    78b2:	f3bf 8f5f 	dmb	sy
    78b6:	2000      	movs	r0, #0
    78b8:	6020      	str	r0, [r4, #0]
    78ba:	bd10      	pop	{r4, pc}
    78bc:	4803      	ldr	r0, [pc, #12]	; (78cc <mutex_unlock+0x20>)
    78be:	f7ff ffe5 	bl	788c <CC_PalAbort>
    78c2:	f3bf 8f5f 	dmb	sy
    78c6:	2000      	movs	r0, #0
    78c8:	6020      	str	r0, [r4, #0]
    78ca:	bd10      	pop	{r4, pc}
    78cc:	0000b3f0 	.word	0x0000b3f0

000078d0 <mutex_init>:
    78d0:	b510      	push	{r4, lr}
    78d2:	4604      	mov	r4, r0
    78d4:	b110      	cbz	r0, 78dc <mutex_init+0xc>
    78d6:	2300      	movs	r3, #0
    78d8:	6023      	str	r3, [r4, #0]
    78da:	bd10      	pop	{r4, pc}
    78dc:	4802      	ldr	r0, [pc, #8]	; (78e8 <mutex_init+0x18>)
    78de:	f7ff ffd5 	bl	788c <CC_PalAbort>
    78e2:	2300      	movs	r3, #0
    78e4:	6023      	str	r3, [r4, #0]
    78e6:	bd10      	pop	{r4, pc}
    78e8:	0000b3cc 	.word	0x0000b3cc

000078ec <mutex_lock>:
    78ec:	b150      	cbz	r0, 7904 <mutex_lock+0x18>
    78ee:	2201      	movs	r2, #1
    78f0:	e8d0 3fef 	ldaex	r3, [r0]
    78f4:	e8c0 2fe1 	stlex	r1, r2, [r0]
    78f8:	2900      	cmp	r1, #0
    78fa:	d1f9      	bne.n	78f0 <mutex_lock+0x4>
    78fc:	2b01      	cmp	r3, #1
    78fe:	d0f7      	beq.n	78f0 <mutex_lock+0x4>
    7900:	f3bf 8f5f 	dmb	sy
    7904:	2000      	movs	r0, #0
    7906:	4770      	bx	lr

00007908 <nrf_cc310_platform_set_mutexes>:
    7908:	b470      	push	{r4, r5, r6}
    790a:	4b0b      	ldr	r3, [pc, #44]	; (7938 <nrf_cc310_platform_set_mutexes+0x30>)
    790c:	6806      	ldr	r6, [r0, #0]
    790e:	68c2      	ldr	r2, [r0, #12]
    7910:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    7914:	e9c3 4202 	strd	r4, r2, [r3, #8]
    7918:	e9c3 6500 	strd	r6, r5, [r3]
    791c:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    7920:	680e      	ldr	r6, [r1, #0]
    7922:	4b06      	ldr	r3, [pc, #24]	; (793c <nrf_cc310_platform_set_mutexes+0x34>)
    7924:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    7928:	e9c3 6500 	strd	r6, r5, [r3]
    792c:	e9c3 4002 	strd	r4, r0, [r3, #8]
    7930:	611a      	str	r2, [r3, #16]
    7932:	bc70      	pop	{r4, r5, r6}
    7934:	4770      	bx	lr
    7936:	bf00      	nop
    7938:	200000fc 	.word	0x200000fc
    793c:	2000010c 	.word	0x2000010c

00007940 <CC_LibInitNoRng>:
    7940:	b510      	push	{r4, lr}
    7942:	f000 f833 	bl	79ac <CC_HalInit>
    7946:	b970      	cbnz	r0, 7966 <CC_LibInitNoRng+0x26>
    7948:	f000 f83a 	bl	79c0 <CC_PalInit>
    794c:	b980      	cbnz	r0, 7970 <CC_LibInitNoRng+0x30>
    794e:	f000 f8b5 	bl	7abc <CC_PalPowerSaveModeSelect>
    7952:	b980      	cbnz	r0, 7976 <CC_LibInitNoRng+0x36>
    7954:	4b11      	ldr	r3, [pc, #68]	; (799c <CC_LibInitNoRng+0x5c>)
    7956:	681b      	ldr	r3, [r3, #0]
    7958:	0e1b      	lsrs	r3, r3, #24
    795a:	2bf0      	cmp	r3, #240	; 0xf0
    795c:	d00d      	beq.n	797a <CC_LibInitNoRng+0x3a>
    795e:	2406      	movs	r4, #6
    7960:	f000 f826 	bl	79b0 <CC_HalTerminate>
    7964:	e000      	b.n	7968 <CC_LibInitNoRng+0x28>
    7966:	2403      	movs	r4, #3
    7968:	f000 f858 	bl	7a1c <CC_PalTerminate>
    796c:	4620      	mov	r0, r4
    796e:	bd10      	pop	{r4, pc}
    7970:	2404      	movs	r4, #4
    7972:	4620      	mov	r0, r4
    7974:	bd10      	pop	{r4, pc}
    7976:	2400      	movs	r4, #0
    7978:	e7f2      	b.n	7960 <CC_LibInitNoRng+0x20>
    797a:	4a09      	ldr	r2, [pc, #36]	; (79a0 <CC_LibInitNoRng+0x60>)
    797c:	4b09      	ldr	r3, [pc, #36]	; (79a4 <CC_LibInitNoRng+0x64>)
    797e:	6812      	ldr	r2, [r2, #0]
    7980:	429a      	cmp	r2, r3
    7982:	d001      	beq.n	7988 <CC_LibInitNoRng+0x48>
    7984:	2407      	movs	r4, #7
    7986:	e7eb      	b.n	7960 <CC_LibInitNoRng+0x20>
    7988:	2001      	movs	r0, #1
    798a:	f000 f897 	bl	7abc <CC_PalPowerSaveModeSelect>
    798e:	2800      	cmp	r0, #0
    7990:	d1f1      	bne.n	7976 <CC_LibInitNoRng+0x36>
    7992:	4b05      	ldr	r3, [pc, #20]	; (79a8 <CC_LibInitNoRng+0x68>)
    7994:	4604      	mov	r4, r0
    7996:	6018      	str	r0, [r3, #0]
    7998:	e7e8      	b.n	796c <CC_LibInitNoRng+0x2c>
    799a:	bf00      	nop
    799c:	50841928 	.word	0x50841928
    79a0:	50841a24 	.word	0x50841a24
    79a4:	20e00000 	.word	0x20e00000
    79a8:	50841a0c 	.word	0x50841a0c

000079ac <CC_HalInit>:
    79ac:	2000      	movs	r0, #0
    79ae:	4770      	bx	lr

000079b0 <CC_HalTerminate>:
    79b0:	2000      	movs	r0, #0
    79b2:	4770      	bx	lr

000079b4 <CC_HalMaskInterrupt>:
    79b4:	4b01      	ldr	r3, [pc, #4]	; (79bc <CC_HalMaskInterrupt+0x8>)
    79b6:	6018      	str	r0, [r3, #0]
    79b8:	4770      	bx	lr
    79ba:	bf00      	nop
    79bc:	50841a04 	.word	0x50841a04

000079c0 <CC_PalInit>:
    79c0:	b510      	push	{r4, lr}
    79c2:	4811      	ldr	r0, [pc, #68]	; (7a08 <CC_PalInit+0x48>)
    79c4:	f000 f848 	bl	7a58 <CC_PalMutexCreate>
    79c8:	b100      	cbz	r0, 79cc <CC_PalInit+0xc>
    79ca:	bd10      	pop	{r4, pc}
    79cc:	480f      	ldr	r0, [pc, #60]	; (7a0c <CC_PalInit+0x4c>)
    79ce:	f000 f843 	bl	7a58 <CC_PalMutexCreate>
    79d2:	2800      	cmp	r0, #0
    79d4:	d1f9      	bne.n	79ca <CC_PalInit+0xa>
    79d6:	4c0e      	ldr	r4, [pc, #56]	; (7a10 <CC_PalInit+0x50>)
    79d8:	4620      	mov	r0, r4
    79da:	f000 f83d 	bl	7a58 <CC_PalMutexCreate>
    79de:	2800      	cmp	r0, #0
    79e0:	d1f3      	bne.n	79ca <CC_PalInit+0xa>
    79e2:	4b0c      	ldr	r3, [pc, #48]	; (7a14 <CC_PalInit+0x54>)
    79e4:	480c      	ldr	r0, [pc, #48]	; (7a18 <CC_PalInit+0x58>)
    79e6:	601c      	str	r4, [r3, #0]
    79e8:	f000 f836 	bl	7a58 <CC_PalMutexCreate>
    79ec:	4601      	mov	r1, r0
    79ee:	2800      	cmp	r0, #0
    79f0:	d1eb      	bne.n	79ca <CC_PalInit+0xa>
    79f2:	f000 f82d 	bl	7a50 <CC_PalDmaInit>
    79f6:	4604      	mov	r4, r0
    79f8:	b108      	cbz	r0, 79fe <CC_PalInit+0x3e>
    79fa:	4620      	mov	r0, r4
    79fc:	bd10      	pop	{r4, pc}
    79fe:	f000 f83f 	bl	7a80 <CC_PalPowerSaveModeInit>
    7a02:	4620      	mov	r0, r4
    7a04:	e7fa      	b.n	79fc <CC_PalInit+0x3c>
    7a06:	bf00      	nop
    7a08:	2000012c 	.word	0x2000012c
    7a0c:	20000120 	.word	0x20000120
    7a10:	20000128 	.word	0x20000128
    7a14:	20000130 	.word	0x20000130
    7a18:	20000124 	.word	0x20000124

00007a1c <CC_PalTerminate>:
    7a1c:	b508      	push	{r3, lr}
    7a1e:	4808      	ldr	r0, [pc, #32]	; (7a40 <CC_PalTerminate+0x24>)
    7a20:	f000 f824 	bl	7a6c <CC_PalMutexDestroy>
    7a24:	4807      	ldr	r0, [pc, #28]	; (7a44 <CC_PalTerminate+0x28>)
    7a26:	f000 f821 	bl	7a6c <CC_PalMutexDestroy>
    7a2a:	4807      	ldr	r0, [pc, #28]	; (7a48 <CC_PalTerminate+0x2c>)
    7a2c:	f000 f81e 	bl	7a6c <CC_PalMutexDestroy>
    7a30:	4806      	ldr	r0, [pc, #24]	; (7a4c <CC_PalTerminate+0x30>)
    7a32:	f000 f81b 	bl	7a6c <CC_PalMutexDestroy>
    7a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7a3a:	f000 b80b 	b.w	7a54 <CC_PalDmaTerminate>
    7a3e:	bf00      	nop
    7a40:	2000012c 	.word	0x2000012c
    7a44:	20000120 	.word	0x20000120
    7a48:	20000128 	.word	0x20000128
    7a4c:	20000124 	.word	0x20000124

00007a50 <CC_PalDmaInit>:
    7a50:	2000      	movs	r0, #0
    7a52:	4770      	bx	lr

00007a54 <CC_PalDmaTerminate>:
    7a54:	4770      	bx	lr
    7a56:	bf00      	nop

00007a58 <CC_PalMutexCreate>:
    7a58:	b508      	push	{r3, lr}
    7a5a:	4b03      	ldr	r3, [pc, #12]	; (7a68 <CC_PalMutexCreate+0x10>)
    7a5c:	6802      	ldr	r2, [r0, #0]
    7a5e:	681b      	ldr	r3, [r3, #0]
    7a60:	6810      	ldr	r0, [r2, #0]
    7a62:	4798      	blx	r3
    7a64:	2000      	movs	r0, #0
    7a66:	bd08      	pop	{r3, pc}
    7a68:	200000fc 	.word	0x200000fc

00007a6c <CC_PalMutexDestroy>:
    7a6c:	b508      	push	{r3, lr}
    7a6e:	4b03      	ldr	r3, [pc, #12]	; (7a7c <CC_PalMutexDestroy+0x10>)
    7a70:	6802      	ldr	r2, [r0, #0]
    7a72:	685b      	ldr	r3, [r3, #4]
    7a74:	6810      	ldr	r0, [r2, #0]
    7a76:	4798      	blx	r3
    7a78:	2000      	movs	r0, #0
    7a7a:	bd08      	pop	{r3, pc}
    7a7c:	200000fc 	.word	0x200000fc

00007a80 <CC_PalPowerSaveModeInit>:
    7a80:	b570      	push	{r4, r5, r6, lr}
    7a82:	4c09      	ldr	r4, [pc, #36]	; (7aa8 <CC_PalPowerSaveModeInit+0x28>)
    7a84:	4d09      	ldr	r5, [pc, #36]	; (7aac <CC_PalPowerSaveModeInit+0x2c>)
    7a86:	6920      	ldr	r0, [r4, #16]
    7a88:	68ab      	ldr	r3, [r5, #8]
    7a8a:	4798      	blx	r3
    7a8c:	b118      	cbz	r0, 7a96 <CC_PalPowerSaveModeInit+0x16>
    7a8e:	4b08      	ldr	r3, [pc, #32]	; (7ab0 <CC_PalPowerSaveModeInit+0x30>)
    7a90:	4808      	ldr	r0, [pc, #32]	; (7ab4 <CC_PalPowerSaveModeInit+0x34>)
    7a92:	685b      	ldr	r3, [r3, #4]
    7a94:	4798      	blx	r3
    7a96:	2100      	movs	r1, #0
    7a98:	4a07      	ldr	r2, [pc, #28]	; (7ab8 <CC_PalPowerSaveModeInit+0x38>)
    7a9a:	68eb      	ldr	r3, [r5, #12]
    7a9c:	6011      	str	r1, [r2, #0]
    7a9e:	6920      	ldr	r0, [r4, #16]
    7aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7aa4:	4718      	bx	r3
    7aa6:	bf00      	nop
    7aa8:	2000010c 	.word	0x2000010c
    7aac:	200000fc 	.word	0x200000fc
    7ab0:	200000f4 	.word	0x200000f4
    7ab4:	0000b410 	.word	0x0000b410
    7ab8:	20000ef8 	.word	0x20000ef8

00007abc <CC_PalPowerSaveModeSelect>:
    7abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7abe:	4c1a      	ldr	r4, [pc, #104]	; (7b28 <CC_PalPowerSaveModeSelect+0x6c>)
    7ac0:	4d1a      	ldr	r5, [pc, #104]	; (7b2c <CC_PalPowerSaveModeSelect+0x70>)
    7ac2:	4607      	mov	r7, r0
    7ac4:	68ab      	ldr	r3, [r5, #8]
    7ac6:	6920      	ldr	r0, [r4, #16]
    7ac8:	4798      	blx	r3
    7aca:	b9e8      	cbnz	r0, 7b08 <CC_PalPowerSaveModeSelect+0x4c>
    7acc:	4e18      	ldr	r6, [pc, #96]	; (7b30 <CC_PalPowerSaveModeSelect+0x74>)
    7ace:	6833      	ldr	r3, [r6, #0]
    7ad0:	b97f      	cbnz	r7, 7af2 <CC_PalPowerSaveModeSelect+0x36>
    7ad2:	b93b      	cbnz	r3, 7ae4 <CC_PalPowerSaveModeSelect+0x28>
    7ad4:	2001      	movs	r0, #1
    7ad6:	4a17      	ldr	r2, [pc, #92]	; (7b34 <CC_PalPowerSaveModeSelect+0x78>)
    7ad8:	4917      	ldr	r1, [pc, #92]	; (7b38 <CC_PalPowerSaveModeSelect+0x7c>)
    7ada:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    7ade:	680a      	ldr	r2, [r1, #0]
    7ae0:	2a00      	cmp	r2, #0
    7ae2:	d1fc      	bne.n	7ade <CC_PalPowerSaveModeSelect+0x22>
    7ae4:	3301      	adds	r3, #1
    7ae6:	6033      	str	r3, [r6, #0]
    7ae8:	68eb      	ldr	r3, [r5, #12]
    7aea:	6920      	ldr	r0, [r4, #16]
    7aec:	4798      	blx	r3
    7aee:	2000      	movs	r0, #0
    7af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7af2:	2b00      	cmp	r3, #0
    7af4:	d0f8      	beq.n	7ae8 <CC_PalPowerSaveModeSelect+0x2c>
    7af6:	2b01      	cmp	r3, #1
    7af8:	d008      	beq.n	7b0c <CC_PalPowerSaveModeSelect+0x50>
    7afa:	3b01      	subs	r3, #1
    7afc:	6033      	str	r3, [r6, #0]
    7afe:	6920      	ldr	r0, [r4, #16]
    7b00:	68eb      	ldr	r3, [r5, #12]
    7b02:	4798      	blx	r3
    7b04:	2000      	movs	r0, #0
    7b06:	e7f3      	b.n	7af0 <CC_PalPowerSaveModeSelect+0x34>
    7b08:	480c      	ldr	r0, [pc, #48]	; (7b3c <CC_PalPowerSaveModeSelect+0x80>)
    7b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b0c:	4a0a      	ldr	r2, [pc, #40]	; (7b38 <CC_PalPowerSaveModeSelect+0x7c>)
    7b0e:	6813      	ldr	r3, [r2, #0]
    7b10:	2b00      	cmp	r3, #0
    7b12:	d1fc      	bne.n	7b0e <CC_PalPowerSaveModeSelect+0x52>
    7b14:	4a07      	ldr	r2, [pc, #28]	; (7b34 <CC_PalPowerSaveModeSelect+0x78>)
    7b16:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7b1a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7b1e:	f7ff ff49 	bl	79b4 <CC_HalMaskInterrupt>
    7b22:	6833      	ldr	r3, [r6, #0]
    7b24:	e7e9      	b.n	7afa <CC_PalPowerSaveModeSelect+0x3e>
    7b26:	bf00      	nop
    7b28:	2000010c 	.word	0x2000010c
    7b2c:	200000fc 	.word	0x200000fc
    7b30:	20000ef8 	.word	0x20000ef8
    7b34:	50840000 	.word	0x50840000
    7b38:	50841910 	.word	0x50841910
    7b3c:	ffff8fe9 	.word	0xffff8fe9

00007b40 <main>:
SHELL_CMD_ARG_REGISTER(led, NULL, "parameters: <channel num (0-7)> <state (on or off)>", cmd_led, 3, 0);


void main(void) { }
    7b40:	4770      	bx	lr

00007b42 <string_cmp>:
	return strcmp((const char *)p_a, (const char *)p_b);
    7b42:	f002 b839 	b.w	9bb8 <strcmp>

00007b46 <swapfunc>:
 * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
 */

static inline void
swapfunc(char *a, char *b, size_t es)
{
    7b46:	b510      	push	{r4, lr}
    7b48:	4402      	add	r2, r0
	char t;

	do {
		t = *a;
		*a++ = *b;
    7b4a:	780c      	ldrb	r4, [r1, #0]
		t = *a;
    7b4c:	7803      	ldrb	r3, [r0, #0]
		*a++ = *b;
    7b4e:	f800 4b01 	strb.w	r4, [r0], #1
		*b++ = t;
	} while (--es > 0);
    7b52:	4290      	cmp	r0, r2
		*b++ = t;
    7b54:	f801 3b01 	strb.w	r3, [r1], #1
	} while (--es > 0);
    7b58:	d1f7      	bne.n	7b4a <swapfunc+0x4>
}
    7b5a:	bd10      	pop	{r4, pc}

00007b5c <med3.isra.0>:
#else
#define	CMP(t, x, y) (cmp((x), (y)))
#endif

static inline char *
med3(char *a, char *b, char *c, cmp_t *cmp, void *thunk)
    7b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b5e:	460f      	mov	r7, r1
    7b60:	4614      	mov	r4, r2
    7b62:	4606      	mov	r6, r0
    7b64:	461d      	mov	r5, r3
{
	return CMP(thunk, a, b) < 0 ?
    7b66:	4798      	blx	r3
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
    7b68:	2800      	cmp	r0, #0
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
    7b6a:	4621      	mov	r1, r4
    7b6c:	4638      	mov	r0, r7
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
    7b6e:	da0c      	bge.n	7b8a <med3.isra.0+0x2e>
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
    7b70:	47a8      	blx	r5
    7b72:	2800      	cmp	r0, #0
    7b74:	da02      	bge.n	7b7c <med3.isra.0+0x20>
    7b76:	463c      	mov	r4, r7
}
    7b78:	4620      	mov	r0, r4
    7b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
    7b7c:	4621      	mov	r1, r4
    7b7e:	4630      	mov	r0, r6
    7b80:	47a8      	blx	r5
    7b82:	2800      	cmp	r0, #0
    7b84:	dbf8      	blt.n	7b78 <med3.isra.0+0x1c>
    7b86:	4634      	mov	r4, r6
    7b88:	e7f6      	b.n	7b78 <med3.isra.0+0x1c>
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
    7b8a:	47a8      	blx	r5
    7b8c:	2800      	cmp	r0, #0
    7b8e:	dcf2      	bgt.n	7b76 <med3.isra.0+0x1a>
    7b90:	4621      	mov	r1, r4
    7b92:	4630      	mov	r0, r6
    7b94:	47a8      	blx	r5
    7b96:	2800      	cmp	r0, #0
    7b98:	daee      	bge.n	7b78 <med3.isra.0+0x1c>
    7b9a:	e7f4      	b.n	7b86 <med3.isra.0+0x2a>

00007b9c <qsort>:
void qsort_r(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)
#else
#define	thunk NULL
void qsort(void *a, size_t n, size_t es, cmp_t *cmp)
#endif
{
    7b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ba0:	4606      	mov	r6, r0
    7ba2:	468b      	mov	fp, r1
    7ba4:	4614      	mov	r4, r2
    7ba6:	4698      	mov	r8, r3
    7ba8:	b085      	sub	sp, #20
	int cmp_result;
	int swap_cnt;

loop:
	swap_cnt = 0;
	if (n < 7) {
    7baa:	1933      	adds	r3, r6, r4
    7bac:	f1bb 0f06 	cmp.w	fp, #6
    7bb0:	9300      	str	r3, [sp, #0]
    7bb2:	d81a      	bhi.n	7bea <qsort+0x4e>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
    7bb4:	461f      	mov	r7, r3
    7bb6:	fb04 6b0b 	mla	fp, r4, fp, r6
    7bba:	45bb      	cmp	fp, r7
    7bbc:	d802      	bhi.n	7bc4 <qsort+0x28>
			/* qsort(a, d1 / es, es, cmp); */
			n = d1 / es;
			goto loop;
		}
	}
}
    7bbe:	b005      	add	sp, #20
    7bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bc4:	46b9      	mov	r9, r7
    7bc6:	e00c      	b.n	7be2 <qsort+0x46>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
    7bc8:	eba9 0a04 	sub.w	sl, r9, r4
    7bcc:	4649      	mov	r1, r9
    7bce:	4650      	mov	r0, sl
    7bd0:	47c0      	blx	r8
    7bd2:	2800      	cmp	r0, #0
    7bd4:	dd07      	ble.n	7be6 <qsort+0x4a>
				swapfunc(pl, pl - es, es);
    7bd6:	4648      	mov	r0, r9
    7bd8:	4622      	mov	r2, r4
    7bda:	4651      	mov	r1, sl
    7bdc:	f7ff ffb3 	bl	7b46 <swapfunc>
			     pl -= es) {
    7be0:	46d1      	mov	r9, sl
			for (pl = pm;
    7be2:	454e      	cmp	r6, r9
    7be4:	d3f0      	bcc.n	7bc8 <qsort+0x2c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
    7be6:	4427      	add	r7, r4
    7be8:	e7e7      	b.n	7bba <qsort+0x1e>
	pm = (char *)a + (n / 2) * es;
    7bea:	ea4f 095b 	mov.w	r9, fp, lsr #1
    7bee:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
	if (n > 7) {
    7bf2:	f1bb 0f07 	cmp.w	fp, #7
	pm = (char *)a + (n / 2) * es;
    7bf6:	fb04 6909 	mla	r9, r4, r9, r6
	if (n > 7) {
    7bfa:	fb04 6505 	mla	r5, r4, r5, r6
    7bfe:	d027      	beq.n	7c50 <qsort+0xb4>
		if (n > 40) {
    7c00:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
    7c04:	d945      	bls.n	7c92 <qsort+0xf6>
			size_t d = (n / 8) * es;
    7c06:	ea4f 0adb 	mov.w	sl, fp, lsr #3
    7c0a:	fb04 fa0a 	mul.w	sl, r4, sl
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
    7c0e:	4643      	mov	r3, r8
    7c10:	eb06 024a 	add.w	r2, r6, sl, lsl #1
    7c14:	eb06 010a 	add.w	r1, r6, sl
    7c18:	4630      	mov	r0, r6
    7c1a:	f7ff ff9f 	bl	7b5c <med3.isra.0>
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
    7c1e:	4649      	mov	r1, r9
    7c20:	eb09 020a 	add.w	r2, r9, sl
    7c24:	4643      	mov	r3, r8
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
    7c26:	4607      	mov	r7, r0
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
    7c28:	eba9 000a 	sub.w	r0, r9, sl
    7c2c:	f7ff ff96 	bl	7b5c <med3.isra.0>
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
    7c30:	462a      	mov	r2, r5
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
    7c32:	4681      	mov	r9, r0
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
    7c34:	4643      	mov	r3, r8
    7c36:	eba5 010a 	sub.w	r1, r5, sl
    7c3a:	eba5 004a 	sub.w	r0, r5, sl, lsl #1
    7c3e:	f7ff ff8d 	bl	7b5c <med3.isra.0>
    7c42:	4602      	mov	r2, r0
		pm = med3(pl, pm, pn, cmp, thunk);
    7c44:	4649      	mov	r1, r9
    7c46:	4643      	mov	r3, r8
    7c48:	4638      	mov	r0, r7
    7c4a:	f7ff ff87 	bl	7b5c <med3.isra.0>
    7c4e:	4681      	mov	r9, r0
	swapfunc(a, pm, es);
    7c50:	4622      	mov	r2, r4
    7c52:	4649      	mov	r1, r9
	pa = pb = (char *)a + es;
    7c54:	1937      	adds	r7, r6, r4
	swapfunc(a, pm, es);
    7c56:	4630      	mov	r0, r6
    7c58:	f7ff ff75 	bl	7b46 <swapfunc>
	pc = pd = (char *)a + (n - 1) * es;
    7c5c:	46b9      	mov	r9, r7
	swap_cnt = 0;
    7c5e:	2200      	movs	r2, #0
	pa = pb = (char *)a + es;
    7c60:	e9cd 7500 	strd	r7, r5, [sp]
    7c64:	4263      	negs	r3, r4
    7c66:	9302      	str	r3, [sp, #8]
		while (pb <= pc && (cmp_result = CMP(thunk, pb, a)) <= 0) {
    7c68:	45a9      	cmp	r9, r5
    7c6a:	d823      	bhi.n	7cb4 <qsort+0x118>
    7c6c:	4631      	mov	r1, r6
    7c6e:	4648      	mov	r0, r9
    7c70:	9203      	str	r2, [sp, #12]
    7c72:	47c0      	blx	r8
    7c74:	2800      	cmp	r0, #0
    7c76:	9a03      	ldr	r2, [sp, #12]
    7c78:	dc24      	bgt.n	7cc4 <qsort+0x128>
			if (cmp_result == 0) {
    7c7a:	d108      	bne.n	7c8e <qsort+0xf2>
				swapfunc(pa, pb, es);
    7c7c:	4622      	mov	r2, r4
    7c7e:	4649      	mov	r1, r9
    7c80:	9800      	ldr	r0, [sp, #0]
    7c82:	f7ff ff60 	bl	7b46 <swapfunc>
				pa += es;
    7c86:	9b00      	ldr	r3, [sp, #0]
    7c88:	4423      	add	r3, r4
    7c8a:	9300      	str	r3, [sp, #0]
				swap_cnt = 1;
    7c8c:	2201      	movs	r2, #1
			pb += es;
    7c8e:	44a1      	add	r9, r4
    7c90:	e7ea      	b.n	7c68 <qsort+0xcc>
		pn = (char *)a + (n - 1) * es;
    7c92:	462a      	mov	r2, r5
    7c94:	4637      	mov	r7, r6
    7c96:	e7d5      	b.n	7c44 <qsort+0xa8>
			if (cmp_result == 0) {
    7c98:	d109      	bne.n	7cae <qsort+0x112>
				swapfunc(pc, pd, es);
    7c9a:	4622      	mov	r2, r4
    7c9c:	4628      	mov	r0, r5
    7c9e:	9901      	ldr	r1, [sp, #4]
    7ca0:	f7ff ff51 	bl	7b46 <swapfunc>
				pd -= es;
    7ca4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    7ca8:	4413      	add	r3, r2
				swap_cnt = 1;
    7caa:	2201      	movs	r2, #1
				pd -= es;
    7cac:	9301      	str	r3, [sp, #4]
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
    7cae:	45d1      	cmp	r9, sl
			pc -= es;
    7cb0:	4655      	mov	r5, sl
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
    7cb2:	d907      	bls.n	7cc4 <qsort+0x128>
	if (swap_cnt == 0) {  /* Switch to insertion sort */
    7cb4:	fb04 6a0b 	mla	sl, r4, fp, r6
    7cb8:	bb32      	cbnz	r2, 7d08 <qsort+0x16c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
    7cba:	45ba      	cmp	sl, r7
    7cbc:	f67f af7f 	bls.w	7bbe <qsort+0x22>
    7cc0:	463d      	mov	r5, r7
    7cc2:	e01d      	b.n	7d00 <qsort+0x164>
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
    7cc4:	4631      	mov	r1, r6
    7cc6:	4628      	mov	r0, r5
    7cc8:	9203      	str	r2, [sp, #12]
    7cca:	47c0      	blx	r8
    7ccc:	9b02      	ldr	r3, [sp, #8]
    7cce:	2800      	cmp	r0, #0
    7cd0:	9a03      	ldr	r2, [sp, #12]
    7cd2:	eb05 0a03 	add.w	sl, r5, r3
    7cd6:	dadf      	bge.n	7c98 <qsort+0xfc>
		swapfunc(pb, pc, es);
    7cd8:	4629      	mov	r1, r5
    7cda:	4622      	mov	r2, r4
    7cdc:	4648      	mov	r0, r9
    7cde:	f7ff ff32 	bl	7b46 <swapfunc>
		pc -= es;
    7ce2:	4655      	mov	r5, sl
	for (;;) {
    7ce4:	e7d2      	b.n	7c8c <qsort+0xf0>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
    7ce6:	eba5 0904 	sub.w	r9, r5, r4
    7cea:	4629      	mov	r1, r5
    7cec:	4648      	mov	r0, r9
    7cee:	47c0      	blx	r8
    7cf0:	2800      	cmp	r0, #0
    7cf2:	dd07      	ble.n	7d04 <qsort+0x168>
				swapfunc(pl, pl - es, es);
    7cf4:	4628      	mov	r0, r5
    7cf6:	4622      	mov	r2, r4
    7cf8:	4649      	mov	r1, r9
    7cfa:	f7ff ff24 	bl	7b46 <swapfunc>
			     pl -= es) {
    7cfe:	464d      	mov	r5, r9
			for (pl = pm;
    7d00:	42ae      	cmp	r6, r5
    7d02:	d3f0      	bcc.n	7ce6 <qsort+0x14a>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
    7d04:	4427      	add	r7, r4
    7d06:	e7d8      	b.n	7cba <qsort+0x11e>
	d1 = MIN(pa - (char *)a, pb - pa);
    7d08:	9b00      	ldr	r3, [sp, #0]
    7d0a:	eba9 0b03 	sub.w	fp, r9, r3
    7d0e:	1b9a      	subs	r2, r3, r6
    7d10:	455a      	cmp	r2, fp
    7d12:	bfa8      	it	ge
    7d14:	465a      	movge	r2, fp
	vecswap(a, pb - d1, d1);
    7d16:	b122      	cbz	r2, 7d22 <qsort+0x186>
    7d18:	4630      	mov	r0, r6
    7d1a:	eba9 0102 	sub.w	r1, r9, r2
    7d1e:	f7ff ff12 	bl	7b46 <swapfunc>
	d1 = MIN(pd - pc, pn - pd - es);
    7d22:	9b01      	ldr	r3, [sp, #4]
    7d24:	ebaa 0203 	sub.w	r2, sl, r3
    7d28:	1b5d      	subs	r5, r3, r5
    7d2a:	1b12      	subs	r2, r2, r4
    7d2c:	42aa      	cmp	r2, r5
    7d2e:	bf28      	it	cs
    7d30:	462a      	movcs	r2, r5
	vecswap(pb, pn - d1, d1);
    7d32:	b122      	cbz	r2, 7d3e <qsort+0x1a2>
    7d34:	4648      	mov	r0, r9
    7d36:	ebaa 0102 	sub.w	r1, sl, r2
    7d3a:	f7ff ff04 	bl	7b46 <swapfunc>
	if (d1 <= d2) {
    7d3e:	455d      	cmp	r5, fp
    7d40:	d310      	bcc.n	7d64 <qsort+0x1c8>
		if (d1 > es) {
    7d42:	455c      	cmp	r4, fp
    7d44:	d206      	bcs.n	7d54 <qsort+0x1b8>
			qsort(a, d1 / es, es, cmp);
    7d46:	4643      	mov	r3, r8
    7d48:	4622      	mov	r2, r4
    7d4a:	fbbb f1f4 	udiv	r1, fp, r4
    7d4e:	4630      	mov	r0, r6
    7d50:	f7ff ff24 	bl	7b9c <qsort>
		if (d2 > es) {
    7d54:	42a5      	cmp	r5, r4
    7d56:	f67f af32 	bls.w	7bbe <qsort+0x22>
			n = d2 / es;
    7d5a:	fbb5 fbf4 	udiv	fp, r5, r4
			a = pn - d2;
    7d5e:	ebaa 0605 	sub.w	r6, sl, r5
			goto loop;
    7d62:	e722      	b.n	7baa <qsort+0xe>
		if (d2 > es) {
    7d64:	42a5      	cmp	r5, r4
    7d66:	d907      	bls.n	7d78 <qsort+0x1dc>
			qsort(pn - d2, d2 / es, es, cmp);
    7d68:	4643      	mov	r3, r8
    7d6a:	4622      	mov	r2, r4
    7d6c:	fbb5 f1f4 	udiv	r1, r5, r4
    7d70:	ebaa 0005 	sub.w	r0, sl, r5
    7d74:	f7ff ff12 	bl	7b9c <qsort>
		if (d1 > es) {
    7d78:	455c      	cmp	r4, fp
    7d7a:	f4bf af20 	bcs.w	7bbe <qsort+0x22>
			n = d1 / es;
    7d7e:	fbbb fbf4 	udiv	fp, fp, r4
			goto loop;
    7d82:	e712      	b.n	7baa <qsort+0xe>

00007d84 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    7d84:	070b      	lsls	r3, r1, #28
    7d86:	d504      	bpl.n	7d92 <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7d88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    7d8c:	2b19      	cmp	r3, #25
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    7d8e:	bf98      	it	ls
    7d90:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    7d92:	4770      	bx	lr

00007d94 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    7d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d98:	b087      	sub	sp, #28
    7d9a:	468a      	mov	sl, r1
    7d9c:	4614      	mov	r4, r2
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    7d9e:	4605      	mov	r5, r0
{
    7da0:	9302      	str	r3, [sp, #8]
    if ((pattern == NULL) || (string == NULL))
    7da2:	b918      	cbnz	r0, 7dac <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    7da4:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    7da6:	b007      	add	sp, #28
    7da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    7dac:	2900      	cmp	r1, #0
    7dae:	d0f9      	beq.n	7da4 <fnmatchx+0x10>
    if (recursion-- == 0)
    7db0:	9b02      	ldr	r3, [sp, #8]
    7db2:	2b00      	cmp	r3, #0
    7db4:	f000 811a 	beq.w	7fec <fnmatchx+0x258>
    7db8:	460a      	mov	r2, r1
            if (*string == '.' && (flags & FNM_PERIOD) &&
    7dba:	f004 0304 	and.w	r3, r4, #4
    7dbe:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    7dc0:	46a8      	mov	r8, r5
    7dc2:	4621      	mov	r1, r4
    7dc4:	f818 0b01 	ldrb.w	r0, [r8], #1
    7dc8:	f7ff ffdc 	bl	7d84 <foldcase>
    7dcc:	4603      	mov	r3, r0
    7dce:	b2c0      	uxtb	r0, r0
    7dd0:	283f      	cmp	r0, #63	; 0x3f
    7dd2:	4606      	mov	r6, r0
    7dd4:	7817      	ldrb	r7, [r2, #0]
    7dd6:	d024      	beq.n	7e22 <fnmatchx+0x8e>
    7dd8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ddc:	d10a      	bne.n	7df4 <fnmatchx+0x60>
    7dde:	b1c0      	cbz	r0, 7e12 <fnmatchx+0x7e>
    7de0:	282a      	cmp	r0, #42	; 0x2a
    7de2:	d035      	beq.n	7e50 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
    7de4:	4621      	mov	r1, r4
    7de6:	4638      	mov	r0, r7
    7de8:	3201      	adds	r2, #1
    7dea:	f7ff ffcb 	bl	7d84 <foldcase>
    7dee:	4286      	cmp	r6, r0
    7df0:	d01e      	beq.n	7e30 <fnmatchx+0x9c>
    7df2:	e7d7      	b.n	7da4 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    7df4:	285b      	cmp	r0, #91	; 0x5b
    7df6:	d07b      	beq.n	7ef0 <fnmatchx+0x15c>
    7df8:	285c      	cmp	r0, #92	; 0x5c
    7dfa:	d1f3      	bne.n	7de4 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
    7dfc:	07e3      	lsls	r3, r4, #31
    7dfe:	d4f1      	bmi.n	7de4 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    7e00:	7868      	ldrb	r0, [r5, #1]
    7e02:	f7ff ffbf 	bl	7d84 <foldcase>
    7e06:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    7e0a:	bf18      	it	ne
    7e0c:	f105 0802 	addne.w	r8, r5, #2
    7e10:	e7e8      	b.n	7de4 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    7e12:	06e4      	lsls	r4, r4, #27
    7e14:	d501      	bpl.n	7e1a <fnmatchx+0x86>
    7e16:	2f2f      	cmp	r7, #47	; 0x2f
    7e18:	d0c5      	beq.n	7da6 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    7e1a:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
    7e1c:	bf18      	it	ne
    7e1e:	2001      	movne	r0, #1
    7e20:	e7c1      	b.n	7da6 <fnmatchx+0x12>
            if (*string == EOS)
    7e22:	2f00      	cmp	r7, #0
    7e24:	d0be      	beq.n	7da4 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    7e26:	2f2f      	cmp	r7, #47	; 0x2f
    7e28:	d104      	bne.n	7e34 <fnmatchx+0xa0>
    7e2a:	07a1      	lsls	r1, r4, #30
    7e2c:	d4ba      	bmi.n	7da4 <fnmatchx+0x10>
            ++string;
    7e2e:	3201      	adds	r2, #1
            break;
    7e30:	4645      	mov	r5, r8
    7e32:	e7c5      	b.n	7dc0 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    7e34:	2f2e      	cmp	r7, #46	; 0x2e
    7e36:	d1fa      	bne.n	7e2e <fnmatchx+0x9a>
    7e38:	9b04      	ldr	r3, [sp, #16]
    7e3a:	2b00      	cmp	r3, #0
    7e3c:	d0f7      	beq.n	7e2e <fnmatchx+0x9a>
    7e3e:	4552      	cmp	r2, sl
    7e40:	d0b0      	beq.n	7da4 <fnmatchx+0x10>
                (string == stringstart ||
    7e42:	07a3      	lsls	r3, r4, #30
    7e44:	d5f3      	bpl.n	7e2e <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    7e46:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    7e4a:	2b2f      	cmp	r3, #47	; 0x2f
    7e4c:	d1ef      	bne.n	7e2e <fnmatchx+0x9a>
    7e4e:	e7a9      	b.n	7da4 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    7e50:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    7e52:	f7ff ff97 	bl	7d84 <foldcase>
    7e56:	b2c1      	uxtb	r1, r0
            while (c == '*')
    7e58:	292a      	cmp	r1, #42	; 0x2a
    7e5a:	d018      	beq.n	7e8e <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    7e5c:	2f2e      	cmp	r7, #46	; 0x2e
    7e5e:	d109      	bne.n	7e74 <fnmatchx+0xe0>
    7e60:	9b04      	ldr	r3, [sp, #16]
    7e62:	b13b      	cbz	r3, 7e74 <fnmatchx+0xe0>
    7e64:	4552      	cmp	r2, sl
    7e66:	d09d      	beq.n	7da4 <fnmatchx+0x10>
                (string == stringstart ||
    7e68:	07a7      	lsls	r7, r4, #30
    7e6a:	d503      	bpl.n	7e74 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    7e6c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    7e70:	2b2f      	cmp	r3, #47	; 0x2f
    7e72:	d097      	beq.n	7da4 <fnmatchx+0x10>
            if (c == EOS) {
    7e74:	b979      	cbnz	r1, 7e96 <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
    7e76:	f014 0002 	ands.w	r0, r4, #2
    7e7a:	d094      	beq.n	7da6 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    7e7c:	06e6      	lsls	r6, r4, #27
    7e7e:	f100 80b7 	bmi.w	7ff0 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
    7e82:	212f      	movs	r1, #47	; 0x2f
    7e84:	4610      	mov	r0, r2
    7e86:	f001 fe82 	bl	9b8e <strchr>
                        0 : FNM_NOMATCH;
    7e8a:	3800      	subs	r0, #0
    7e8c:	e7c6      	b.n	7e1c <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
    7e8e:	4621      	mov	r1, r4
    7e90:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    7e94:	e7dd      	b.n	7e52 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    7e96:	292f      	cmp	r1, #47	; 0x2f
    7e98:	d021      	beq.n	7ede <fnmatchx+0x14a>
    7e9a:	4616      	mov	r6, r2
    if (recursion-- == 0)
    7e9c:	9b02      	ldr	r3, [sp, #8]
                switch ((e = fnmatchx(pattern, string,
    7e9e:	f024 0904 	bic.w	r9, r4, #4
    if (recursion-- == 0)
    7ea2:	1e5f      	subs	r7, r3, #1
                if (test == '/' && flags & FNM_PATHNAME)
    7ea4:	f004 0a02 	and.w	sl, r4, #2
    7ea8:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    7eaa:	4621      	mov	r1, r4
    7eac:	f89b 0000 	ldrb.w	r0, [fp]
    7eb0:	f7ff ff68 	bl	7d84 <foldcase>
    7eb4:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    7eb8:	f106 0601 	add.w	r6, r6, #1
    7ebc:	f43f af72 	beq.w	7da4 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    7ec0:	463b      	mov	r3, r7
    7ec2:	464a      	mov	r2, r9
    7ec4:	4659      	mov	r1, fp
    7ec6:	4640      	mov	r0, r8
    7ec8:	f7ff ff64 	bl	7d94 <fnmatchx>
    7ecc:	2801      	cmp	r0, #1
    7ece:	f47f af6a 	bne.w	7da6 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    7ed2:	2d2f      	cmp	r5, #47	; 0x2f
    7ed4:	d1e8      	bne.n	7ea8 <fnmatchx+0x114>
    7ed6:	f1ba 0f00 	cmp.w	sl, #0
    7eda:	d0e5      	beq.n	7ea8 <fnmatchx+0x114>
    7edc:	e762      	b.n	7da4 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    7ede:	07a5      	lsls	r5, r4, #30
    7ee0:	d5db      	bpl.n	7e9a <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
    7ee2:	4610      	mov	r0, r2
    7ee4:	f001 fe53 	bl	9b8e <strchr>
    7ee8:	4602      	mov	r2, r0
    7eea:	2800      	cmp	r0, #0
    7eec:	d1a0      	bne.n	7e30 <fnmatchx+0x9c>
    7eee:	e759      	b.n	7da4 <fnmatchx+0x10>
            if (*string == EOS)
    7ef0:	2f00      	cmp	r7, #0
    7ef2:	f43f af57 	beq.w	7da4 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    7ef6:	2f2f      	cmp	r7, #47	; 0x2f
    7ef8:	d102      	bne.n	7f00 <fnmatchx+0x16c>
    7efa:	07a0      	lsls	r0, r4, #30
    7efc:	f53f af52 	bmi.w	7da4 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    7f00:	4621      	mov	r1, r4
    7f02:	4638      	mov	r0, r7
    7f04:	f7ff ff3e 	bl	7d84 <foldcase>
    7f08:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
    7f0a:	f1b8 0f00 	cmp.w	r8, #0
    7f0e:	f43f af49 	beq.w	7da4 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    7f12:	786b      	ldrb	r3, [r5, #1]
    7f14:	2b21      	cmp	r3, #33	; 0x21
    7f16:	d001      	beq.n	7f1c <fnmatchx+0x188>
    7f18:	2b5e      	cmp	r3, #94	; 0x5e
    7f1a:	d126      	bne.n	7f6a <fnmatchx+0x1d6>
        ++pattern;
    7f1c:	2301      	movs	r3, #1
    7f1e:	3502      	adds	r5, #2
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    7f20:	9301      	str	r3, [sp, #4]
    need = 1;
    7f22:	2301      	movs	r3, #1
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    7f24:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    7f28:	ea04 0103 	and.w	r1, r4, r3
    7f2c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    7f2e:	462e      	mov	r6, r5
    7f30:	4621      	mov	r1, r4
    7f32:	f816 0b01 	ldrb.w	r0, [r6], #1
    7f36:	9305      	str	r3, [sp, #20]
    7f38:	f7ff ff24 	bl	7d84 <foldcase>
    7f3c:	fa5f f980 	uxtb.w	r9, r0
    7f40:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
    7f44:	9b05      	ldr	r3, [sp, #20]
    7f46:	d113      	bne.n	7f70 <fnmatchx+0x1dc>
    7f48:	bb2b      	cbnz	r3, 7f96 <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
    7f4a:	9b01      	ldr	r3, [sp, #4]
    7f4c:	455b      	cmp	r3, fp
    7f4e:	f43f af29 	beq.w	7da4 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    7f52:	2e00      	cmp	r6, #0
    7f54:	f43f af26 	beq.w	7da4 <fnmatchx+0x10>
            if (r == (void *)-1) {
    7f58:	1c71      	adds	r1, r6, #1
    7f5a:	d103      	bne.n	7f64 <fnmatchx+0x1d0>
                if (*string != '[')
    7f5c:	2f5b      	cmp	r7, #91	; 0x5b
    7f5e:	f47f af21 	bne.w	7da4 <fnmatchx+0x10>
    7f62:	4646      	mov	r6, r8
            break;
    7f64:	46b0      	mov	r8, r6
            ++string;
    7f66:	3201      	adds	r2, #1
            break;
    7f68:	e762      	b.n	7e30 <fnmatchx+0x9c>
    7f6a:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    7f6c:	2300      	movs	r3, #0
    7f6e:	e7d7      	b.n	7f20 <fnmatchx+0x18c>
        if (c == '/')
    7f70:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
    7f74:	d0f2      	beq.n	7f5c <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    7f76:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    7f7a:	d108      	bne.n	7f8e <fnmatchx+0x1fa>
    7f7c:	9b03      	ldr	r3, [sp, #12]
    7f7e:	b953      	cbnz	r3, 7f96 <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
    7f80:	4621      	mov	r1, r4
    7f82:	7868      	ldrb	r0, [r5, #1]
    7f84:	f7ff fefe 	bl	7d84 <foldcase>
    7f88:	1cae      	adds	r6, r5, #2
    7f8a:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
    7f8e:	f1b9 0f00 	cmp.w	r9, #0
    7f92:	f43f af07 	beq.w	7da4 <fnmatchx+0x10>
        if (*pattern == '-' 
    7f96:	7833      	ldrb	r3, [r6, #0]
    7f98:	2b2d      	cmp	r3, #45	; 0x2d
    7f9a:	d120      	bne.n	7fde <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    7f9c:	4621      	mov	r1, r4
    7f9e:	7870      	ldrb	r0, [r6, #1]
    7fa0:	f7ff fef0 	bl	7d84 <foldcase>
    7fa4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    7fa8:	d019      	beq.n	7fde <fnmatchx+0x24a>
    7faa:	285d      	cmp	r0, #93	; 0x5d
    7fac:	d017      	beq.n	7fde <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    7fae:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    7fb0:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    7fb4:	d10a      	bne.n	7fcc <fnmatchx+0x238>
    7fb6:	9b03      	ldr	r3, [sp, #12]
    7fb8:	b943      	cbnz	r3, 7fcc <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
    7fba:	78b0      	ldrb	r0, [r6, #2]
    7fbc:	f7ff fee2 	bl	7d84 <foldcase>
            if (c2 == EOS)
    7fc0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    7fc4:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
    7fc8:	f43f aeec 	beq.w	7da4 <fnmatchx+0x10>
            if (c <= test && test <= c2)
    7fcc:	9b00      	ldr	r3, [sp, #0]
    7fce:	454b      	cmp	r3, r9
    7fd0:	db03      	blt.n	7fda <fnmatchx+0x246>
                ok = 1;
    7fd2:	4283      	cmp	r3, r0
    7fd4:	bfd8      	it	le
    7fd6:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
    7fda:	2300      	movs	r3, #0
    7fdc:	e7a7      	b.n	7f2e <fnmatchx+0x19a>
        } else if (c == test)
    7fde:	9b00      	ldr	r3, [sp, #0]
    7fe0:	4635      	mov	r5, r6
    7fe2:	454b      	cmp	r3, r9
    7fe4:	bf08      	it	eq
    7fe6:	f04f 0b01 	moveq.w	fp, #1
    7fea:	e7f6      	b.n	7fda <fnmatchx+0x246>
        return FNM_NORES;
    7fec:	2003      	movs	r0, #3
    7fee:	e6da      	b.n	7da6 <fnmatchx+0x12>
                return 0;
    7ff0:	4608      	mov	r0, r1
    7ff2:	e6d8      	b.n	7da6 <fnmatchx+0x12>

00007ff4 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    7ff4:	2340      	movs	r3, #64	; 0x40
    7ff6:	f7ff becd 	b.w	7d94 <fnmatchx>

00007ffa <arch_printk_char_out>:
}
    7ffa:	2000      	movs	r0, #0
    7ffc:	4770      	bx	lr

00007ffe <print_err>:
{
    7ffe:	b570      	push	{r4, r5, r6, lr}
    8000:	460d      	mov	r5, r1
    8002:	4604      	mov	r4, r0
	out('E', ctx);
    8004:	2045      	movs	r0, #69	; 0x45
    8006:	47a0      	blx	r4
	out('R', ctx);
    8008:	4629      	mov	r1, r5
    800a:	2052      	movs	r0, #82	; 0x52
    800c:	47a0      	blx	r4
	out('R', ctx);
    800e:	4629      	mov	r1, r5
    8010:	4623      	mov	r3, r4
}
    8012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    8016:	2052      	movs	r0, #82	; 0x52
    8018:	4718      	bx	r3

0000801a <str_out>:
{
    801a:	b530      	push	{r4, r5, lr}
    801c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    801e:	680c      	ldr	r4, [r1, #0]
    8020:	1c55      	adds	r5, r2, #1
    8022:	b114      	cbz	r4, 802a <str_out+0x10>
    8024:	684b      	ldr	r3, [r1, #4]
    8026:	4293      	cmp	r3, r2
    8028:	dc01      	bgt.n	802e <str_out+0x14>
		ctx->count++;
    802a:	608d      	str	r5, [r1, #8]
}
    802c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    802e:	3b01      	subs	r3, #1
    8030:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    8032:	bf08      	it	eq
    8034:	2200      	moveq	r2, #0
    8036:	608d      	str	r5, [r1, #8]
    8038:	bf0c      	ite	eq
    803a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    803c:	54a0      	strbne	r0, [r4, r2]
    803e:	e7f5      	b.n	802c <str_out+0x12>

00008040 <snprintk>:
{
    8040:	b40c      	push	{r2, r3}
    8042:	b507      	push	{r0, r1, r2, lr}
    8044:	ab04      	add	r3, sp, #16
    8046:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    804a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    804c:	f7f8 ff9a 	bl	f84 <vsnprintk>
}
    8050:	b003      	add	sp, #12
    8052:	f85d eb04 	ldr.w	lr, [sp], #4
    8056:	b002      	add	sp, #8
    8058:	4770      	bx	lr

0000805a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    805a:	4604      	mov	r4, r0
    805c:	b508      	push	{r3, lr}
    805e:	4608      	mov	r0, r1
    8060:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    8062:	461a      	mov	r2, r3
    8064:	47a0      	blx	r4
	return z_impl_k_current_get();
    8066:	f7fe fffd 	bl	7064 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    806a:	f7fc fcd3 	bl	4a14 <z_impl_k_thread_abort>

0000806e <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
    806e:	b538      	push	{r3, r4, r5, lr}
	s64_t time = timeutil_timegm64(tm);
    8070:	f7f8 ff9c 	bl	fac <timeutil_timegm64>
    8074:	4605      	mov	r5, r0
    8076:	460c      	mov	r4, r1
    8078:	f7fe f950 	bl	631c <z_impl_z_errno>
	time_t rv = (time_t)time;

	errno = 0;
    807c:	2300      	movs	r3, #0
		|| (time > (s64_t)INT32_MAX))) {
		errno = ERANGE;
		rv = -1;
	}
	return rv;
}
    807e:	4621      	mov	r1, r4
	errno = 0;
    8080:	6003      	str	r3, [r0, #0]
}
    8082:	4628      	mov	r0, r5
    8084:	bd38      	pop	{r3, r4, r5, pc}

00008086 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    8086:	6803      	ldr	r3, [r0, #0]
    8088:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    808c:	6883      	ldr	r3, [r0, #8]
    808e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    8092:	bf2c      	ite	cs
    8094:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    8098:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    809c:	4770      	bx	lr

0000809e <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    809e:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    80a0:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    80a2:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    80a4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    80a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    80ac:	bf2c      	ite	cs
    80ae:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    80b2:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    80b6:	bd10      	pop	{r4, pc}

000080b8 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    80b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80bc:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    80be:	2200      	movs	r2, #0
    80c0:	460d      	mov	r5, r1
    80c2:	f7ff ffe0 	bl	8086 <chunk_field>
    80c6:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    80c8:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    80ca:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    80cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    80d0:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    80d4:	bf34      	ite	cc
    80d6:	2000      	movcc	r0, #0
    80d8:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    80da:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    80dc:	f1c0 001f 	rsb	r0, r0, #31
    80e0:	1a80      	subs	r0, r0, r2
    80e2:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    80e6:	684a      	ldr	r2, [r1, #4]
    80e8:	1c56      	adds	r6, r2, #1
    80ea:	604e      	str	r6, [r1, #4]
    80ec:	b9a2      	cbnz	r2, 8118 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    80ee:	2201      	movs	r2, #1
    80f0:	fa02 f100 	lsl.w	r1, r2, r0
    80f4:	6962      	ldr	r2, [r4, #20]
    80f6:	430a      	orrs	r2, r1
    80f8:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    80fa:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    80fc:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    8100:	2202      	movs	r2, #2
    8102:	462b      	mov	r3, r5
    8104:	4620      	mov	r0, r4
    8106:	f7ff ffca 	bl	809e <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    810a:	2203      	movs	r2, #3
    810c:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    810e:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    8110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    8114:	f7ff bfc3 	b.w	809e <chunk_set>
		chunkid_t second = h->buckets[b].next;
    8118:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    811c:	2202      	movs	r2, #2
    811e:	4639      	mov	r1, r7
    8120:	4620      	mov	r0, r4
    8122:	f7ff ffb0 	bl	8086 <chunk_field>
    8126:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
    8128:	4603      	mov	r3, r0
    812a:	2202      	movs	r2, #2
    812c:	4629      	mov	r1, r5
    812e:	4620      	mov	r0, r4
    8130:	f7ff ffb5 	bl	809e <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    8134:	463b      	mov	r3, r7
    8136:	2203      	movs	r2, #3
    8138:	4629      	mov	r1, r5
    813a:	4620      	mov	r0, r4
    813c:	f7ff ffaf 	bl	809e <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    8140:	2203      	movs	r2, #3
    8142:	4631      	mov	r1, r6
    8144:	462b      	mov	r3, r5
    8146:	4620      	mov	r0, r4
    8148:	f7ff ffa9 	bl	809e <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    814c:	2202      	movs	r2, #2
    814e:	4639      	mov	r1, r7
    8150:	e7dd      	b.n	810e <free_list_add+0x56>

00008152 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    8152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    8154:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    8156:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    815a:	1dcc      	adds	r4, r1, #7
    815c:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    8160:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    8164:	1b1b      	subs	r3, r3, r4
    8166:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    8168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    816c:	bf2c      	ite	cs
    816e:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    8172:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
    8174:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
    8176:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    8178:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    817a:	60e1      	str	r1, [r4, #12]
    817c:	bf94      	ite	ls
    817e:	2100      	movls	r1, #0
    8180:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    8182:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    8186:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    8188:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    818a:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    818e:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    8192:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    8194:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    8198:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    819c:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    819e:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    81a0:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    81a2:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    81a4:	68a2      	ldr	r2, [r4, #8]
    81a6:	42ba      	cmp	r2, r7
    81a8:	bf94      	ite	ls
    81aa:	2200      	movls	r2, #0
    81ac:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    81ae:	f1c2 021f 	rsb	r2, r2, #31
    81b2:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    81b4:	4290      	cmp	r0, r2
    81b6:	dd0a      	ble.n	81ce <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    81b8:	4620      	mov	r0, r4
    81ba:	1a5b      	subs	r3, r3, r1
    81bc:	2200      	movs	r2, #0
    81be:	f7ff ff6e 	bl	809e <chunk_set>
	free_list_add(h, h->chunk0);
    81c2:	4620      	mov	r0, r4
    81c4:	6921      	ldr	r1, [r4, #16]
}
    81c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    81ca:	f7ff bf75 	b.w	80b8 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    81ce:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    81d2:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    81d4:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    81d8:	e7e4      	b.n	81a4 <sys_heap_init+0x52>

000081da <ring_buf_space_get>:
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
    81da:	6903      	ldr	r3, [r0, #16]
    81dc:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
    81e0:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
    81e2:	bf96      	itet	ls
    81e4:	189b      	addls	r3, r3, r2
		return head - tail - 1;
    81e6:	f102 33ff 	addhi.w	r3, r2, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
    81ea:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
    81ee:	1a18      	subs	r0, r3, r0
}
    81f0:	4770      	bx	lr

000081f2 <ring_buf_put_claim>:

u32_t ring_buf_put_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
	u32_t space, trail_size, allocated;

	space = z_ring_buf_custom_space_get(buf->size, buf->head,
    81f2:	6803      	ldr	r3, [r0, #0]
{
    81f4:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
    81f6:	6884      	ldr	r4, [r0, #8]
    81f8:	6906      	ldr	r6, [r0, #16]
{
    81fa:	4605      	mov	r5, r0
	if (tail < head) {
    81fc:	42a3      	cmp	r3, r4
					    buf->misc.byte_mode.tmp_tail);

	/* Limit requested size to available size. */
	size = MIN(size, space);
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
    81fe:	eba6 0004 	sub.w	r0, r6, r4
	return (size - tail) + head - 1;
    8202:	bf98      	it	ls
    8204:	199b      	addls	r3, r3, r6

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
    8206:	4290      	cmp	r0, r2
    8208:	bf28      	it	cs
    820a:	4610      	movcs	r0, r2
    820c:	3b01      	subs	r3, #1
    820e:	1b1b      	subs	r3, r3, r4
    8210:	4298      	cmp	r0, r3
    8212:	bf28      	it	cs
    8214:	4618      	movcs	r0, r3

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    8216:	696b      	ldr	r3, [r5, #20]
    8218:	4423      	add	r3, r4
	buf->misc.byte_mode.tmp_tail =
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
    821a:	4404      	add	r4, r0
	return val >= max ? (val - max) : val;
    821c:	42a6      	cmp	r6, r4
    821e:	bf98      	it	ls
    8220:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    8222:	600b      	str	r3, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    8224:	60ac      	str	r4, [r5, #8]

	return allocated;
}
    8226:	bd70      	pop	{r4, r5, r6, pc}

00008228 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, u32_t size)
{
    8228:	b510      	push	{r4, lr}
    822a:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
    822c:	f7ff ffd5 	bl	81da <ring_buf_space_get>
    8230:	4288      	cmp	r0, r1
    8232:	d309      	bcc.n	8248 <ring_buf_put_finish+0x20>
	}

	buf->tail = wrap(buf->tail + size, buf->size);
	buf->misc.byte_mode.tmp_tail = buf->tail;

	return 0;
    8234:	2000      	movs	r0, #0
	buf->tail = wrap(buf->tail + size, buf->size);
    8236:	6863      	ldr	r3, [r4, #4]
    8238:	4419      	add	r1, r3
    823a:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
    823c:	4299      	cmp	r1, r3
    823e:	bf28      	it	cs
    8240:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    8242:	e9c4 1101 	strd	r1, r1, [r4, #4]
}
    8246:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8248:	f06f 0015 	mvn.w	r0, #21
    824c:	e7fb      	b.n	8246 <ring_buf_put_finish+0x1e>

0000824e <ring_buf_put>:

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
    824e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8252:	4680      	mov	r8, r0
    8254:	460e      	mov	r6, r1
    8256:	4615      	mov	r5, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
    8258:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    825a:	462a      	mov	r2, r5
    825c:	a901      	add	r1, sp, #4
    825e:	4640      	mov	r0, r8
    8260:	f7ff ffc7 	bl	81f2 <ring_buf_put_claim>
    8264:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    8266:	4602      	mov	r2, r0
    8268:	4631      	mov	r1, r6
    826a:	9801      	ldr	r0, [sp, #4]
    826c:	f001 fce6 	bl	9c3c <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    8270:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    8272:	4427      	add	r7, r4
		data += partial_size;
    8274:	4426      	add	r6, r4
	} while (size && partial_size);
    8276:	d001      	beq.n	827c <ring_buf_put+0x2e>
    8278:	2c00      	cmp	r4, #0
    827a:	d1ee      	bne.n	825a <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    827c:	4639      	mov	r1, r7
    827e:	4640      	mov	r0, r8
    8280:	f7ff ffd2 	bl	8228 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    8284:	4638      	mov	r0, r7
    8286:	b002      	add	sp, #8
    8288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000828c <ring_buf_get_claim>:

u32_t ring_buf_get_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
    828c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t space, granted_size, trail_size;

	space = (buf->size - 1) -
		z_ring_buf_custom_space_get(buf->size,
    828e:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
{
    8292:	4617      	mov	r7, r2
		z_ring_buf_custom_space_get(buf->size,
    8294:	6845      	ldr	r5, [r0, #4]
{
    8296:	4604      	mov	r4, r0
	if (tail < head) {
    8298:	42ab      	cmp	r3, r5
					    buf->misc.byte_mode.tmp_head,
					    buf->tail);
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
    829a:	eba6 0203 	sub.w	r2, r6, r3
	return (size - tail) + head - 1;
    829e:	bf96      	itet	ls
    82a0:	18f0      	addls	r0, r6, r3
		return head - tail - 1;
    82a2:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
    82a6:	f100 30ff 	addls.w	r0, r0, #4294967295	; 0xffffffff

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    82aa:	42ba      	cmp	r2, r7
    82ac:	bf28      	it	cs
    82ae:	463a      	movcs	r2, r7
    82b0:	1b45      	subs	r5, r0, r5
	space = (buf->size - 1) -
    82b2:	1e70      	subs	r0, r6, #1
    82b4:	1b40      	subs	r0, r0, r5
	granted_size = MIN(trail_size, granted_size);
    82b6:	4290      	cmp	r0, r2
    82b8:	bf28      	it	cs
    82ba:	4610      	movcs	r0, r2

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
    82bc:	6962      	ldr	r2, [r4, #20]
    82be:	441a      	add	r2, r3
	buf->misc.byte_mode.tmp_head =
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
    82c0:	4403      	add	r3, r0
	return val >= max ? (val - max) : val;
    82c2:	429e      	cmp	r6, r3
    82c4:	bf98      	it	ls
    82c6:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
    82c8:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_head =
    82ca:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
    82cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000082ce <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, u32_t size)
{
    82ce:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
    82d0:	6905      	ldr	r5, [r0, #16]
{
    82d2:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
    82d4:	f7ff ff81 	bl	81da <ring_buf_space_get>
    82d8:	1e6b      	subs	r3, r5, #1
    82da:	1a1b      	subs	r3, r3, r0

	if (size > allocated) {
    82dc:	428b      	cmp	r3, r1
    82de:	d308      	bcc.n	82f2 <ring_buf_get_finish+0x24>
	}

	buf->head = wrap(buf->head + size, buf->size);
	buf->misc.byte_mode.tmp_head = buf->head;

	return 0;
    82e0:	2000      	movs	r0, #0
	buf->head = wrap(buf->head + size, buf->size);
    82e2:	6823      	ldr	r3, [r4, #0]
    82e4:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
    82e6:	428d      	cmp	r5, r1
    82e8:	bf98      	it	ls
    82ea:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
    82ec:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    82ee:	60e1      	str	r1, [r4, #12]
}
    82f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    82f2:	f06f 0015 	mvn.w	r0, #21
    82f6:	e7fb      	b.n	82f0 <ring_buf_get_finish+0x22>

000082f8 <ring_buf_get>:

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
    82f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    82fc:	4680      	mov	r8, r0
    82fe:	460e      	mov	r6, r1
    8300:	4615      	mov	r5, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
    8302:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    8304:	462a      	mov	r2, r5
    8306:	a901      	add	r1, sp, #4
    8308:	4640      	mov	r0, r8
    830a:	f7ff ffbf 	bl	828c <ring_buf_get_claim>
    830e:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
    8310:	4602      	mov	r2, r0
    8312:	9901      	ldr	r1, [sp, #4]
    8314:	4630      	mov	r0, r6
    8316:	f001 fc91 	bl	9c3c <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    831a:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    831c:	4427      	add	r7, r4
		data += partial_size;
    831e:	4426      	add	r6, r4
	} while (size && partial_size);
    8320:	d001      	beq.n	8326 <ring_buf_get+0x2e>
    8322:	2c00      	cmp	r4, #0
    8324:	d1ee      	bne.n	8304 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    8326:	4639      	mov	r1, r7
    8328:	4640      	mov	r0, r8
    832a:	f7ff ffd0 	bl	82ce <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    832e:	4638      	mov	r0, r7
    8330:	b002      	add	sp, #8
    8332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008336 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8336:	4770      	bx	lr

00008338 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    8338:	f7fd bf10 	b.w	615c <SystemInit>

0000833c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    833c:	2300      	movs	r3, #0
	list->head = NULL;
    833e:	e9c0 3300 	strd	r3, r3, [r0]
}
    8342:	4770      	bx	lr

00008344 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    8344:	6803      	ldr	r3, [r0, #0]
    8346:	b923      	cbnz	r3, 8352 <log_list_add_tail+0xe>
		list->head = msg;
    8348:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    834a:	2300      	movs	r3, #0
	list->tail = msg;
    834c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    834e:	600b      	str	r3, [r1, #0]
}
    8350:	4770      	bx	lr
		list->tail->next = msg;
    8352:	6843      	ldr	r3, [r0, #4]
    8354:	6019      	str	r1, [r3, #0]
    8356:	e7f8      	b.n	834a <log_list_add_tail+0x6>

00008358 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    8358:	6800      	ldr	r0, [r0, #0]
    835a:	4770      	bx	lr

0000835c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    835c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    835e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    8360:	b108      	cbz	r0, 8366 <log_list_head_get+0xa>
		list->head = list->head->next;
    8362:	6802      	ldr	r2, [r0, #0]
    8364:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    8366:	4770      	bx	lr

00008368 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    8368:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    836a:	f7f9 fa1b 	bl	17a4 <log_msg_chunk_alloc>

	if (msg != NULL) {
    836e:	b118      	cbz	r0, 8378 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    8370:	2301      	movs	r3, #1
    8372:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    8374:	2300      	movs	r3, #0
    8376:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    8378:	bd08      	pop	{r3, pc}

0000837a <k_cycle_get_32_wrapper>:
    837a:	f7fb bdf5 	b.w	3f68 <z_timer_cycle_get_32>

0000837e <dummy_timestamp>:
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr

00008382 <z_log_get_s_mask>:
{
    8382:	b5f0      	push	{r4, r5, r6, r7, lr}
    8384:	4605      	mov	r5, r0
	u32_t mask = 0;
    8386:	2000      	movs	r0, #0
				mask |= BIT(arg);
    8388:	2701      	movs	r7, #1
	u32_t arg = 0;
    838a:	4603      	mov	r3, r0
	bool arm = false;
    838c:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
    838e:	f815 4b01 	ldrb.w	r4, [r5], #1
    8392:	b10c      	cbz	r4, 8398 <z_log_get_s_mask+0x16>
    8394:	428b      	cmp	r3, r1
    8396:	d300      	bcc.n	839a <z_log_get_s_mask+0x18>
}
    8398:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    839a:	2c25      	cmp	r4, #37	; 0x25
    839c:	d102      	bne.n	83a4 <z_log_get_s_mask+0x22>
			arm = !arm;
    839e:	f082 0201 	eor.w	r2, r2, #1
    83a2:	e7f4      	b.n	838e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    83a4:	2a00      	cmp	r2, #0
    83a6:	d0f2      	beq.n	838e <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    83a8:	f044 0620 	orr.w	r6, r4, #32
    83ac:	3e61      	subs	r6, #97	; 0x61
    83ae:	2e19      	cmp	r6, #25
    83b0:	d8ed      	bhi.n	838e <z_log_get_s_mask+0xc>
			if (curr == 's') {
    83b2:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    83b4:	bf04      	itt	eq
    83b6:	fa07 f203 	lsleq.w	r2, r7, r3
    83ba:	4310      	orreq	r0, r2
			arg++;
    83bc:	3301      	adds	r3, #1
			arm = false;
    83be:	2200      	movs	r2, #0
    83c0:	e7e5      	b.n	838e <z_log_get_s_mask+0xc>

000083c2 <log_backend_disable>:
	backend->cb->active = false;
    83c2:	2100      	movs	r1, #0
    83c4:	6843      	ldr	r3, [r0, #4]
    83c6:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
    83c8:	f7f8 bf8c 	b.w	12e4 <backend_filter_set>

000083cc <log_0>:
{
    83cc:	b538      	push	{r3, r4, r5, lr}
    83ce:	4605      	mov	r5, r0
    83d0:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    83d2:	f7ff ffc9 	bl	8368 <z_log_msg_std_alloc>

	if (msg != NULL) {
    83d6:	b128      	cbz	r0, 83e4 <log_0+0x18>
		msg_finalize(msg, src_level);
    83d8:	4621      	mov	r1, r4
		msg->str = str;
    83da:	6105      	str	r5, [r0, #16]
}
    83dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    83e0:	f7f9 b902 	b.w	15e8 <msg_finalize>
}
    83e4:	bd38      	pop	{r3, r4, r5, pc}

000083e6 <log_1>:
{
    83e6:	b570      	push	{r4, r5, r6, lr}
    83e8:	4606      	mov	r6, r0
    83ea:	460d      	mov	r5, r1
    83ec:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    83ee:	f7ff ffbb 	bl	8368 <z_log_msg_std_alloc>

	if (msg != NULL) {
    83f2:	b158      	cbz	r0, 840c <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    83f4:	2101      	movs	r1, #1
    83f6:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    83f8:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    83fa:	f361 1207 	bfi	r2, r1, #4, #4
    83fe:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
    8400:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
    8402:	6145      	str	r5, [r0, #20]
}
    8404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    8408:	f7f9 b8ee 	b.w	15e8 <msg_finalize>
}
    840c:	bd70      	pop	{r4, r5, r6, pc}

0000840e <log_2>:
{
    840e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8412:	4680      	mov	r8, r0
    8414:	460f      	mov	r7, r1
    8416:	4616      	mov	r6, r2
    8418:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    841a:	f7ff ffa5 	bl	8368 <z_log_msg_std_alloc>

	if (msg != NULL) {
    841e:	b168      	cbz	r0, 843c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    8420:	2202      	movs	r2, #2
    8422:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    8424:	4629      	mov	r1, r5
    8426:	f362 1307 	bfi	r3, r2, #4, #4
    842a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    842c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    8430:	f8c0 8010 	str.w	r8, [r0, #16]
}
    8434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    8438:	f7f9 b8d6 	b.w	15e8 <msg_finalize>
}
    843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008440 <log_3>:
{
    8440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8444:	4680      	mov	r8, r0
    8446:	460f      	mov	r7, r1
    8448:	4616      	mov	r6, r2
    844a:	461d      	mov	r5, r3
    844c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    8450:	f7ff ff8a 	bl	8368 <z_log_msg_std_alloc>

	if (msg != NULL) {
    8454:	b170      	cbz	r0, 8474 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    8456:	2203      	movs	r2, #3
    8458:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    845a:	4649      	mov	r1, r9
    845c:	f362 1307 	bfi	r3, r2, #4, #4
    8460:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    8462:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    8466:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
    846a:	61c5      	str	r5, [r0, #28]
}
    846c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    8470:	f7f9 b8ba 	b.w	15e8 <msg_finalize>
}
    8474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008478 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    8478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    847c:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    847e:	8903      	ldrh	r3, [r0, #8]
{
    8480:	460e      	mov	r6, r1
    8482:	4611      	mov	r1, r2
	u32_t available_len = msg->hdr.params.hexdump.length;
    8484:	f3c3 028d 	ubfx	r2, r3, #2, #14
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    8488:	42a2      	cmp	r2, r4
{
    848a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
    848e:	d803      	bhi.n	8498 <log_msg_hexdump_data_op+0x20>
		*length = 0;
    8490:	2300      	movs	r3, #0
    8492:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    8494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    8498:	680b      	ldr	r3, [r1, #0]
    849a:	4423      	add	r3, r4
    849c:	4293      	cmp	r3, r2
		*length = available_len - offset;
    849e:	bf84      	itt	hi
    84a0:	1b13      	subhi	r3, r2, r4
    84a2:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    84a4:	2a0c      	cmp	r2, #12
	req_len = *length;
    84a6:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    84aa:	d927      	bls.n	84fc <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
    84ac:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    84ae:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    84b2:	d82a      	bhi.n	850a <log_msg_hexdump_data_op+0x92>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    84b4:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
    84b6:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    84b8:	454a      	cmp	r2, r9
    84ba:	bf28      	it	cs
    84bc:	464a      	movcs	r2, r9
    84be:	4420      	add	r0, r4
    84c0:	4615      	mov	r5, r2
		if (put_op) {
    84c2:	b1ff      	cbz	r7, 8504 <log_msg_hexdump_data_op+0x8c>
			(void)memcpy(&head_data[offset], data, cpy_len);
    84c4:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    84c6:	f001 fbb9 	bl	9c3c <memcpy>
		req_len -= cpy_len;
    84ca:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    84ce:	442e      	add	r6, r5
	while (req_len > 0) {
    84d0:	f1b9 0f00 	cmp.w	r9, #0
    84d4:	d0de      	beq.n	8494 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    84d6:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    84da:	454d      	cmp	r5, r9
    84dc:	bf28      	it	cs
    84de:	464d      	movcs	r5, r9
		if (put_op) {
    84e0:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
    84e2:	462a      	mov	r2, r5
    84e4:	4440      	add	r0, r8
		if (put_op) {
    84e6:	b1bf      	cbz	r7, 8518 <log_msg_hexdump_data_op+0xa0>
			(void)memcpy(&cont->payload.bytes[offset],
    84e8:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    84ea:	f001 fba7 	bl	9c3c <memcpy>
		offset = 0;
    84ee:	2400      	movs	r4, #0
		cont = cont->next;
    84f0:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
    84f4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    84f8:	442e      	add	r6, r5
    84fa:	e7e9      	b.n	84d0 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
    84fc:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
    8500:	3014      	adds	r0, #20
	if (offset < chunk_len) {
    8502:	e7d9      	b.n	84b8 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    8504:	4601      	mov	r1, r0
    8506:	4630      	mov	r0, r6
    8508:	e7dd      	b.n	84c6 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    850a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    850c:	2c1b      	cmp	r4, #27
    850e:	d9df      	bls.n	84d0 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    8510:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    8514:	3c1c      	subs	r4, #28
    8516:	e7f9      	b.n	850c <log_msg_hexdump_data_op+0x94>
			(void)memcpy(data, &cont->payload.bytes[offset],
    8518:	4601      	mov	r1, r0
    851a:	4630      	mov	r0, r6
    851c:	e7e5      	b.n	84ea <log_msg_hexdump_data_op+0x72>

0000851e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    851e:	3004      	adds	r0, #4
    8520:	e8d0 3fef 	ldaex	r3, [r0]
    8524:	3301      	adds	r3, #1
    8526:	e8c0 3fe2 	stlex	r2, r3, [r0]
    852a:	2a00      	cmp	r2, #0
    852c:	d1f8      	bne.n	8520 <log_msg_get+0x2>
}
    852e:	4770      	bx	lr

00008530 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    8530:	7a40      	ldrb	r0, [r0, #9]
}
    8532:	0900      	lsrs	r0, r0, #4
    8534:	4770      	bx	lr

00008536 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    8536:	7a43      	ldrb	r3, [r0, #9]
    8538:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    853c:	ea4f 1213 	mov.w	r2, r3, lsr #4
    8540:	d216      	bcs.n	8570 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    8542:	2a03      	cmp	r2, #3
    8544:	d803      	bhi.n	854e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    8546:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    854a:	6948      	ldr	r0, [r1, #20]
    854c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    854e:	2901      	cmp	r1, #1
    8550:	d803      	bhi.n	855a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    8552:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8556:	6988      	ldr	r0, [r1, #24]
    8558:	4770      	bx	lr
	cont = msg->payload.ext.next;
    855a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    855c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    855e:	2906      	cmp	r1, #6
    8560:	d803      	bhi.n	856a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    8562:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8566:	6848      	ldr	r0, [r1, #4]
    8568:	4770      	bx	lr
		cont = cont->next;
    856a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    856c:	3907      	subs	r1, #7
		cont = cont->next;
    856e:	e7f6      	b.n	855e <log_msg_arg_get+0x28>
		return 0;
    8570:	2000      	movs	r0, #0
}
    8572:	4770      	bx	lr

00008574 <log_msg_put>:
{
    8574:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    8576:	1d02      	adds	r2, r0, #4
    8578:	e8d2 1fef 	ldaex	r1, [r2]
    857c:	3901      	subs	r1, #1
    857e:	e8c2 1fec 	stlex	ip, r1, [r2]
    8582:	f1bc 0f00 	cmp.w	ip, #0
    8586:	d1f7      	bne.n	8578 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
    8588:	685b      	ldr	r3, [r3, #4]
    858a:	b90b      	cbnz	r3, 8590 <log_msg_put+0x1c>
		msg_free(msg);
    858c:	f7f9 b91e 	b.w	17cc <msg_free>
}
    8590:	4770      	bx	lr

00008592 <log_msg_str_get>:
}
    8592:	6900      	ldr	r0, [r0, #16]
    8594:	4770      	bx	lr

00008596 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    8596:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    8598:	2400      	movs	r4, #0
    859a:	9400      	str	r4, [sp, #0]
    859c:	f7ff ff6c 	bl	8478 <log_msg_hexdump_data_op>
}
    85a0:	b002      	add	sp, #8
    85a2:	bd10      	pop	{r4, pc}

000085a4 <buffer_write>:
{
    85a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85a6:	4606      	mov	r6, r0
    85a8:	460d      	mov	r5, r1
    85aa:	4614      	mov	r4, r2
    85ac:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    85ae:	4621      	mov	r1, r4
    85b0:	4628      	mov	r0, r5
    85b2:	463a      	mov	r2, r7
    85b4:	47b0      	blx	r6
	} while (len != 0);
    85b6:	1a24      	subs	r4, r4, r0
		buf += processed;
    85b8:	4405      	add	r5, r0
	} while (len != 0);
    85ba:	d1f8      	bne.n	85ae <buffer_write+0xa>
}
    85bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000085be <std_print>:
{
    85be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85c2:	b08e      	sub	sp, #56	; 0x38
    85c4:	af0e      	add	r7, sp, #56	; 0x38
    85c6:	4680      	mov	r8, r0
    85c8:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    85ca:	f7ff ffe2 	bl	8592 <log_msg_str_get>
    85ce:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    85d0:	4640      	mov	r0, r8
    85d2:	f7ff ffad 	bl	8530 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
    85d6:	f04f 0900 	mov.w	r9, #0
	u32_t nargs = log_msg_nargs_get(msg);
    85da:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    85dc:	0083      	lsls	r3, r0, #2
    85de:	3307      	adds	r3, #7
    85e0:	f023 0307 	bic.w	r3, r3, #7
    85e4:	ebad 0d03 	sub.w	sp, sp, r3
    85e8:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    85ea:	45d1      	cmp	r9, sl
    85ec:	d116      	bne.n	861c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    85ee:	4640      	mov	r0, r8
    85f0:	f7ff ff9e 	bl	8530 <log_msg_nargs_get>
    85f4:	280f      	cmp	r0, #15
    85f6:	d81e      	bhi.n	8636 <std_print+0x78>
    85f8:	e8df f010 	tbh	[pc, r0, lsl #1]
    85fc:	00200019 	.word	0x00200019
    8600:	002d0026 	.word	0x002d0026
    8604:	00410036 	.word	0x00410036
    8608:	005d004e 	.word	0x005d004e
    860c:	0081006e 	.word	0x0081006e
    8610:	00ad0096 	.word	0x00ad0096
    8614:	00e100c6 	.word	0x00e100c6
    8618:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    861c:	4649      	mov	r1, r9
    861e:	4640      	mov	r0, r8
    8620:	f7ff ff89 	bl	8536 <log_msg_arg_get>
    8624:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    8628:	f109 0901 	add.w	r9, r9, #1
    862c:	e7dd      	b.n	85ea <std_print+0x2c>
		print_formatted(log_output, str);
    862e:	4631      	mov	r1, r6
    8630:	4628      	mov	r0, r5
    8632:	f7f9 f909 	bl	1848 <print_formatted>
}
    8636:	46bd      	mov	sp, r7
    8638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    863c:	4631      	mov	r1, r6
    863e:	4628      	mov	r0, r5
    8640:	6822      	ldr	r2, [r4, #0]
    8642:	f7f9 f901 	bl	1848 <print_formatted>
		break;
    8646:	e7f6      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    8648:	4631      	mov	r1, r6
    864a:	e9d4 2300 	ldrd	r2, r3, [r4]
    864e:	4628      	mov	r0, r5
    8650:	f7f9 f8fa 	bl	1848 <print_formatted>
		break;
    8654:	e7ef      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    8656:	68a3      	ldr	r3, [r4, #8]
    8658:	4631      	mov	r1, r6
    865a:	9300      	str	r3, [sp, #0]
    865c:	4628      	mov	r0, r5
    865e:	e9d4 2300 	ldrd	r2, r3, [r4]
    8662:	f7f9 f8f1 	bl	1848 <print_formatted>
		break;
    8666:	e7e6      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    8668:	68e3      	ldr	r3, [r4, #12]
    866a:	4631      	mov	r1, r6
    866c:	9301      	str	r3, [sp, #4]
    866e:	68a3      	ldr	r3, [r4, #8]
    8670:	4628      	mov	r0, r5
    8672:	9300      	str	r3, [sp, #0]
    8674:	e9d4 2300 	ldrd	r2, r3, [r4]
    8678:	f7f9 f8e6 	bl	1848 <print_formatted>
		break;
    867c:	e7db      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    867e:	6923      	ldr	r3, [r4, #16]
    8680:	4631      	mov	r1, r6
    8682:	9302      	str	r3, [sp, #8]
    8684:	68e3      	ldr	r3, [r4, #12]
    8686:	4628      	mov	r0, r5
    8688:	9301      	str	r3, [sp, #4]
    868a:	68a3      	ldr	r3, [r4, #8]
    868c:	9300      	str	r3, [sp, #0]
    868e:	e9d4 2300 	ldrd	r2, r3, [r4]
    8692:	f7f9 f8d9 	bl	1848 <print_formatted>
		break;
    8696:	e7ce      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    8698:	6963      	ldr	r3, [r4, #20]
    869a:	4631      	mov	r1, r6
    869c:	9303      	str	r3, [sp, #12]
    869e:	6923      	ldr	r3, [r4, #16]
    86a0:	4628      	mov	r0, r5
    86a2:	9302      	str	r3, [sp, #8]
    86a4:	68e3      	ldr	r3, [r4, #12]
    86a6:	9301      	str	r3, [sp, #4]
    86a8:	68a3      	ldr	r3, [r4, #8]
    86aa:	9300      	str	r3, [sp, #0]
    86ac:	e9d4 2300 	ldrd	r2, r3, [r4]
    86b0:	f7f9 f8ca 	bl	1848 <print_formatted>
		break;
    86b4:	e7bf      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    86b6:	69a3      	ldr	r3, [r4, #24]
    86b8:	4631      	mov	r1, r6
    86ba:	9304      	str	r3, [sp, #16]
    86bc:	6963      	ldr	r3, [r4, #20]
    86be:	4628      	mov	r0, r5
    86c0:	9303      	str	r3, [sp, #12]
    86c2:	6923      	ldr	r3, [r4, #16]
    86c4:	9302      	str	r3, [sp, #8]
    86c6:	68e3      	ldr	r3, [r4, #12]
    86c8:	9301      	str	r3, [sp, #4]
    86ca:	68a3      	ldr	r3, [r4, #8]
    86cc:	9300      	str	r3, [sp, #0]
    86ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    86d2:	f7f9 f8b9 	bl	1848 <print_formatted>
		break;
    86d6:	e7ae      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    86d8:	69e3      	ldr	r3, [r4, #28]
    86da:	4631      	mov	r1, r6
    86dc:	9305      	str	r3, [sp, #20]
    86de:	69a3      	ldr	r3, [r4, #24]
    86e0:	4628      	mov	r0, r5
    86e2:	9304      	str	r3, [sp, #16]
    86e4:	6963      	ldr	r3, [r4, #20]
    86e6:	9303      	str	r3, [sp, #12]
    86e8:	6923      	ldr	r3, [r4, #16]
    86ea:	9302      	str	r3, [sp, #8]
    86ec:	68e3      	ldr	r3, [r4, #12]
    86ee:	9301      	str	r3, [sp, #4]
    86f0:	68a3      	ldr	r3, [r4, #8]
    86f2:	9300      	str	r3, [sp, #0]
    86f4:	e9d4 2300 	ldrd	r2, r3, [r4]
    86f8:	f7f9 f8a6 	bl	1848 <print_formatted>
		break;
    86fc:	e79b      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    86fe:	6a23      	ldr	r3, [r4, #32]
    8700:	4631      	mov	r1, r6
    8702:	9306      	str	r3, [sp, #24]
    8704:	69e3      	ldr	r3, [r4, #28]
    8706:	4628      	mov	r0, r5
    8708:	9305      	str	r3, [sp, #20]
    870a:	69a3      	ldr	r3, [r4, #24]
    870c:	9304      	str	r3, [sp, #16]
    870e:	6963      	ldr	r3, [r4, #20]
    8710:	9303      	str	r3, [sp, #12]
    8712:	6923      	ldr	r3, [r4, #16]
    8714:	9302      	str	r3, [sp, #8]
    8716:	68e3      	ldr	r3, [r4, #12]
    8718:	9301      	str	r3, [sp, #4]
    871a:	68a3      	ldr	r3, [r4, #8]
    871c:	9300      	str	r3, [sp, #0]
    871e:	e9d4 2300 	ldrd	r2, r3, [r4]
    8722:	f7f9 f891 	bl	1848 <print_formatted>
		break;
    8726:	e786      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    8728:	6a63      	ldr	r3, [r4, #36]	; 0x24
    872a:	4631      	mov	r1, r6
    872c:	9307      	str	r3, [sp, #28]
    872e:	6a23      	ldr	r3, [r4, #32]
    8730:	4628      	mov	r0, r5
    8732:	9306      	str	r3, [sp, #24]
    8734:	69e3      	ldr	r3, [r4, #28]
    8736:	9305      	str	r3, [sp, #20]
    8738:	69a3      	ldr	r3, [r4, #24]
    873a:	9304      	str	r3, [sp, #16]
    873c:	6963      	ldr	r3, [r4, #20]
    873e:	9303      	str	r3, [sp, #12]
    8740:	6923      	ldr	r3, [r4, #16]
    8742:	9302      	str	r3, [sp, #8]
    8744:	68e3      	ldr	r3, [r4, #12]
    8746:	9301      	str	r3, [sp, #4]
    8748:	68a3      	ldr	r3, [r4, #8]
    874a:	9300      	str	r3, [sp, #0]
    874c:	e9d4 2300 	ldrd	r2, r3, [r4]
    8750:	f7f9 f87a 	bl	1848 <print_formatted>
		break;
    8754:	e76f      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    8756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8758:	4631      	mov	r1, r6
    875a:	9308      	str	r3, [sp, #32]
    875c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    875e:	4628      	mov	r0, r5
    8760:	9307      	str	r3, [sp, #28]
    8762:	6a23      	ldr	r3, [r4, #32]
    8764:	9306      	str	r3, [sp, #24]
    8766:	69e3      	ldr	r3, [r4, #28]
    8768:	9305      	str	r3, [sp, #20]
    876a:	69a3      	ldr	r3, [r4, #24]
    876c:	9304      	str	r3, [sp, #16]
    876e:	6963      	ldr	r3, [r4, #20]
    8770:	9303      	str	r3, [sp, #12]
    8772:	6923      	ldr	r3, [r4, #16]
    8774:	9302      	str	r3, [sp, #8]
    8776:	68e3      	ldr	r3, [r4, #12]
    8778:	9301      	str	r3, [sp, #4]
    877a:	68a3      	ldr	r3, [r4, #8]
    877c:	9300      	str	r3, [sp, #0]
    877e:	e9d4 2300 	ldrd	r2, r3, [r4]
    8782:	f7f9 f861 	bl	1848 <print_formatted>
		break;
    8786:	e756      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    8788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    878a:	4631      	mov	r1, r6
    878c:	9309      	str	r3, [sp, #36]	; 0x24
    878e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8790:	4628      	mov	r0, r5
    8792:	9308      	str	r3, [sp, #32]
    8794:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8796:	9307      	str	r3, [sp, #28]
    8798:	6a23      	ldr	r3, [r4, #32]
    879a:	9306      	str	r3, [sp, #24]
    879c:	69e3      	ldr	r3, [r4, #28]
    879e:	9305      	str	r3, [sp, #20]
    87a0:	69a3      	ldr	r3, [r4, #24]
    87a2:	9304      	str	r3, [sp, #16]
    87a4:	6963      	ldr	r3, [r4, #20]
    87a6:	9303      	str	r3, [sp, #12]
    87a8:	6923      	ldr	r3, [r4, #16]
    87aa:	9302      	str	r3, [sp, #8]
    87ac:	68e3      	ldr	r3, [r4, #12]
    87ae:	9301      	str	r3, [sp, #4]
    87b0:	68a3      	ldr	r3, [r4, #8]
    87b2:	9300      	str	r3, [sp, #0]
    87b4:	e9d4 2300 	ldrd	r2, r3, [r4]
    87b8:	f7f9 f846 	bl	1848 <print_formatted>
		break;
    87bc:	e73b      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    87be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    87c0:	4631      	mov	r1, r6
    87c2:	930a      	str	r3, [sp, #40]	; 0x28
    87c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    87c6:	4628      	mov	r0, r5
    87c8:	9309      	str	r3, [sp, #36]	; 0x24
    87ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    87cc:	9308      	str	r3, [sp, #32]
    87ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87d0:	9307      	str	r3, [sp, #28]
    87d2:	6a23      	ldr	r3, [r4, #32]
    87d4:	9306      	str	r3, [sp, #24]
    87d6:	69e3      	ldr	r3, [r4, #28]
    87d8:	9305      	str	r3, [sp, #20]
    87da:	69a3      	ldr	r3, [r4, #24]
    87dc:	9304      	str	r3, [sp, #16]
    87de:	6963      	ldr	r3, [r4, #20]
    87e0:	9303      	str	r3, [sp, #12]
    87e2:	6923      	ldr	r3, [r4, #16]
    87e4:	9302      	str	r3, [sp, #8]
    87e6:	68e3      	ldr	r3, [r4, #12]
    87e8:	9301      	str	r3, [sp, #4]
    87ea:	68a3      	ldr	r3, [r4, #8]
    87ec:	9300      	str	r3, [sp, #0]
    87ee:	e9d4 2300 	ldrd	r2, r3, [r4]
    87f2:	f7f9 f829 	bl	1848 <print_formatted>
		break;
    87f6:	e71e      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    87f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    87fa:	4631      	mov	r1, r6
    87fc:	930b      	str	r3, [sp, #44]	; 0x2c
    87fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8800:	4628      	mov	r0, r5
    8802:	930a      	str	r3, [sp, #40]	; 0x28
    8804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8806:	9309      	str	r3, [sp, #36]	; 0x24
    8808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    880a:	9308      	str	r3, [sp, #32]
    880c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    880e:	9307      	str	r3, [sp, #28]
    8810:	6a23      	ldr	r3, [r4, #32]
    8812:	9306      	str	r3, [sp, #24]
    8814:	69e3      	ldr	r3, [r4, #28]
    8816:	9305      	str	r3, [sp, #20]
    8818:	69a3      	ldr	r3, [r4, #24]
    881a:	9304      	str	r3, [sp, #16]
    881c:	6963      	ldr	r3, [r4, #20]
    881e:	9303      	str	r3, [sp, #12]
    8820:	6923      	ldr	r3, [r4, #16]
    8822:	9302      	str	r3, [sp, #8]
    8824:	68e3      	ldr	r3, [r4, #12]
    8826:	9301      	str	r3, [sp, #4]
    8828:	68a3      	ldr	r3, [r4, #8]
    882a:	9300      	str	r3, [sp, #0]
    882c:	e9d4 2300 	ldrd	r2, r3, [r4]
    8830:	f7f9 f80a 	bl	1848 <print_formatted>
		break;
    8834:	e6ff      	b.n	8636 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    8836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8838:	4631      	mov	r1, r6
    883a:	930c      	str	r3, [sp, #48]	; 0x30
    883c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    883e:	4628      	mov	r0, r5
    8840:	930b      	str	r3, [sp, #44]	; 0x2c
    8842:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8844:	930a      	str	r3, [sp, #40]	; 0x28
    8846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8848:	9309      	str	r3, [sp, #36]	; 0x24
    884a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    884c:	9308      	str	r3, [sp, #32]
    884e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8850:	9307      	str	r3, [sp, #28]
    8852:	6a23      	ldr	r3, [r4, #32]
    8854:	9306      	str	r3, [sp, #24]
    8856:	69e3      	ldr	r3, [r4, #28]
    8858:	9305      	str	r3, [sp, #20]
    885a:	69a3      	ldr	r3, [r4, #24]
    885c:	9304      	str	r3, [sp, #16]
    885e:	6963      	ldr	r3, [r4, #20]
    8860:	9303      	str	r3, [sp, #12]
    8862:	6923      	ldr	r3, [r4, #16]
    8864:	9302      	str	r3, [sp, #8]
    8866:	68e3      	ldr	r3, [r4, #12]
    8868:	9301      	str	r3, [sp, #4]
    886a:	68a3      	ldr	r3, [r4, #8]
    886c:	9300      	str	r3, [sp, #0]
    886e:	e9d4 2300 	ldrd	r2, r3, [r4]
    8872:	f7f8 ffe9 	bl	1848 <print_formatted>
}
    8876:	e6de      	b.n	8636 <std_print+0x78>

00008878 <log_output_flush>:
		     log_output->control_block->offset,
    8878:	6842      	ldr	r2, [r0, #4]
{
    887a:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
    887c:	e9d2 2300 	ldrd	r2, r3, [r2]
{
    8880:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    8882:	6881      	ldr	r1, [r0, #8]
    8884:	6800      	ldr	r0, [r0, #0]
    8886:	f7ff fe8d 	bl	85a4 <buffer_write>
	log_output->control_block->offset = 0;
    888a:	2200      	movs	r2, #0
    888c:	6863      	ldr	r3, [r4, #4]
    888e:	601a      	str	r2, [r3, #0]
}
    8890:	bd10      	pop	{r4, pc}

00008892 <out_func>:
{
    8892:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    8894:	684b      	ldr	r3, [r1, #4]
{
    8896:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    8898:	681a      	ldr	r2, [r3, #0]
    889a:	68cb      	ldr	r3, [r1, #12]
{
    889c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    889e:	429a      	cmp	r2, r3
    88a0:	d102      	bne.n	88a8 <out_func+0x16>
		log_output_flush(out_ctx);
    88a2:	4608      	mov	r0, r1
    88a4:	f7ff ffe8 	bl	8878 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    88a8:	6863      	ldr	r3, [r4, #4]
    88aa:	e8d3 2fef 	ldaex	r2, [r3]
    88ae:	1c51      	adds	r1, r2, #1
    88b0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    88b4:	2800      	cmp	r0, #0
    88b6:	d1f8      	bne.n	88aa <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
    88b8:	68a3      	ldr	r3, [r4, #8]
}
    88ba:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
    88bc:	549d      	strb	r5, [r3, r2]
}
    88be:	bd38      	pop	{r3, r4, r5, pc}

000088c0 <log_halt>:
    88c0:	2000      	movs	r0, #0
    88c2:	684b      	ldr	r3, [r1, #4]
    88c4:	7158      	strb	r0, [r3, #5]
}
    88c6:	4770      	bx	lr

000088c8 <log_go>:
	backend->cb->active = true;
    88c8:	2201      	movs	r2, #1
    88ca:	684b      	ldr	r3, [r1, #4]
}
    88cc:	2000      	movs	r0, #0
    88ce:	715a      	strb	r2, [r3, #5]
    88d0:	4770      	bx	lr

000088d2 <cmd_log_self_halt>:
{
    88d2:	b510      	push	{r4, lr}
    88d4:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    88d6:	f7f9 fabd 	bl	1e54 <shell_state_precheck>
    88da:	b120      	cbz	r0, 88e6 <cmd_log_self_halt+0x14>
	backend->cb->active = false;
    88dc:	2200      	movs	r2, #0
	return log_halt(shell, shell->log_backend->backend, argc, argv);
    88de:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
    88e0:	681b      	ldr	r3, [r3, #0]
    88e2:	685b      	ldr	r3, [r3, #4]
    88e4:	715a      	strb	r2, [r3, #5]
}
    88e6:	2000      	movs	r0, #0
    88e8:	bd10      	pop	{r4, pc}

000088ea <cmd_log_self_go>:
{
    88ea:	b510      	push	{r4, lr}
    88ec:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    88ee:	f7f9 fab1 	bl	1e54 <shell_state_precheck>
    88f2:	b120      	cbz	r0, 88fe <cmd_log_self_go+0x14>
	backend->cb->active = true;
    88f4:	2201      	movs	r2, #1
	return log_go(shell, shell->log_backend->backend, argc, argv);
    88f6:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    88f8:	681b      	ldr	r3, [r3, #0]
    88fa:	685b      	ldr	r3, [r3, #4]
    88fc:	715a      	strb	r2, [r3, #5]
}
    88fe:	2000      	movs	r0, #0
    8900:	bd10      	pop	{r4, pc}

00008902 <cmd_log_self_status>:
{
    8902:	b570      	push	{r4, r5, r6, lr}
    8904:	4604      	mov	r4, r0
    8906:	460d      	mov	r5, r1
    8908:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    890a:	f7f9 faa3 	bl	1e54 <shell_state_precheck>
    890e:	b130      	cbz	r0, 891e <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
    8910:	69e1      	ldr	r1, [r4, #28]
    8912:	4633      	mov	r3, r6
    8914:	462a      	mov	r2, r5
    8916:	4620      	mov	r0, r4
    8918:	6809      	ldr	r1, [r1, #0]
    891a:	f7f9 f9d9 	bl	1cd0 <log_status>
}
    891e:	2000      	movs	r0, #0
    8920:	bd70      	pop	{r4, r5, r6, pc}

00008922 <cmd_log_self_enable>:
{
    8922:	b570      	push	{r4, r5, r6, lr}
    8924:	4604      	mov	r4, r0
    8926:	460d      	mov	r5, r1
    8928:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    892a:	f7f9 fa93 	bl	1e54 <shell_state_precheck>
    892e:	b140      	cbz	r0, 8942 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    8930:	69e1      	ldr	r1, [r4, #28]
    8932:	4633      	mov	r3, r6
    8934:	462a      	mov	r2, r5
    8936:	4620      	mov	r0, r4
}
    8938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    893c:	6809      	ldr	r1, [r1, #0]
    893e:	f7f9 bb01 	b.w	1f44 <log_enable>
}
    8942:	bd70      	pop	{r4, r5, r6, pc}

00008944 <log_disable>:
{
    8944:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    8946:	2400      	movs	r4, #0
    8948:	3304      	adds	r3, #4
    894a:	9400      	str	r4, [sp, #0]
    894c:	3a01      	subs	r2, #1
    894e:	f7f9 fa91 	bl	1e74 <filters_set>
}
    8952:	4620      	mov	r0, r4
    8954:	b002      	add	sp, #8
    8956:	bd10      	pop	{r4, pc}

00008958 <cmd_log_self_disable>:
{
    8958:	b570      	push	{r4, r5, r6, lr}
    895a:	4604      	mov	r4, r0
    895c:	460d      	mov	r5, r1
    895e:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    8960:	f7f9 fa78 	bl	1e54 <shell_state_precheck>
    8964:	b140      	cbz	r0, 8978 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    8966:	69e1      	ldr	r1, [r4, #28]
    8968:	4633      	mov	r3, r6
    896a:	462a      	mov	r2, r5
    896c:	4620      	mov	r0, r4
}
    896e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    8972:	6809      	ldr	r1, [r1, #0]
    8974:	f7ff bfe6 	b.w	8944 <log_disable>
}
    8978:	bd70      	pop	{r4, r5, r6, pc}

0000897a <cmd_date_get>:

static int cmd_date_get(const struct shell *shell, size_t argc, char **argv)
{
    897a:	b510      	push	{r4, lr}
    897c:	4604      	mov	r4, r0
    897e:	b08e      	sub	sp, #56	; 0x38
    8980:	2001      	movs	r0, #1
    8982:	4669      	mov	r1, sp
    8984:	f7fd f81e 	bl	59c4 <z_impl_clock_gettime>
	struct timespec tp;
	struct tm tm;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
    8988:	a905      	add	r1, sp, #20
    898a:	4668      	mov	r0, sp
    898c:	f7fc ff38 	bl	5800 <gmtime_r>

	date_print(shell, &tm);
    8990:	4620      	mov	r0, r4
    8992:	a905      	add	r1, sp, #20
    8994:	f7f9 fcb0 	bl	22f8 <date_print>

	return 0;
}
    8998:	2000      	movs	r0, #0
    899a:	b00e      	add	sp, #56	; 0x38
    899c:	bd10      	pop	{r4, pc}

0000899e <shell_signal_handle>:
{
    899e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    89a0:	6885      	ldr	r5, [r0, #8]
    89a2:	0109      	lsls	r1, r1, #4
    89a4:	f501 7117 	add.w	r1, r1, #604	; 0x25c
{
    89a8:	4604      	mov	r4, r0
    89aa:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    89ac:	440d      	add	r5, r1
		arch_syscall_invoke3(*(uintptr_t *)&signal, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(signal, signaled, result);
    89ae:	4669      	mov	r1, sp
    89b0:	4628      	mov	r0, r5
    89b2:	aa01      	add	r2, sp, #4
    89b4:	f001 fe93 	bl	a6de <z_impl_k_poll_signal_check>
	if (set) {
    89b8:	9b00      	ldr	r3, [sp, #0]
    89ba:	b11b      	cbz	r3, 89c4 <shell_signal_handle+0x26>
	signal->signaled = 0U;
    89bc:	2300      	movs	r3, #0
		handler(shell);
    89be:	4620      	mov	r0, r4
    89c0:	60ab      	str	r3, [r5, #8]
    89c2:	47b0      	blx	r6
}
    89c4:	b002      	add	sp, #8
    89c6:	bd70      	pop	{r4, r5, r6, pc}

000089c8 <kill_handler>:
{
    89c8:	b538      	push	{r3, r4, r5, lr}
	if (flag_processing_get(shell)) {
    89ca:	6883      	ldr	r3, [r0, #8]
{
    89cc:	4604      	mov	r4, r0
	return shell->ctx->internal.flags.processing == 1 ? true : false;
    89ce:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
	if (flag_processing_get(shell)) {
    89d2:	071b      	lsls	r3, r3, #28
    89d4:	d40d      	bmi.n	89f2 <kill_handler+0x2a>
		shell_log_backend_disable(shell->log_backend);
    89d6:	69c0      	ldr	r0, [r0, #28]
    89d8:	f000 fe75 	bl	96c6 <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
    89dc:	6860      	ldr	r0, [r4, #4]
    89de:	6803      	ldr	r3, [r0, #0]
    89e0:	685b      	ldr	r3, [r3, #4]
    89e2:	4798      	blx	r3
	if (err != 0) {
    89e4:	4605      	mov	r5, r0
    89e6:	b920      	cbnz	r0, 89f2 <kill_handler+0x2a>
	shell_history_purge(shell->history);
    89e8:	68e0      	ldr	r0, [r4, #12]
    89ea:	f000 fd2b 	bl	9444 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
    89ee:	68a3      	ldr	r3, [r4, #8]
    89f0:	711d      	strb	r5, [r3, #4]
	return z_impl_k_current_get();
    89f2:	f7fe fb37 	bl	7064 <z_impl_k_current_get>
}
    89f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    89fa:	f7fc b80b 	b.w	4a14 <z_impl_k_thread_abort>

000089fe <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    89fe:	f7fd bf9d 	b.w	693c <z_impl_k_mutex_unlock>

00008a02 <shell_strlen>:
{
    8a02:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
    8a04:	b110      	cbz	r0, 8a0c <shell_strlen+0xa>
    8a06:	f001 f8d0 	bl	9baa <strlen>
    8a0a:	b280      	uxth	r0, r0
}
    8a0c:	bd08      	pop	{r3, pc}

00008a0e <shell_raw_fprintf>:
{
    8a0e:	b40e      	push	{r1, r2, r3}
    8a10:	b503      	push	{r0, r1, lr}
    8a12:	aa03      	add	r2, sp, #12
    8a14:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    8a18:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    8a1a:	f7fa fc1f 	bl	325c <shell_fprintf_fmt>
}
    8a1e:	b002      	add	sp, #8
    8a20:	f85d eb04 	ldr.w	lr, [sp], #4
    8a24:	b003      	add	sp, #12
    8a26:	4770      	bx	lr

00008a28 <shell_internal_help_print>:
{
    8a28:	b510      	push	{r4, lr}
    8a2a:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
    8a2c:	f7fa ff5c 	bl	38e8 <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
    8a30:	4620      	mov	r0, r4
}
    8a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
    8a36:	f7fa bef9 	b.w	382c <shell_help_subcmd_print>

00008a3a <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
    8a3a:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    8a3c:	b920      	cbnz	r0, 8a48 <transport_evt_handler+0xe>
    8a3e:	f503 7017 	add.w	r0, r3, #604	; 0x25c
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    8a42:	2100      	movs	r1, #0
    8a44:	f7fe bebc 	b.w	77c0 <z_impl_k_poll_signal_raise>
    8a48:	f503 7023 	add.w	r0, r3, #652	; 0x28c
    8a4c:	e7f9      	b.n	8a42 <transport_evt_handler+0x8>

00008a4e <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    8a4e:	f7fd befd 	b.w	684c <z_impl_k_mutex_lock>

00008a52 <shell_log_process>:
	int signaled = 0;
    8a52:	2300      	movs	r3, #0
{
    8a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8a56:	4604      	mov	r4, r0
	int signaled = 0;
    8a58:	9300      	str	r3, [sp, #0]
			shell_cmd_line_erase(shell);
    8a5a:	4620      	mov	r0, r4
    8a5c:	f000 fb2c 	bl	90b8 <shell_cmd_line_erase>
			processed = shell_log_backend_process(shell->log_backend);
    8a60:	69e0      	ldr	r0, [r4, #28]
    8a62:	f000 fe40 	bl	96e6 <shell_log_backend_process>
    8a66:	4605      	mov	r5, r0
		shell_print_prompt_and_cmd(shell);
    8a68:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
    8a6a:	68a6      	ldr	r6, [r4, #8]
		shell_print_prompt_and_cmd(shell);
    8a6c:	f7fa fd98 	bl	35a0 <shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
    8a70:	68a3      	ldr	r3, [r4, #8]
		struct k_poll_signal *signal =
    8a72:	f506 7617 	add.w	r6, r6, #604	; 0x25c
		if (shell->ctx->cmd_buff_len) {
    8a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8a78:	b123      	cbz	r3, 8a84 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
    8a7a:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    8a7e:	2100      	movs	r1, #0
    8a80:	f7fe fad0 	bl	7024 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(signal, signaled, result);
    8a84:	4669      	mov	r1, sp
    8a86:	4630      	mov	r0, r6
    8a88:	aa01      	add	r2, sp, #4
    8a8a:	f001 fe28 	bl	a6de <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
    8a8e:	b115      	cbz	r5, 8a96 <shell_log_process+0x44>
    8a90:	9b00      	ldr	r3, [sp, #0]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d0e1      	beq.n	8a5a <shell_log_process+0x8>
}
    8a96:	b002      	add	sp, #8
    8a98:	bd70      	pop	{r4, r5, r6, pc}

00008a9a <shell_vfprintf>:
{
    8a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a9c:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8a9e:	6880      	ldr	r0, [r0, #8]
{
    8aa0:	4616      	mov	r6, r2
    8aa2:	461f      	mov	r7, r3
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8aac:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
{
    8ab0:	460d      	mov	r5, r1
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8ab2:	f7ff ffcc 	bl	8a4e <k_mutex_lock.constprop.0>
	if (!flag_cmd_ctx_get(shell)) {
    8ab6:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
    8ab8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8abc:	061a      	lsls	r2, r3, #24
    8abe:	d402      	bmi.n	8ac6 <shell_vfprintf+0x2c>
		shell_cmd_line_erase(shell);
    8ac0:	4620      	mov	r0, r4
    8ac2:	f000 faf9 	bl	90b8 <shell_cmd_line_erase>
	shell_internal_vfprintf(shell, color, fmt, args);
    8ac6:	463b      	mov	r3, r7
    8ac8:	4632      	mov	r2, r6
    8aca:	4629      	mov	r1, r5
    8acc:	4620      	mov	r0, r4
    8ace:	f000 fb44 	bl	915a <shell_internal_vfprintf>
	if (!flag_cmd_ctx_get(shell)) {
    8ad2:	68a3      	ldr	r3, [r4, #8]
    8ad4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8ad8:	061b      	lsls	r3, r3, #24
    8ada:	d402      	bmi.n	8ae2 <shell_vfprintf+0x48>
		shell_print_prompt_and_cmd(shell);
    8adc:	4620      	mov	r0, r4
    8ade:	f7fa fd5f 	bl	35a0 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    8ae2:	6960      	ldr	r0, [r4, #20]
    8ae4:	f000 f829 	bl	8b3a <shell_fprintf_buffer_flush>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    8ae8:	68a0      	ldr	r0, [r4, #8]
}
    8aea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
    8aee:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    8af2:	f7ff bf84 	b.w	89fe <k_mutex_unlock>

00008af6 <shell_fprintf>:
{
    8af6:	b40c      	push	{r2, r3}
    8af8:	b507      	push	{r0, r1, r2, lr}
    8afa:	ab04      	add	r3, sp, #16
    8afc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    8b00:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    8b02:	f7ff ffca 	bl	8a9a <shell_vfprintf>
}
    8b06:	b003      	add	sp, #12
    8b08:	f85d eb04 	ldr.w	lr, [sp], #4
    8b0c:	b002      	add	sp, #8
    8b0e:	4770      	bx	lr

00008b10 <shell_help>:

	return 0;
}

void shell_help(const struct shell *shell)
{
    8b10:	b510      	push	{r4, lr}
    8b12:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    8b14:	6880      	ldr	r0, [r0, #8]
    8b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b1e:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    8b22:	f7ff ff94 	bl	8a4e <k_mutex_lock.constprop.0>
	shell_internal_help_print(shell);
    8b26:	4620      	mov	r0, r4
    8b28:	f7ff ff7e 	bl	8a28 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    8b2c:	68a0      	ldr	r0, [r4, #8]
}
    8b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
    8b32:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    8b36:	f7ff bf62 	b.w	89fe <k_mutex_unlock>

00008b3a <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    8b3a:	6902      	ldr	r2, [r0, #16]
{
    8b3c:	b510      	push	{r4, lr}
    8b3e:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    8b40:	6883      	ldr	r3, [r0, #8]
    8b42:	6812      	ldr	r2, [r2, #0]
    8b44:	6801      	ldr	r1, [r0, #0]
    8b46:	68c0      	ldr	r0, [r0, #12]
    8b48:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    8b4a:	2200      	movs	r2, #0
    8b4c:	6923      	ldr	r3, [r4, #16]
    8b4e:	601a      	str	r2, [r3, #0]
}
    8b50:	bd10      	pop	{r4, pc}

00008b52 <out_func>:
{
    8b52:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    8b54:	68cb      	ldr	r3, [r1, #12]
{
    8b56:	4605      	mov	r5, r0
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    8b58:	7c1b      	ldrb	r3, [r3, #16]
{
    8b5a:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    8b5c:	2b02      	cmp	r3, #2
    8b5e:	d104      	bne.n	8b6a <out_func+0x18>
    8b60:	280a      	cmp	r0, #10
    8b62:	d102      	bne.n	8b6a <out_func+0x18>
		(void)out_func('\r', ctx);
    8b64:	200d      	movs	r0, #13
    8b66:	f7ff fff4 	bl	8b52 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
    8b6a:	6923      	ldr	r3, [r4, #16]
    8b6c:	6822      	ldr	r2, [r4, #0]
    8b6e:	681b      	ldr	r3, [r3, #0]
    8b70:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    8b72:	6922      	ldr	r2, [r4, #16]
    8b74:	6813      	ldr	r3, [r2, #0]
    8b76:	3301      	adds	r3, #1
    8b78:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    8b7a:	6862      	ldr	r2, [r4, #4]
    8b7c:	4293      	cmp	r3, r2
    8b7e:	d102      	bne.n	8b86 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
    8b80:	4620      	mov	r0, r4
    8b82:	f7ff ffda 	bl	8b3a <shell_fprintf_buffer_flush>
}
    8b86:	2000      	movs	r0, #0
    8b88:	bd38      	pop	{r3, r4, r5, pc}

00008b8a <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    8b8a:	2820      	cmp	r0, #32
    8b8c:	d005      	beq.n	8b9a <isspace+0x10>
    8b8e:	3809      	subs	r0, #9
    8b90:	2804      	cmp	r0, #4
    8b92:	bf8c      	ite	hi
    8b94:	2000      	movhi	r0, #0
    8b96:	2001      	movls	r0, #1
    8b98:	4770      	bx	lr
    8b9a:	2001      	movs	r0, #1
}
    8b9c:	4770      	bx	lr

00008b9e <shell_strlen>:
{
    8b9e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
    8ba0:	b110      	cbz	r0, 8ba8 <shell_strlen+0xa>
    8ba2:	f001 f802 	bl	9baa <strlen>
    8ba6:	b280      	uxth	r0, r0
}
    8ba8:	bd08      	pop	{r3, pc}

00008baa <column_span_with_buffer_offsets_get>:
{
    8baa:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    8bac:	7b04      	ldrb	r4, [r0, #12]
    8bae:	8943      	ldrh	r3, [r0, #10]
    8bb0:	4422      	add	r2, r4
    8bb2:	4421      	add	r1, r4
    8bb4:	fbb2 f0f3 	udiv	r0, r2, r3
    8bb8:	fbb1 f4f3 	udiv	r4, r1, r3
    8bbc:	fb03 2010 	mls	r0, r3, r0, r2
    8bc0:	fb03 1114 	mls	r1, r3, r4, r1
}
    8bc4:	1a40      	subs	r0, r0, r1
    8bc6:	bd10      	pop	{r4, pc}

00008bc8 <row_span_with_buffer_offsets_get>:
{
    8bc8:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    8bca:	7b04      	ldrb	r4, [r0, #12]
    8bcc:	8943      	ldrh	r3, [r0, #10]
    8bce:	4421      	add	r1, r4
    8bd0:	1910      	adds	r0, r2, r4
    8bd2:	fbb0 f0f3 	udiv	r0, r0, r3
    8bd6:	fbb1 f1f3 	udiv	r1, r1, r3
}
    8bda:	1a40      	subs	r0, r0, r1
    8bdc:	bd10      	pop	{r4, pc}

00008bde <shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    8bde:	7b03      	ldrb	r3, [r0, #12]
{
    8be0:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    8be2:	8944      	ldrh	r4, [r0, #10]
    8be4:	4419      	add	r1, r3
    8be6:	fbb1 f5f4 	udiv	r5, r1, r4
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    8bea:	441a      	add	r2, r3
    8bec:	fbb2 f3f4 	udiv	r3, r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    8bf0:	fb04 1115 	mls	r1, r4, r5, r1
    8bf4:	3101      	adds	r1, #1
    8bf6:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    8bf8:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    8bfa:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    8bfe:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    8c00:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    8c02:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    8c04:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    8c06:	8043      	strh	r3, [r0, #2]
}
    8c08:	bd30      	pop	{r4, r5, pc}

00008c0a <shell_make_argv>:
{
    8c0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    8c0e:	2500      	movs	r5, #0
{
    8c10:	4606      	mov	r6, r0
    8c12:	460f      	mov	r7, r1
    8c14:	4614      	mov	r4, r2
    8c16:	4698      	mov	r8, r3
	*argc = 0;
    8c18:	6005      	str	r5, [r0, #0]
		c = *cmd;
    8c1a:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    8c1c:	2800      	cmp	r0, #0
    8c1e:	f000 80b5 	beq.w	8d8c <shell_make_argv+0x182>
		if (isspace((int) c)) {
    8c22:	f7ff ffb2 	bl	8b8a <isspace>
    8c26:	b118      	cbz	r0, 8c30 <shell_make_argv+0x26>
			*cmd++ = '\0';
    8c28:	2300      	movs	r3, #0
    8c2a:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
    8c2e:	e7f4      	b.n	8c1a <shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
    8c30:	6832      	ldr	r2, [r6, #0]
    8c32:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
    8c34:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
    8c36:	6033      	str	r3, [r6, #0]
    8c38:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
    8c3c:	f000 80a6 	beq.w	8d8c <shell_make_argv+0x182>
	char quote = 0;
    8c40:	4605      	mov	r5, r0
		c = *cmd;
    8c42:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    8c46:	f1b9 0f00 	cmp.w	r9, #0
    8c4a:	d0e6      	beq.n	8c1a <shell_make_argv+0x10>
		if (!quote) {
    8c4c:	2d00      	cmp	r5, #0
    8c4e:	f040 8089 	bne.w	8d64 <shell_make_argv+0x15a>
			switch (c) {
    8c52:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    8c56:	d006      	beq.n	8c66 <shell_make_argv+0x5c>
    8c58:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    8c5c:	f000 808a 	beq.w	8d74 <shell_make_argv+0x16a>
    8c60:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    8c64:	d176      	bne.n	8d54 <shell_make_argv+0x14a>
						shell_strlen(cmd));
    8c66:	4620      	mov	r0, r4
    8c68:	f7ff ff99 	bl	8b9e <shell_strlen>
				memmove(cmd, cmd + 1,
    8c6c:	1c61      	adds	r1, r4, #1
						shell_strlen(cmd));
    8c6e:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    8c70:	4620      	mov	r0, r4
    8c72:	f000 ffcc 	bl	9c0e <memmove>
				continue;
    8c76:	464d      	mov	r5, r9
    8c78:	e7e3      	b.n	8c42 <shell_make_argv+0x38>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
    8c7a:	4620      	mov	r0, r4
    8c7c:	f7ff ff8f 	bl	8b9e <shell_strlen>
    8c80:	1c61      	adds	r1, r4, #1
    8c82:	4602      	mov	r2, r0
    8c84:	4620      	mov	r0, r4
    8c86:	f000 ffc2 	bl	9c0e <memmove>
			quote = 0;
    8c8a:	2500      	movs	r5, #0
			continue;
    8c8c:	e7d9      	b.n	8c42 <shell_make_argv+0x38>
			if (t == '0') {
    8c8e:	2930      	cmp	r1, #48	; 0x30
    8c90:	d125      	bne.n	8cde <shell_make_argv+0xd4>
    8c92:	2302      	movs	r3, #2
				u8_t v = 0U;
    8c94:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    8c98:	5ce1      	ldrb	r1, [r4, r3]
    8c9a:	fa5f f983 	uxtb.w	r9, r3
					if (t >= '0' && t <= '7') {
    8c9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    8ca2:	b2d0      	uxtb	r0, r2
    8ca4:	2807      	cmp	r0, #7
    8ca6:	d817      	bhi.n	8cd8 <shell_make_argv+0xce>
						v = (v << 3) | (t - '0');
    8ca8:	3301      	adds	r3, #1
    8caa:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    8cae:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    8cb0:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    8cb4:	d1f0      	bne.n	8c98 <shell_make_argv+0x8e>
    8cb6:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
    8cb8:	4620      	mov	r0, r4
    8cba:	f7ff ff70 	bl	8b9e <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    8cbe:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    8cc2:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
    8cc4:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    8cc6:	4659      	mov	r1, fp
    8cc8:	4620      	mov	r0, r4
    8cca:	eba2 0209 	sub.w	r2, r2, r9
    8cce:	f000 ff9e 	bl	9c0e <memmove>
					*cmd++ = v;
    8cd2:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    8cd6:	e7b4      	b.n	8c42 <shell_make_argv+0x38>
				if (i > 2) {
    8cd8:	f1b9 0f02 	cmp.w	r9, #2
    8cdc:	d1ec      	bne.n	8cb8 <shell_make_argv+0xae>
			if (t == 'x') {
    8cde:	2978      	cmp	r1, #120	; 0x78
    8ce0:	d13e      	bne.n	8d60 <shell_make_argv+0x156>
    8ce2:	2302      	movs	r3, #2
				u8_t v = 0U;
    8ce4:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    8ce8:	5ce2      	ldrb	r2, [r4, r3]
    8cea:	b2d8      	uxtb	r0, r3
					if (t >= '0' && t <= '9') {
    8cec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    8cf0:	fa5f fc81 	uxtb.w	ip, r1
    8cf4:	f1bc 0f09 	cmp.w	ip, #9
    8cf8:	d819      	bhi.n	8d2e <shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
    8cfa:	ea41 1209 	orr.w	r2, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    8cfe:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
    8d00:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
    8d04:	d111      	bne.n	8d2a <shell_make_argv+0x120>
    8d06:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
    8d0a:	4620      	mov	r0, r4
    8d0c:	f7ff ff47 	bl	8b9e <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    8d10:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
    8d14:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
    8d16:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
    8d18:	4651      	mov	r1, sl
    8d1a:	4620      	mov	r0, r4
    8d1c:	eba2 020b 	sub.w	r2, r2, fp
    8d20:	f000 ff75 	bl	9c0e <memmove>
					*cmd++ = v;
    8d24:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    8d28:	e78b      	b.n	8c42 <shell_make_argv+0x38>
    8d2a:	2303      	movs	r3, #3
    8d2c:	e7dc      	b.n	8ce8 <shell_make_argv+0xde>
					} else if ((t >= 'a') &&
    8d2e:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    8d32:	2905      	cmp	r1, #5
    8d34:	d803      	bhi.n	8d3e <shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
    8d36:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    8d38:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
    8d3c:	e7df      	b.n	8cfe <shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
    8d3e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
    8d42:	2905      	cmp	r1, #5
    8d44:	d801      	bhi.n	8d4a <shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
    8d46:	3a37      	subs	r2, #55	; 0x37
    8d48:	e7f6      	b.n	8d38 <shell_make_argv+0x12e>
				if (i > 2) {
    8d4a:	2802      	cmp	r0, #2
    8d4c:	d008      	beq.n	8d60 <shell_make_argv+0x156>
    8d4e:	f04f 0b03 	mov.w	fp, #3
    8d52:	e7da      	b.n	8d0a <shell_make_argv+0x100>
		if (!quote && isspace((int) c)) {
    8d54:	4648      	mov	r0, r9
    8d56:	f7ff ff18 	bl	8b8a <isspace>
    8d5a:	2800      	cmp	r0, #0
    8d5c:	f47f af5d 	bne.w	8c1a <shell_make_argv+0x10>
		cmd += 1;
    8d60:	3401      	adds	r4, #1
    8d62:	e76e      	b.n	8c42 <shell_make_argv+0x38>
		if (quote == c) {
    8d64:	45a9      	cmp	r9, r5
    8d66:	d088      	beq.n	8c7a <shell_make_argv+0x70>
		if (quote && c == '\\') {
    8d68:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    8d6c:	d1f8      	bne.n	8d60 <shell_make_argv+0x156>
    8d6e:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    8d70:	428d      	cmp	r5, r1
    8d72:	d18c      	bne.n	8c8e <shell_make_argv+0x84>
						shell_strlen(cmd));
    8d74:	4620      	mov	r0, r4
    8d76:	f7ff ff12 	bl	8b9e <shell_strlen>
				memmove(cmd, cmd + 1,
    8d7a:	f104 0901 	add.w	r9, r4, #1
						shell_strlen(cmd));
    8d7e:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    8d80:	4649      	mov	r1, r9
    8d82:	4620      	mov	r0, r4
    8d84:	f000 ff43 	bl	9c0e <memmove>
				cmd += 1;
    8d88:	464c      	mov	r4, r9
				continue;
    8d8a:	e75a      	b.n	8c42 <shell_make_argv+0x38>
	argv[*argc] = 0;
    8d8c:	2200      	movs	r2, #0
    8d8e:	6833      	ldr	r3, [r6, #0]
}
    8d90:	4628      	mov	r0, r5
	argv[*argc] = 0;
    8d92:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
}
    8d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008d9a <shell_pattern_remove>:
{
    8d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d9c:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    8d9e:	4611      	mov	r1, r2
{
    8da0:	4615      	mov	r5, r2
    8da2:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    8da4:	f000 feb6 	bl	9b14 <strstr>
    8da8:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
    8daa:	4628      	mov	r0, r5
    8dac:	f7ff fef7 	bl	8b9e <shell_strlen>
    8db0:	4605      	mov	r5, r0
	if (!pattern_addr) {
    8db2:	b1c4      	cbz	r4, 8de6 <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    8db4:	42a7      	cmp	r7, r4
    8db6:	d207      	bcs.n	8dc8 <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    8db8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    8dbc:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    8dbe:	bf02      	ittt	eq
    8dc0:	3501      	addeq	r5, #1
    8dc2:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    8dc4:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    8dc8:	4620      	mov	r0, r4
    8dca:	f7ff fee8 	bl	8b9e <shell_strlen>
	*buff_len -= pattern_len;
    8dce:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    8dd0:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
    8dd2:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    8dd4:	3201      	adds	r2, #1
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    8dd6:	4620      	mov	r0, r4
	*buff_len -= pattern_len;
    8dd8:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    8dda:	1961      	adds	r1, r4, r5
    8ddc:	b292      	uxth	r2, r2
}
    8dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    8de2:	f000 bf14 	b.w	9c0e <memmove>
}
    8de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008de8 <shell_find_cmd>:
 */
const struct shell_static_entry *shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
    8de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dec:	4605      	mov	r5, r0
    8dee:	4688      	mov	r8, r1
    8df0:	4617      	mov	r7, r2
	const struct shell_static_entry *entry;
	size_t idx = 0;
    8df2:	2600      	movs	r6, #0

	while ((entry = shell_cmd_get(parent, idx++, dloc)) != NULL) {
    8df4:	4631      	mov	r1, r6
    8df6:	463a      	mov	r2, r7
    8df8:	4628      	mov	r0, r5
    8dfa:	f7fa fa43 	bl	3284 <shell_cmd_get>
    8dfe:	3601      	adds	r6, #1
    8e00:	4604      	mov	r4, r0
    8e02:	b128      	cbz	r0, 8e10 <shell_find_cmd+0x28>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    8e04:	4640      	mov	r0, r8
    8e06:	6821      	ldr	r1, [r4, #0]
    8e08:	f000 fed6 	bl	9bb8 <strcmp>
    8e0c:	2800      	cmp	r0, #0
    8e0e:	d1f1      	bne.n	8df4 <shell_find_cmd+0xc>
			return entry;
		}
	};

	return NULL;
}
    8e10:	4620      	mov	r0, r4
    8e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008e16 <shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
    8e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e1a:	461c      	mov	r4, r3
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
    8e1c:	2300      	movs	r3, #0
{
    8e1e:	460f      	mov	r7, r1
    8e20:	4616      	mov	r6, r2
    8e22:	f8dd 8020 	ldr.w	r8, [sp, #32]
    8e26:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = SHELL_CMD_ROOT_LVL;
    8e2a:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
    8e2c:	6823      	ldr	r3, [r4, #0]

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (shell_wildcard_character_exist(argv[*match_arg])) {
				(*match_arg)++;
				continue;
    8e2e:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    8e30:	42bb      	cmp	r3, r7
    8e32:	d21b      	bcs.n	8e6c <shell_get_last_command+0x56>
			if (shell_wildcard_character_exist(argv[*match_arg])) {
    8e34:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    8e38:	f000 fcbd 	bl	97b6 <shell_wildcard_character_exist>
    8e3c:	6823      	ldr	r3, [r4, #0]
    8e3e:	4682      	mov	sl, r0
    8e40:	b118      	cbz	r0, 8e4a <shell_get_last_command+0x34>
				(*match_arg)++;
    8e42:	3301      	adds	r3, #1
				continue;
    8e44:	4628      	mov	r0, r5
				(*match_arg)++;
    8e46:	6023      	str	r3, [r4, #0]
				continue;
    8e48:	e7f0      	b.n	8e2c <shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = shell_find_cmd(entry, argv[*match_arg], dloc);
    8e4a:	4642      	mov	r2, r8
    8e4c:	4628      	mov	r0, r5
    8e4e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    8e52:	f7ff ffc9 	bl	8de8 <shell_find_cmd>
		if (entry) {
    8e56:	b148      	cbz	r0, 8e6c <shell_get_last_command+0x56>
			(*match_arg)++;
    8e58:	6823      	ldr	r3, [r4, #0]
    8e5a:	1c5a      	adds	r2, r3, #1
    8e5c:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
    8e5e:	f1b9 0f00 	cmp.w	r9, #0
    8e62:	d0e3      	beq.n	8e2c <shell_get_last_command+0x16>
    8e64:	4580      	cmp	r8, r0
    8e66:	d1e1      	bne.n	8e2c <shell_get_last_command+0x16>
			(*match_arg)--;
			return NULL;
    8e68:	4655      	mov	r5, sl
			(*match_arg)--;
    8e6a:	6023      	str	r3, [r4, #0]
		}
	}

	return entry;
}
    8e6c:	4628      	mov	r0, r5
    8e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008e72 <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
    8e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e76:	4606      	mov	r6, r0
	u16_t len = shell_strlen(str);
    8e78:	f7ff fe91 	bl	8b9e <shell_strlen>
    8e7c:	4605      	mov	r5, r0
	u16_t shift = 0U;

	if (!str) {
    8e7e:	bb56      	cbnz	r6, 8ed6 <shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
    8e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
    8e84:	b14c      	cbz	r4, 8e9a <shell_spaces_trim+0x28>
						len - j + 1);
    8e86:	1c6a      	adds	r2, r5, #1
    8e88:	b29b      	uxth	r3, r3
					memmove(&str[i + 1],
    8e8a:	3701      	adds	r7, #1
    8e8c:	1ad2      	subs	r2, r2, r3
    8e8e:	19f0      	adds	r0, r6, r7
					len -= shift;
    8e90:	1b2d      	subs	r5, r5, r4
					memmove(&str[i + 1],
    8e92:	f000 febc 	bl	9c0e <memmove>
					shift = 0U;
    8e96:	464c      	mov	r4, r9
					len -= shift;
    8e98:	b2ad      	uxth	r5, r5
	for (u16_t i = 0; i < len - 1; i++) {
    8e9a:	f108 0801 	add.w	r8, r8, #1
    8e9e:	fa1f f388 	uxth.w	r3, r8
    8ea2:	1e6a      	subs	r2, r5, #1
    8ea4:	4293      	cmp	r3, r2
    8ea6:	461f      	mov	r7, r3
    8ea8:	daea      	bge.n	8e80 <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    8eaa:	5df0      	ldrb	r0, [r6, r7]
    8eac:	f7ff fe6d 	bl	8b8a <isspace>
    8eb0:	2800      	cmp	r0, #0
    8eb2:	d0f2      	beq.n	8e9a <shell_spaces_trim+0x28>
			for (u16_t j = i + 1; j < len; j++) {
    8eb4:	3301      	adds	r3, #1
    8eb6:	b29b      	uxth	r3, r3
    8eb8:	b29a      	uxth	r2, r3
    8eba:	4295      	cmp	r5, r2
    8ebc:	d9ed      	bls.n	8e9a <shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
    8ebe:	5cf0      	ldrb	r0, [r6, r3]
    8ec0:	18f1      	adds	r1, r6, r3
    8ec2:	f7ff fe62 	bl	8b8a <isspace>
    8ec6:	4681      	mov	r9, r0
    8ec8:	1c5a      	adds	r2, r3, #1
    8eca:	2800      	cmp	r0, #0
    8ecc:	d0da      	beq.n	8e84 <shell_spaces_trim+0x12>
					shift++;
    8ece:	3401      	adds	r4, #1
    8ed0:	4613      	mov	r3, r2
    8ed2:	b2a4      	uxth	r4, r4
			for (u16_t j = i + 1; j < len; j++) {
    8ed4:	e7f0      	b.n	8eb8 <shell_spaces_trim+0x46>
    8ed6:	f04f 0800 	mov.w	r8, #0
	u16_t shift = 0U;
    8eda:	4644      	mov	r4, r8
    8edc:	e7df      	b.n	8e9e <shell_spaces_trim+0x2c>

00008ede <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
    8ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    8ee0:	6884      	ldr	r4, [r0, #8]
{
    8ee2:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    8ee4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    8ee8:	b953      	cbnz	r3, 8f00 <shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    8eea:	68ab      	ldr	r3, [r5, #8]
    8eec:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    8eee:	869a      	strh	r2, [r3, #52]	; 0x34
}
    8ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    8ef2:	3a01      	subs	r2, #1
    8ef4:	b292      	uxth	r2, r2
    8ef6:	8662      	strh	r2, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
    8ef8:	b922      	cbnz	r2, 8f04 <shell_cmd_trim+0x26>
			buff[0] = '\0';
    8efa:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			return;
    8efe:	e7f4      	b.n	8eea <shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    8f00:	f104 0638 	add.w	r6, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
    8f04:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    8f06:	18b3      	adds	r3, r6, r2
    8f08:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    8f0c:	f7ff fe3d 	bl	8b8a <isspace>
    8f10:	4603      	mov	r3, r0
    8f12:	2800      	cmp	r0, #0
    8f14:	d1ed      	bne.n	8ef2 <shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    8f16:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
    8f18:	b29f      	uxth	r7, r3
    8f1a:	5df0      	ldrb	r0, [r6, r7]
    8f1c:	fa16 f183 	uxtah	r1, r6, r3
    8f20:	f7ff fe33 	bl	8b8a <isspace>
    8f24:	3301      	adds	r3, #1
    8f26:	2800      	cmp	r0, #0
    8f28:	d1f6      	bne.n	8f18 <shell_cmd_trim+0x3a>
	if (--i > 0) {
    8f2a:	2f00      	cmp	r7, #0
    8f2c:	d0dd      	beq.n	8eea <shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    8f2e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8f30:	4630      	mov	r0, r6
    8f32:	3301      	adds	r3, #1
    8f34:	1bda      	subs	r2, r3, r7
    8f36:	f000 fe6a 	bl	9c0e <memmove>
		*buff_len = *buff_len - i;
    8f3a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8f3c:	1bdb      	subs	r3, r3, r7
    8f3e:	8663      	strh	r3, [r4, #50]	; 0x32
    8f40:	e7d3      	b.n	8eea <shell_cmd_trim+0xc>

00008f42 <shell_raw_fprintf>:
{
    8f42:	b40e      	push	{r1, r2, r3}
    8f44:	b503      	push	{r0, r1, lr}
    8f46:	aa03      	add	r2, sp, #12
    8f48:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    8f4c:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    8f4e:	f7fa f985 	bl	325c <shell_fprintf_fmt>
}
    8f52:	b002      	add	sp, #8
    8f54:	f85d eb04 	ldr.w	lr, [sp], #4
    8f58:	b003      	add	sp, #12
    8f5a:	4770      	bx	lr

00008f5c <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    8f5c:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
    8f5e:	b538      	push	{r3, r4, r5, lr}
    8f60:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    8f62:	6810      	ldr	r0, [r2, #0]
    8f64:	8e55      	ldrh	r5, [r2, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
    8f66:	b110      	cbz	r0, 8f6e <full_line_cmd.isra.0+0x12>
    8f68:	f000 fe1f 	bl	9baa <strlen>
    8f6c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    8f6e:	6822      	ldr	r2, [r4, #0]
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
    8f70:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    8f72:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    8f74:	fbb3 f0f2 	udiv	r0, r3, r2
    8f78:	fb02 3010 	mls	r0, r2, r0, r3
}
    8f7c:	fab0 f080 	clz	r0, r0
    8f80:	0940      	lsrs	r0, r0, #5
    8f82:	bd38      	pop	{r3, r4, r5, pc}

00008f84 <shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    8f84:	6882      	ldr	r2, [r0, #8]
{
    8f86:	b538      	push	{r3, r4, r5, lr}
    8f88:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    8f8a:	6810      	ldr	r0, [r2, #0]
    8f8c:	8e95      	ldrh	r5, [r2, #52]	; 0x34
    8f8e:	b110      	cbz	r0, 8f96 <shell_cursor_in_empty_line+0x12>
    8f90:	f000 fe0b 	bl	9baa <strlen>
    8f94:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    8f96:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
    8f98:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    8f9a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    8f9c:	fbb3 f0f2 	udiv	r0, r3, r2
    8fa0:	fb02 3010 	mls	r0, r2, r0, r3
}
    8fa4:	fab0 f080 	clz	r0, r0
    8fa8:	0940      	lsrs	r0, r0, #5
    8faa:	bd38      	pop	{r3, r4, r5, pc}

00008fac <shell_op_cursor_move>:
{
    8fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fae:	4604      	mov	r4, r0
    8fb0:	460d      	mov	r5, r1
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    8fb2:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    8fb4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    8fb6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    8fb8:	3020      	adds	r0, #32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    8fba:	440d      	add	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    8fbc:	f7ff fe0f 	bl	8bde <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
    8fc0:	68a0      	ldr	r0, [r4, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    8fc2:	b2ad      	uxth	r5, r5
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
    8fc4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    8fc6:	462a      	mov	r2, r5
    8fc8:	3020      	adds	r0, #32
    8fca:	f7ff fdfd 	bl	8bc8 <row_span_with_buffer_offsets_get>
    8fce:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
    8fd0:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
    8fd2:	462a      	mov	r2, r5
    8fd4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    8fd6:	3020      	adds	r0, #32
    8fd8:	f7ff fde7 	bl	8baa <column_span_with_buffer_offsets_get>
    8fdc:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
    8fde:	4279      	negs	r1, r7
    8fe0:	4620      	mov	r0, r4
    8fe2:	f7fa f97d 	bl	32e0 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
    8fe6:	4631      	mov	r1, r6
    8fe8:	4620      	mov	r0, r4
    8fea:	f7fa f989 	bl	3300 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    8fee:	68a3      	ldr	r3, [r4, #8]
    8ff0:	869d      	strh	r5, [r3, #52]	; 0x34
}
    8ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008ff4 <shell_op_cursor_word_move>:
{
    8ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    8ff8:	1e0c      	subs	r4, r1, #0
{
    8ffa:	4606      	mov	r6, r0
	if (val < 0) {
    8ffc:	da32      	bge.n	9064 <shell_op_cursor_word_move+0x70>
		sign = -1;
    8ffe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		val = -val;
    9002:	4264      	negs	r4, r4
    9004:	b224      	sxth	r4, r4
		sign = -1;
    9006:	b2af      	uxth	r7, r5
    9008:	e022      	b.n	9050 <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
    900a:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
    900c:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    900e:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
    9012:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
    9016:	f103 0838 	add.w	r8, r3, #56	; 0x38
    901a:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    901c:	eba3 010e 	sub.w	r1, r3, lr
    9020:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    9022:	b90b      	cbnz	r3, 9028 <shell_op_cursor_word_move+0x34>
    9024:	1c6a      	adds	r2, r5, #1
    9026:	d010      	beq.n	904a <shell_op_cursor_word_move+0x56>
    9028:	4599      	cmp	r9, r3
    902a:	d101      	bne.n	9030 <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
    902c:	2d01      	cmp	r5, #1
    902e:	d00c      	beq.n	904a <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
    9030:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    9034:	f042 0c20 	orr.w	ip, r2, #32
    9038:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
	return (int)(isalpha(chr) || isdigit(chr));
    903c:	f1bc 0f19 	cmp.w	ip, #25
    9040:	d90c      	bls.n	905c <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9042:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    9044:	2a09      	cmp	r2, #9
    9046:	d909      	bls.n	905c <shell_op_cursor_word_move+0x68>
			if (found) {
    9048:	b148      	cbz	r0, 905e <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
    904a:	4630      	mov	r0, r6
    904c:	f7ff ffae 	bl	8fac <shell_op_cursor_move>
	while (val--) {
    9050:	3c01      	subs	r4, #1
    9052:	b224      	sxth	r4, r4
    9054:	1c63      	adds	r3, r4, #1
    9056:	d1d8      	bne.n	900a <shell_op_cursor_word_move+0x16>
}
    9058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    905c:	2001      	movs	r0, #1
	while (1) {
    905e:	443b      	add	r3, r7
    9060:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
    9062:	e7db      	b.n	901c <shell_op_cursor_word_move+0x28>
		sign = 1;
    9064:	2501      	movs	r5, #1
    9066:	e7ce      	b.n	9006 <shell_op_cursor_word_move+0x12>

00009068 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    9068:	6883      	ldr	r3, [r0, #8]
    906a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    906c:	4249      	negs	r1, r1
    906e:	b209      	sxth	r1, r1
    9070:	f7ff bf9c 	b.w	8fac <shell_op_cursor_move>

00009074 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    9074:	6883      	ldr	r3, [r0, #8]
    9076:	8e59      	ldrh	r1, [r3, #50]	; 0x32
    9078:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    907a:	1ac9      	subs	r1, r1, r3
    907c:	b209      	sxth	r1, r1
    907e:	f7ff bf95 	b.w	8fac <shell_op_cursor_move>

00009082 <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    9082:	6883      	ldr	r3, [r0, #8]
    9084:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9086:	b11b      	cbz	r3, 9090 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
    9088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    908c:	f7ff bf8e 	b.w	8fac <shell_op_cursor_move>
}
    9090:	4770      	bx	lr

00009092 <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    9092:	6883      	ldr	r3, [r0, #8]
    9094:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    9096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9098:	429a      	cmp	r2, r3
    909a:	d202      	bcs.n	90a2 <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
    909c:	2101      	movs	r1, #1
    909e:	f7ff bf85 	b.w	8fac <shell_op_cursor_move>
}
    90a2:	4770      	bx	lr

000090a4 <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    90a4:	6883      	ldr	r3, [r0, #8]
    90a6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    90a8:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    90aa:	4413      	add	r3, r2
    90ac:	2200      	movs	r2, #0
    90ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
    90b2:	6940      	ldr	r0, [r0, #20]
    90b4:	f7fa b90c 	b.w	32d0 <clear_eos.isra.0>

000090b8 <shell_cmd_line_erase>:
{
    90b8:	b510      	push	{r4, lr}
    90ba:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    90bc:	6880      	ldr	r0, [r0, #8]
    90be:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    90c0:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    90c2:	3020      	adds	r0, #32
    90c4:	f7ff fd8b 	bl	8bde <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    90c8:	68a3      	ldr	r3, [r4, #8]
	shell_op_cursor_horiz_move(shell,
    90ca:	4620      	mov	r0, r4
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    90cc:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
    90ce:	f1c1 0101 	rsb	r1, r1, #1
    90d2:	f7fa f915 	bl	3300 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    90d6:	68a3      	ldr	r3, [r4, #8]
    90d8:	4620      	mov	r0, r4
    90da:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    90dc:	3901      	subs	r1, #1
    90de:	f7fa f8ff 	bl	32e0 <shell_op_cursor_vert_move>
	clear_eos(shell);
    90e2:	6960      	ldr	r0, [r4, #20]
}
    90e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
    90e8:	f7fa b8f2 	b.w	32d0 <clear_eos.isra.0>

000090ec <shell_write>:
{
    90ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    90f0:	4605      	mov	r5, r0
    90f2:	4688      	mov	r8, r1
    90f4:	4614      	mov	r4, r2
	size_t offset = 0;
    90f6:	2700      	movs	r7, #0
	while (length) {
    90f8:	b914      	cbnz	r4, 9100 <shell_write+0x14>
}
    90fa:	b002      	add	sp, #8
    90fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    9100:	6868      	ldr	r0, [r5, #4]
    9102:	4622      	mov	r2, r4
    9104:	6803      	ldr	r3, [r0, #0]
    9106:	eb08 0107 	add.w	r1, r8, r7
    910a:	68de      	ldr	r6, [r3, #12]
    910c:	ab01      	add	r3, sp, #4
    910e:	47b0      	blx	r6
		offset += tmp_cnt;
    9110:	9e01      	ldr	r6, [sp, #4]
    9112:	4437      	add	r7, r6
		length -= tmp_cnt;
    9114:	1ba4      	subs	r4, r4, r6
		if (tmp_cnt == 0 &&
    9116:	2e00      	cmp	r6, #0
    9118:	d1ee      	bne.n	90f8 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    911a:	68a8      	ldr	r0, [r5, #8]
    911c:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
    911e:	2b03      	cmp	r3, #3
    9120:	d0ea      	beq.n	90f8 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    9122:	2b02      	cmp	r3, #2
    9124:	d80c      	bhi.n	9140 <shell_write+0x54>
	return z_impl_k_poll(events, num_events, timeout);
    9126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    912a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    912e:	2101      	movs	r1, #1
    9130:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
    9134:	f7fe fae4 	bl	7700 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    9138:	68ab      	ldr	r3, [r5, #8]
    913a:	f8c3 6294 	str.w	r6, [r3, #660]	; 0x294
    913e:	e7db      	b.n	90f8 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
    9140:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
    9144:	06db      	lsls	r3, r3, #27
    9146:	d5fb      	bpl.n	9140 <shell_write+0x54>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
    9148:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
    914c:	f36f 1304 	bfc	r3, #4, #1
    9150:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
}
    9154:	e7d0      	b.n	90f8 <shell_write+0xc>

00009156 <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
    9156:	f7ff bfc9 	b.w	90ec <shell_write>

0000915a <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
    915a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    915c:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
    915e:	6881      	ldr	r1, [r0, #8]
{
    9160:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
    9162:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
{
    9166:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    9168:	079b      	lsls	r3, r3, #30
{
    916a:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    916c:	d517      	bpl.n	919e <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
    916e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    9172:	42bb      	cmp	r3, r7
    9174:	d013      	beq.n	919e <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
    9176:	2202      	movs	r2, #2
    9178:	312e      	adds	r1, #46	; 0x2e
    917a:	a801      	add	r0, sp, #4
    917c:	f000 fd5e 	bl	9c3c <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
    9180:	4639      	mov	r1, r7
    9182:	4620      	mov	r0, r4
    9184:	f7fa f912 	bl	33ac <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    9188:	4629      	mov	r1, r5
    918a:	6960      	ldr	r0, [r4, #20]
    918c:	4632      	mov	r2, r6
    918e:	f7fa f865 	bl	325c <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
    9192:	4620      	mov	r0, r4
    9194:	a901      	add	r1, sp, #4
    9196:	f7fa f92d 	bl	33f4 <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    919a:	b003      	add	sp, #12
    919c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    919e:	4632      	mov	r2, r6
    91a0:	4629      	mov	r1, r5
    91a2:	6960      	ldr	r0, [r4, #20]
    91a4:	f7fa f85a 	bl	325c <shell_fprintf_fmt>
}
    91a8:	e7f7      	b.n	919a <shell_internal_vfprintf+0x40>

000091aa <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
    91aa:	b40c      	push	{r2, r3}
    91ac:	b507      	push	{r0, r1, r2, lr}
    91ae:	ab04      	add	r3, sp, #16
    91b0:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
    91b4:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
    91b6:	f7ff ffd0 	bl	915a <shell_internal_vfprintf>
	va_end(args);
}
    91ba:	b003      	add	sp, #12
    91bc:	f85d eb04 	ldr.w	lr, [sp], #4
    91c0:	b002      	add	sp, #8
    91c2:	4770      	bx	lr

000091c4 <data_insert>:
{
    91c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    91c8:	6886      	ldr	r6, [r0, #8]
{
    91ca:	4607      	mov	r7, r0
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    91cc:	8e75      	ldrh	r5, [r6, #50]	; 0x32
{
    91ce:	4688      	mov	r8, r1
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    91d0:	18ab      	adds	r3, r5, r2
    91d2:	2bff      	cmp	r3, #255	; 0xff
{
    91d4:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    91d6:	dc1f      	bgt.n	9218 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    91d8:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    91da:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    91dc:	3338      	adds	r3, #56	; 0x38
    91de:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    91e0:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
    91e2:	462a      	mov	r2, r5
    91e4:	4631      	mov	r1, r6
    91e6:	1930      	adds	r0, r6, r4
    91e8:	f000 fd11 	bl	9c0e <memmove>
	memcpy(curr_pos, data, len);
    91ec:	4622      	mov	r2, r4
    91ee:	4641      	mov	r1, r8
    91f0:	4630      	mov	r0, r6
    91f2:	f000 fd23 	bl	9c3c <memcpy>
	shell->ctx->cmd_buff_len += len;
    91f6:	68ba      	ldr	r2, [r7, #8]
    91f8:	8e53      	ldrh	r3, [r2, #50]	; 0x32
    91fa:	4423      	add	r3, r4
    91fc:	b29b      	uxth	r3, r3
    91fe:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    9200:	4413      	add	r3, r2
    9202:	2200      	movs	r2, #0
    9204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
    9208:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    920a:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
    920e:	0749      	lsls	r1, r1, #29
    9210:	d404      	bmi.n	921c <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
    9212:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    9214:	4414      	add	r4, r2
    9216:	869c      	strh	r4, [r3, #52]	; 0x34
}
    9218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    921c:	4629      	mov	r1, r5
    921e:	4638      	mov	r0, r7
}
    9220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    9224:	f7fa b960 	b.w	34e8 <reprint_from_cursor>

00009228 <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    9228:	f7ff bfcc 	b.w	91c4 <data_insert>

0000922c <shell_op_char_delete>:
{
    922c:	b538      	push	{r3, r4, r5, lr}
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    922e:	6883      	ldr	r3, [r0, #8]
{
    9230:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    9232:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
    9234:	8e98      	ldrh	r0, [r3, #52]	; 0x34
    9236:	1a24      	subs	r4, r4, r0
    9238:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    923a:	b18c      	cbz	r4, 9260 <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    923c:	3038      	adds	r0, #56	; 0x38
    923e:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    9240:	4622      	mov	r2, r4
    9242:	1c41      	adds	r1, r0, #1
    9244:	f000 fce3 	bl	9c0e <memmove>
	--shell->ctx->cmd_buff_len;
    9248:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(shell, --diff, true);
    924a:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    924c:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
    924e:	4628      	mov	r0, r5
	--shell->ctx->cmd_buff_len;
    9250:	3b01      	subs	r3, #1
    9252:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
    9254:	b289      	uxth	r1, r1
    9256:	2201      	movs	r2, #1
}
    9258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    925c:	f7fa b944 	b.w	34e8 <reprint_from_cursor>
}
    9260:	bd38      	pop	{r3, r4, r5, pc}

00009262 <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    9262:	6883      	ldr	r3, [r0, #8]
{
    9264:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
    9266:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
    9268:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    926a:	b152      	cbz	r2, 9282 <shell_op_char_backspace+0x20>
    926c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    926e:	b143      	cbz	r3, 9282 <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
    9270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9274:	f7ff fe9a 	bl	8fac <shell_op_cursor_move>
	shell_op_char_delete(shell);
    9278:	4620      	mov	r0, r4
}
    927a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
    927e:	f7ff bfd5 	b.w	922c <shell_op_char_delete>
}
    9282:	bd10      	pop	{r4, pc}

00009284 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
    9284:	6883      	ldr	r3, [r0, #8]
    9286:	6a1b      	ldr	r3, [r3, #32]
    9288:	b103      	cbz	r3, 928c <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    928a:	4718      	bx	r3
}
    928c:	4770      	bx	lr

0000928e <uninit>:
}
    928e:	2000      	movs	r0, #0
    9290:	4770      	bx	lr

00009292 <read>:
{
    9292:	b510      	push	{r4, lr}
    9294:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    9296:	6843      	ldr	r3, [r0, #4]
    9298:	68d8      	ldr	r0, [r3, #12]
    929a:	f7ff f82d 	bl	82f8 <ring_buf_get>
    929e:	6020      	str	r0, [r4, #0]
}
    92a0:	2000      	movs	r0, #0
    92a2:	bd10      	pop	{r4, pc}

000092a4 <write>:
{
    92a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    92a8:	6845      	ldr	r5, [r0, #4]
{
    92aa:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    92ac:	682b      	ldr	r3, [r5, #0]
{
    92ae:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    92b0:	7c1b      	ldrb	r3, [r3, #16]
{
    92b2:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    92b4:	b153      	cbz	r3, 92cc <write+0x28>
    92b6:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    92ba:	4544      	cmp	r4, r8
    92bc:	682b      	ldr	r3, [r5, #0]
    92be:	d11c      	bne.n	92fa <write+0x56>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    92c0:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    92c4:	2001      	movs	r0, #1
		*cnt = length;
    92c6:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    92c8:	4790      	blx	r2
    92ca:	e013      	b.n	92f4 <write+0x50>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    92cc:	68a8      	ldr	r0, [r5, #8]
    92ce:	f7fe ffbe 	bl	824e <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    92d2:	2101      	movs	r1, #1
    92d4:	682b      	ldr	r3, [r5, #0]
    92d6:	6030      	str	r0, [r6, #0]
    92d8:	330c      	adds	r3, #12
    92da:	e8d3 2fef 	ldaex	r2, [r3]
    92de:	e8c3 1fe0 	stlex	r0, r1, [r3]
    92e2:	2800      	cmp	r0, #0
    92e4:	d1f9      	bne.n	92da <write+0x36>
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    92e6:	b92a      	cbnz	r2, 92f4 <write+0x50>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    92e8:	682b      	ldr	r3, [r5, #0]
    92ea:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
    92ec:	6883      	ldr	r3, [r0, #8]
    92ee:	69db      	ldr	r3, [r3, #28]
    92f0:	b103      	cbz	r3, 92f4 <write+0x50>
		api->irq_tx_enable(dev);
    92f2:	4798      	blx	r3
}
    92f4:	2000      	movs	r0, #0
    92f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    92fa:	6818      	ldr	r0, [r3, #0]
    92fc:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    9300:	6883      	ldr	r3, [r0, #8]
    9302:	685b      	ldr	r3, [r3, #4]
    9304:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    9306:	e7d8      	b.n	92ba <write+0x16>

00009308 <enable>:
{
    9308:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    930a:	6843      	ldr	r3, [r0, #4]
    930c:	681b      	ldr	r3, [r3, #0]
    930e:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    9310:	b111      	cbz	r1, 9318 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    9312:	6818      	ldr	r0, [r3, #0]
    9314:	f7ff ffb6 	bl	9284 <z_impl_uart_irq_tx_disable>
}
    9318:	2000      	movs	r0, #0
    931a:	bd08      	pop	{r3, pc}

0000931c <shell_raw_fprintf>:
{
    931c:	b40e      	push	{r1, r2, r3}
    931e:	b503      	push	{r0, r1, lr}
    9320:	aa03      	add	r2, sp, #12
    9322:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    9326:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    9328:	f7f9 ff98 	bl	325c <shell_fprintf_fmt>
}
    932c:	b002      	add	sp, #8
    932e:	f85d eb04 	ldr.w	lr, [sp], #4
    9332:	b003      	add	sp, #12
    9334:	4770      	bx	lr

00009336 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
    9336:	6883      	ldr	r3, [r0, #8]
}
    9338:	2000      	movs	r0, #0
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
    933a:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    933e:	f36f 1245 	bfc	r2, #5, #1
    9342:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    9346:	4770      	bx	lr

00009348 <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
    9348:	6882      	ldr	r2, [r0, #8]
}
    934a:	2000      	movs	r0, #0
    934c:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    9350:	f043 0320 	orr.w	r3, r3, #32
    9354:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    9358:	4770      	bx	lr

0000935a <cmd_colors_off>:
	flag_use_colors_set(shell, false);
    935a:	6883      	ldr	r3, [r0, #8]
}
    935c:	2000      	movs	r0, #0
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
    935e:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    9362:	f36f 0241 	bfc	r2, #1, #1
    9366:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    936a:	4770      	bx	lr

0000936c <cmd_colors_on>:
	flag_use_colors_set(shell, true);
    936c:	6882      	ldr	r2, [r0, #8]
}
    936e:	2000      	movs	r0, #0
    9370:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    9374:	f043 0302 	orr.w	r3, r3, #2
    9378:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    937c:	4770      	bx	lr

0000937e <cmd_echo_off>:
	flag_echo_set(shell, false);
    937e:	6883      	ldr	r3, [r0, #8]
}
    9380:	2000      	movs	r0, #0
	shell->ctx->internal.flags.echo = val ? 1 : 0;
    9382:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
    9386:	f36f 0282 	bfc	r2, #2, #1
    938a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    938e:	4770      	bx	lr

00009390 <cmd_echo_on>:
	flag_echo_set(shell, true);
    9390:	6882      	ldr	r2, [r0, #8]
}
    9392:	2000      	movs	r0, #0
    9394:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
    9398:	f043 0304 	orr.w	r3, r3, #4
    939c:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
    93a0:	4770      	bx	lr

000093a2 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    93a2:	6983      	ldr	r3, [r0, #24]
    93a4:	2000      	movs	r0, #0
    93a6:	6018      	str	r0, [r3, #0]
}
    93a8:	4770      	bx	lr

000093aa <shell_raw_fprintf>:
{
    93aa:	b40e      	push	{r1, r2, r3}
    93ac:	b503      	push	{r0, r1, lr}
    93ae:	aa03      	add	r2, sp, #12
    93b0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    93b4:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    93b6:	f7f9 ff51 	bl	325c <shell_fprintf_fmt>
}
    93ba:	b002      	add	sp, #8
    93bc:	f85d eb04 	ldr.w	lr, [sp], #4
    93c0:	b003      	add	sp, #12
    93c2:	4770      	bx	lr

000093c4 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    93c4:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    93c6:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    93c8:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
    93ca:	e9d3 2100 	ldrd	r2, r1, [r3]
    93ce:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    93d0:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    93d2:	2200      	movs	r2, #0
			h_item->len + h_item->padding;
    93d4:	8919      	ldrh	r1, [r3, #8]
	node->prev = NULL;
    93d6:	e9c3 2200 	strd	r2, r2, [r3]
    93da:	895b      	ldrh	r3, [r3, #10]
    93dc:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    93de:	310c      	adds	r1, #12
    93e0:	f7fe ff75 	bl	82ce <ring_buf_get_finish>

	return true;
}
    93e4:	2001      	movs	r0, #1
    93e6:	bd08      	pop	{r3, pc}

000093e8 <shell_history_mode_exit>:
	history->current = NULL;
    93e8:	2300      	movs	r3, #0
    93ea:	60c3      	str	r3, [r0, #12]
}
    93ec:	4770      	bx	lr

000093ee <shell_history_get>:
{
    93ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93f0:	461f      	mov	r7, r3
	return list->head == list;
    93f2:	4603      	mov	r3, r0
    93f4:	f853 4f04 	ldr.w	r4, [r3, #4]!
    93f8:	4616      	mov	r6, r2
	if (sys_dlist_is_empty(&history->list)) {
    93fa:	429c      	cmp	r4, r3
    93fc:	d102      	bne.n	9404 <shell_history_get+0x16>
		*len = 0U;
    93fe:	2000      	movs	r0, #0
    9400:	8038      	strh	r0, [r7, #0]
}
    9402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
    9404:	68c5      	ldr	r5, [r0, #12]
    9406:	b9b1      	cbnz	r1, 9436 <shell_history_get+0x48>
		if (history->current == NULL) {
    9408:	2d00      	cmp	r5, #0
    940a:	d0f8      	beq.n	93fe <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    940c:	42ac      	cmp	r4, r5
    940e:	d102      	bne.n	9416 <shell_history_get+0x28>
	history->current = l_item;
    9410:	2300      	movs	r3, #0
    9412:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    9414:	e7f3      	b.n	93fe <shell_history_get+0x10>
    9416:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    9418:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    941a:	2c00      	cmp	r4, #0
    941c:	d0ef      	beq.n	93fe <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    941e:	8922      	ldrh	r2, [r4, #8]
    9420:	4630      	mov	r0, r6
    9422:	f104 010c 	add.w	r1, r4, #12
    9426:	f000 fc09 	bl	9c3c <memcpy>
		dst[*len] = '\0';
    942a:	2200      	movs	r2, #0
		*len = h_item->len;
    942c:	8923      	ldrh	r3, [r4, #8]
		return true;
    942e:	2001      	movs	r0, #1
		*len = h_item->len;
    9430:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    9432:	54f2      	strb	r2, [r6, r3]
		return true;
    9434:	e7e5      	b.n	9402 <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    9436:	2d00      	cmp	r5, #0
    9438:	d0ee      	beq.n	9418 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    943a:	6883      	ldr	r3, [r0, #8]
    943c:	42ab      	cmp	r3, r5
    943e:	d0e7      	beq.n	9410 <shell_history_get+0x22>
    9440:	682c      	ldr	r4, [r5, #0]
    9442:	e7e9      	b.n	9418 <shell_history_get+0x2a>

00009444 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
    9444:	b538      	push	{r3, r4, r5, lr}
    9446:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    9448:	1d05      	adds	r5, r0, #4
    944a:	6863      	ldr	r3, [r4, #4]
    944c:	42ab      	cmp	r3, r5
    944e:	d004      	beq.n	945a <shell_history_purge+0x16>
    9450:	4620      	mov	r0, r4
    9452:	f7ff ffb7 	bl	93c4 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    9456:	2800      	cmp	r0, #0
    9458:	d1f7      	bne.n	944a <shell_history_purge+0x6>
	}
}
    945a:	bd38      	pop	{r3, r4, r5, pc}

0000945c <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    945c:	6803      	ldr	r3, [r0, #0]
{
    945e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
    9462:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    9466:	f1c5 0800 	rsb	r8, r5, #0
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
    946a:	691b      	ldr	r3, [r3, #16]
    946c:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
    9470:	4445      	add	r5, r8
    9472:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    9474:	429d      	cmp	r5, r3
{
    9476:	4604      	mov	r4, r0
    9478:	468a      	mov	sl, r1
    947a:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    947c:	d841      	bhi.n	9502 <shell_history_put+0xa6>
	history->current = NULL;
    947e:	2300      	movs	r3, #0
    9480:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
    9482:	2a00      	cmp	r2, #0
    9484:	d03d      	beq.n	9502 <shell_history_put+0xa6>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    9486:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    948a:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    948c:	4581      	cmp	r9, r0
    948e:	d12d      	bne.n	94ec <shell_history_put+0x90>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    9490:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    9492:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    9496:	462a      	mov	r2, r5
    9498:	6820      	ldr	r0, [r4, #0]
    949a:	a901      	add	r1, sp, #4
    949c:	f7fe fea9 	bl	81f2 <ring_buf_put_claim>
		if (claim_len < total_len) {
    94a0:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    94a2:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    94a4:	d930      	bls.n	9508 <shell_history_put+0xac>
				ring_buf_put_claim(history->ring_buf,
    94a6:	462a      	mov	r2, r5
    94a8:	6820      	ldr	r0, [r4, #0]
    94aa:	a901      	add	r1, sp, #4
    94ac:	f7fe fea1 	bl	81f2 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    94b0:	4285      	cmp	r5, r0
    94b2:	d12a      	bne.n	950a <shell_history_put+0xae>
				ring_buf_put_finish(history->ring_buf,
    94b4:	4631      	mov	r1, r6
    94b6:	6820      	ldr	r0, [r4, #0]
				padding += claim_len;
    94b8:	44b0      	add	r8, r6
				ring_buf_put_finish(history->ring_buf,
    94ba:	f7fe feb5 	bl	8228 <ring_buf_put_finish>
				padding += claim_len;
    94be:	462e      	mov	r6, r5
    94c0:	fa1f f888 	uxth.w	r8, r8
			add_to_head(history, h_item, line, len, padding);
    94c4:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    94c6:	4651      	mov	r1, sl
    94c8:	463a      	mov	r2, r7
	item->len = len;
    94ca:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
    94cc:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
    94d0:	f105 000c 	add.w	r0, r5, #12
    94d4:	f000 fbb2 	bl	9c3c <memcpy>
	node->next = list->head;
    94d8:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    94da:	4631      	mov	r1, r6
	node->prev = list;
    94dc:	e9c5 3900 	strd	r3, r9, [r5]
    94e0:	6820      	ldr	r0, [r4, #0]
	list->head->prev = node;
    94e2:	605d      	str	r5, [r3, #4]
	list->head = node;
    94e4:	6065      	str	r5, [r4, #4]
    94e6:	f7fe fe9f 	bl	8228 <ring_buf_put_finish>
			break;
    94ea:	e00a      	b.n	9502 <shell_history_put+0xa6>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    94ec:	9001      	str	r0, [sp, #4]
	if (l_item &&
    94ee:	2800      	cmp	r0, #0
    94f0:	d0cf      	beq.n	9492 <shell_history_put+0x36>
	   (h_item->len == len) &&
    94f2:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    94f4:	4293      	cmp	r3, r2
    94f6:	d1cc      	bne.n	9492 <shell_history_put+0x36>
	   (memcmp(h_item->data, line, len) == 0)) {
    94f8:	300c      	adds	r0, #12
    94fa:	f000 fb78 	bl	9bee <memcmp>
	   (h_item->len == len) &&
    94fe:	2800      	cmp	r0, #0
    9500:	d1c7      	bne.n	9492 <shell_history_put+0x36>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    9502:	b003      	add	sp, #12
    9504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    9508:	d0dc      	beq.n	94c4 <shell_history_put+0x68>
		ring_buf_put_finish(history->ring_buf, 0);
    950a:	2100      	movs	r1, #0
    950c:	6820      	ldr	r0, [r4, #0]
    950e:	f7fe fe8b 	bl	8228 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    9512:	6863      	ldr	r3, [r4, #4]
    9514:	4599      	cmp	r9, r3
    9516:	d108      	bne.n	952a <shell_history_put+0xce>
	memset(&buf->misc, 0, sizeof(buf->misc));
    9518:	2208      	movs	r2, #8
			ring_buf_reset(history->ring_buf);
    951a:	6820      	ldr	r0, [r4, #0]
    951c:	2100      	movs	r1, #0
	buf->tail = 0;
    951e:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    9522:	4410      	add	r0, r2
    9524:	f000 fbb5 	bl	9c92 <memset>
}
    9528:	e7b5      	b.n	9496 <shell_history_put+0x3a>
    952a:	4620      	mov	r0, r4
    952c:	f7ff ff4a 	bl	93c4 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
    9530:	2800      	cmp	r0, #0
    9532:	d1b0      	bne.n	9496 <shell_history_put+0x3a>
    9534:	e7f0      	b.n	9518 <shell_history_put+0xbc>

00009536 <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    9536:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    9538:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    953c:	2300      	movs	r3, #0
    953e:	60c3      	str	r3, [r0, #12]
}
    9540:	4770      	bx	lr

00009542 <msg_from_fifo.isra.0>:
	backend->control_block->dropped_cnt = 0;
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
	}
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
    9542:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
    9544:	2200      	movs	r2, #0
    9546:	2300      	movs	r3, #0
    9548:	4669      	mov	r1, sp
    954a:	f7fd f91f 	bl	678c <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
    954e:	b918      	cbnz	r0, 9558 <msg_from_fifo.isra.0+0x16>
    9550:	9800      	ldr	r0, [sp, #0]
}
    9552:	b003      	add	sp, #12
    9554:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
    9558:	2000      	movs	r0, #0
    955a:	e7fa      	b.n	9552 <msg_from_fifo.isra.0+0x10>

0000955c <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    955c:	6843      	ldr	r3, [r0, #4]
    955e:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9560:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
    9564:	e8d3 0fef 	ldaex	r0, [r3]
    9568:	4408      	add	r0, r1
    956a:	e8c3 0fec 	stlex	ip, r0, [r3]
    956e:	f1bc 0f00 	cmp.w	ip, #0
    9572:	d1f7      	bne.n	9564 <dropped+0x8>
    9574:	68d3      	ldr	r3, [r2, #12]
    9576:	e8d3 2fef 	ldaex	r2, [r3]
    957a:	440a      	add	r2, r1
    957c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    9580:	2800      	cmp	r0, #0
    9582:	d1f8      	bne.n	9576 <dropped+0x1a>
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
    9584:	4770      	bx	lr

00009586 <put>:
{
    9586:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    9588:	6843      	ldr	r3, [r0, #4]
{
    958a:	b087      	sub	sp, #28
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    958c:	681c      	ldr	r4, [r3, #0]
	log_msg_get(msg);
    958e:	4608      	mov	r0, r1
			shell->ctx->internal.flags.use_colors;
    9590:	68a3      	ldr	r3, [r4, #8]
{
    9592:	460d      	mov	r5, r1
			shell->ctx->internal.flags.use_colors;
    9594:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
	log_msg_get(msg);
    9598:	f7fe ffc1 	bl	851e <log_msg_get>
	switch (shell->log_backend->control_block->state) {
    959c:	69e3      	ldr	r3, [r4, #28]
			shell->ctx->internal.flags.use_colors;
    959e:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
    95a2:	68db      	ldr	r3, [r3, #12]
    95a4:	791b      	ldrb	r3, [r3, #4]
    95a6:	2b01      	cmp	r3, #1
    95a8:	d005      	beq.n	95b6 <put+0x30>
    95aa:	2b03      	cmp	r3, #3
    95ac:	d065      	beq.n	967a <put+0xf4>
		log_msg_put(msg);
    95ae:	4628      	mov	r0, r5
    95b0:	f7fe ffe0 	bl	8574 <log_msg_put>
}
    95b4:	e05f      	b.n	9676 <put+0xf0>
	struct shell_log_backend_msg t_msg = {
    95b6:	e9cd 5501 	strd	r5, r5, [sp, #4]
	return z_impl_k_uptime_ticks();
    95ba:	f000 ff43 	bl	a444 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
    95be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    95c2:	460a      	mov	r2, r1
    95c4:	fba0 0103 	umull	r0, r1, r0, r3
    95c8:	fb03 1102 	mla	r1, r3, r2, r1
    95cc:	0bc3      	lsrs	r3, r0, #15
    95ce:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			return (u32_t)((t * to_hz + off) / from_hz);
    95d2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    95d6:	f240 30e7 	movw	r0, #999	; 0x3e7
    95da:	2100      	movs	r1, #0
	return (u32_t)k_uptime_get();
    95dc:	9303      	str	r3, [sp, #12]
	err = k_msgq_put(shell->log_backend->msgq, &t_msg,
    95de:	69e3      	ldr	r3, [r4, #28]
    95e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    95e4:	691f      	ldr	r7, [r3, #16]
    95e6:	685d      	ldr	r5, [r3, #4]
    95e8:	fbe6 0107 	umlal	r0, r1, r6, r7
    95ec:	2300      	movs	r3, #0
    95ee:	f7f6 fdfb 	bl	1e8 <__aeabi_uldivmod>
    95f2:	4602      	mov	r2, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
    95f4:	2300      	movs	r3, #0
    95f6:	4628      	mov	r0, r5
    95f8:	a902      	add	r1, sp, #8
    95fa:	f7fd f873 	bl	66e4 <z_impl_k_msgq_put>
	switch (err) {
    95fe:	f110 0f50 	cmn.w	r0, #80	; 0x50
    9602:	d001      	beq.n	9608 <put+0x82>
    9604:	300b      	adds	r0, #11
    9606:	d130      	bne.n	966a <put+0xe4>
	struct k_msgq *msgq = shell->log_backend->msgq;
    9608:	69e3      	ldr	r3, [r4, #28]
    960a:	685e      	ldr	r6, [r3, #4]
	u32_t timeout = shell->log_backend->timeout;
    960c:	691f      	ldr	r7, [r3, #16]
	return z_impl_k_uptime_ticks();
    960e:	f000 ff19 	bl	a444 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
    9612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9616:	460a      	mov	r2, r1
    9618:	fba0 0103 	umull	r0, r1, r0, r3
    961c:	fb03 1102 	mla	r1, r3, r2, r1
    9620:	0bc5      	lsrs	r5, r0, #15
    9622:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
    9626:	4630      	mov	r0, r6
    9628:	a904      	add	r1, sp, #16
    962a:	f000 fd71 	bl	a110 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
    962e:	b9a8      	cbnz	r0, 965c <put+0xd6>
    9630:	9b05      	ldr	r3, [sp, #20]
    9632:	1aeb      	subs	r3, r5, r3
    9634:	429f      	cmp	r7, r3
    9636:	d211      	bcs.n	965c <put+0xd6>
	return z_impl_k_msgq_get(msgq, data, timeout);
    9638:	2300      	movs	r3, #0
    963a:	2200      	movs	r2, #0
    963c:	a904      	add	r1, sp, #16
    963e:	4630      	mov	r0, r6
    9640:	f7fd f8a4 	bl	678c <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
    9644:	9804      	ldr	r0, [sp, #16]
    9646:	f7fe ff95 	bl	8574 <log_msg_put>
    964a:	69a3      	ldr	r3, [r4, #24]
    964c:	e8d3 2fef 	ldaex	r2, [r3]
    9650:	3201      	adds	r2, #1
    9652:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9656:	2900      	cmp	r1, #0
    9658:	d0e5      	beq.n	9626 <put+0xa0>
    965a:	e7f7      	b.n	964c <put+0xc6>
		err = k_msgq_put(shell->log_backend->msgq, &msg, K_NO_WAIT);
    965c:	69e3      	ldr	r3, [r4, #28]
    965e:	6858      	ldr	r0, [r3, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
    9660:	2200      	movs	r2, #0
    9662:	2300      	movs	r3, #0
    9664:	a901      	add	r1, sp, #4
    9666:	f7fd f83d 	bl	66e4 <z_impl_k_msgq_put>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
    966a:	68a0      	ldr	r0, [r4, #8]
    966c:	f500 701b 	add.w	r0, r0, #620	; 0x26c
	return z_impl_k_poll_signal_raise(signal, result);
    9670:	2100      	movs	r1, #0
    9672:	f7fe f8a5 	bl	77c0 <z_impl_k_poll_signal_raise>
}
    9676:	b007      	add	sp, #28
    9678:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_cmd_line_erase(shell);
    967a:	4620      	mov	r0, r4
    967c:	f7ff fd1c 	bl	90b8 <shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
    9680:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
    9682:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
    9684:	bf0c      	ite	eq
    9686:	220e      	moveq	r2, #14
    9688:	220f      	movne	r2, #15
    968a:	4629      	mov	r1, r5
    968c:	6898      	ldr	r0, [r3, #8]
    968e:	f7f8 fa07 	bl	1aa0 <log_output_msg_process>
	log_msg_put(msg);
    9692:	e78c      	b.n	95ae <put+0x28>

00009694 <shell_log_backend_output_func>:
{
    9694:	4613      	mov	r3, r2
    9696:	b510      	push	{r4, lr}
    9698:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
    969a:	460a      	mov	r2, r1
    969c:	4601      	mov	r1, r0
    969e:	4618      	mov	r0, r3
    96a0:	f7ff fd59 	bl	9156 <shell_print_stream>
}
    96a4:	4620      	mov	r0, r4
    96a6:	bd10      	pop	{r4, pc}

000096a8 <shell_log_backend_enable>:
{
    96a8:	b538      	push	{r3, r4, r5, lr}
    96aa:	4604      	mov	r4, r0
    96ac:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
    96ae:	6800      	ldr	r0, [r0, #0]
    96b0:	f7f7 fe30 	bl	1314 <log_backend_enable>
	backend->control_block->dropped_cnt = 0;
    96b4:	2200      	movs	r2, #0
		log_output_ctx_set(backend->log_output, ctx);
    96b6:	68a3      	ldr	r3, [r4, #8]
    96b8:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    96ba:	605d      	str	r5, [r3, #4]
	backend->control_block->dropped_cnt = 0;
    96bc:	68e3      	ldr	r3, [r4, #12]
    96be:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    96c0:	2201      	movs	r2, #1
    96c2:	711a      	strb	r2, [r3, #4]
}
    96c4:	bd38      	pop	{r3, r4, r5, pc}

000096c6 <shell_log_backend_disable>:
{
    96c6:	b510      	push	{r4, lr}
    96c8:	4604      	mov	r4, r0
	while ((msg = msg_from_fifo(backend)) != NULL) {
    96ca:	6860      	ldr	r0, [r4, #4]
    96cc:	f7ff ff39 	bl	9542 <msg_from_fifo.isra.0>
    96d0:	b930      	cbnz	r0, 96e0 <shell_log_backend_disable+0x1a>
	log_backend_disable(backend->backend);
    96d2:	6820      	ldr	r0, [r4, #0]
    96d4:	f7fe fe75 	bl	83c2 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    96d8:	2202      	movs	r2, #2
    96da:	68e3      	ldr	r3, [r4, #12]
    96dc:	711a      	strb	r2, [r3, #4]
}
    96de:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
    96e0:	f7fe ff48 	bl	8574 <log_msg_put>
    96e4:	e7f1      	b.n	96ca <shell_log_backend_disable+0x4>

000096e6 <shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
    96e6:	6803      	ldr	r3, [r0, #0]
{
    96e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct shell *shell =
    96ec:	685b      	ldr	r3, [r3, #4]
{
    96ee:	4605      	mov	r5, r0
	const struct shell *shell =
    96f0:	681f      	ldr	r7, [r3, #0]
	struct log_msg *msg = msg_from_fifo(backend);
    96f2:	6840      	ldr	r0, [r0, #4]
			shell->ctx->internal.flags.use_colors;
    96f4:	68bb      	ldr	r3, [r7, #8]
    96f6:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
	struct log_msg *msg = msg_from_fifo(backend);
    96fa:	f7ff ff22 	bl	9542 <msg_from_fifo.isra.0>
			shell->ctx->internal.flags.use_colors;
    96fe:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (!msg) {
    9702:	4604      	mov	r4, r0
    9704:	b358      	cbz	r0, 975e <shell_log_backend_process+0x78>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9706:	2200      	movs	r2, #0
    9708:	68eb      	ldr	r3, [r5, #12]
    970a:	e8d3 8fef 	ldaex	r8, [r3]
    970e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9712:	2900      	cmp	r1, #0
    9714:	d1f9      	bne.n	970a <shell_log_backend_process+0x24>
	if (dropped) {
    9716:	f1b8 0f00 	cmp.w	r8, #0
    971a:	d013      	beq.n	9744 <shell_log_backend_process+0x5e>
		if (colors) {
    971c:	b14e      	cbz	r6, 9732 <shell_log_backend_process+0x4c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
    971e:	68b9      	ldr	r1, [r7, #8]
    9720:	2202      	movs	r2, #2
    9722:	312e      	adds	r1, #46	; 0x2e
    9724:	a801      	add	r0, sp, #4
    9726:	f000 fa89 	bl	9c3c <memcpy>
			shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
    972a:	2102      	movs	r1, #2
    972c:	4638      	mov	r0, r7
    972e:	f7f9 fe3d 	bl	33ac <shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
    9732:	4641      	mov	r1, r8
    9734:	68a8      	ldr	r0, [r5, #8]
    9736:	f7f8 fa2f 	bl	1b98 <log_output_dropped_process>
		if (colors) {
    973a:	b11e      	cbz	r6, 9744 <shell_log_backend_process+0x5e>
			shell_vt100_colors_restore(shell, &col);
    973c:	4638      	mov	r0, r7
    973e:	a901      	add	r1, sp, #4
    9740:	f7f9 fe58 	bl	33f4 <shell_vt100_colors_restore>
	msg_process(shell->log_backend->log_output, msg, colors);
    9744:	69fb      	ldr	r3, [r7, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
    9746:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
    9748:	6898      	ldr	r0, [r3, #8]
    974a:	bf0c      	ite	eq
    974c:	220e      	moveq	r2, #14
    974e:	220f      	movne	r2, #15
    9750:	4621      	mov	r1, r4
    9752:	f7f8 f9a5 	bl	1aa0 <log_output_msg_process>
	log_msg_put(msg);
    9756:	4620      	mov	r0, r4
    9758:	f7fe ff0c 	bl	8574 <log_msg_put>
	return true;
    975c:	2001      	movs	r0, #1
}
    975e:	b002      	add	sp, #8
    9760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009764 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    9764:	6843      	ldr	r3, [r0, #4]
{
    9766:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    9768:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
    976a:	2101      	movs	r1, #1
    976c:	6860      	ldr	r0, [r4, #4]
    976e:	6803      	ldr	r3, [r0, #0]
    9770:	689b      	ldr	r3, [r3, #8]
    9772:	4798      	blx	r3
	if (err == 0) {
    9774:	b9d0      	cbnz	r0, 97ac <panic+0x48>
		shell->log_backend->control_block->state =
    9776:	2203      	movs	r2, #3
    9778:	69e3      	ldr	r3, [r4, #28]
    977a:	68db      	ldr	r3, [r3, #12]
    977c:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    977e:	68a0      	ldr	r0, [r4, #8]
    9780:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9782:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    9784:	3020      	adds	r0, #32
    9786:	f7ff fa2a 	bl	8bde <shell_multiline_data_calc>
		shell_op_cursor_vert_move(shell, -1);
    978a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    978e:	4620      	mov	r0, r4
    9790:	f7f9 fda6 	bl	32e0 <shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
    9794:	68a3      	ldr	r3, [r4, #8]
		shell_op_cursor_horiz_move(shell,
    9796:	4620      	mov	r0, r4
					   -shell->ctx->vt100_ctx.cons.cur_x);
    9798:	8c19      	ldrh	r1, [r3, #32]
		shell_op_cursor_horiz_move(shell,
    979a:	4249      	negs	r1, r1
    979c:	f7f9 fdb0 	bl	3300 <shell_op_cursor_horiz_move>
		while (shell_log_backend_process(shell->log_backend)) {
    97a0:	69e0      	ldr	r0, [r4, #28]
    97a2:	f7ff ffa0 	bl	96e6 <shell_log_backend_process>
    97a6:	2800      	cmp	r0, #0
    97a8:	d1fa      	bne.n	97a0 <panic+0x3c>
}
    97aa:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
    97ac:	69e0      	ldr	r0, [r4, #28]
}
    97ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
    97b2:	f7ff bf88 	b.w	96c6 <shell_log_backend_disable>

000097b6 <shell_wildcard_character_exist>:
{
    97b6:	b510      	push	{r4, lr}
    97b8:	4604      	mov	r4, r0
    97ba:	b908      	cbnz	r0, 97c0 <shell_wildcard_character_exist+0xa>
	return false;
    97bc:	2000      	movs	r0, #0
}
    97be:	bd10      	pop	{r4, pc}
    97c0:	f000 f9f3 	bl	9baa <strlen>
	for (size_t i = 0; i < str_len; i++) {
    97c4:	2300      	movs	r3, #0
    97c6:	b280      	uxth	r0, r0
    97c8:	4283      	cmp	r3, r0
    97ca:	d2f7      	bcs.n	97bc <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    97cc:	5ce2      	ldrb	r2, [r4, r3]
    97ce:	2a3f      	cmp	r2, #63	; 0x3f
    97d0:	d003      	beq.n	97da <shell_wildcard_character_exist+0x24>
    97d2:	2a2a      	cmp	r2, #42	; 0x2a
    97d4:	d001      	beq.n	97da <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
    97d6:	3301      	adds	r3, #1
    97d8:	e7f6      	b.n	97c8 <shell_wildcard_character_exist+0x12>
			return true;
    97da:	2001      	movs	r0, #1
    97dc:	e7ef      	b.n	97be <shell_wildcard_character_exist+0x8>

000097de <shell_wildcard_prepare>:
{
    97de:	b510      	push	{r4, lr}
    97e0:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    97e2:	6880      	ldr	r0, [r0, #8]
    97e4:	f44f 7280 	mov.w	r2, #256	; 0x100
    97e8:	2100      	movs	r1, #0
    97ea:	f500 709c 	add.w	r0, r0, #312	; 0x138
    97ee:	f000 fa50 	bl	9c92 <memset>
	memcpy(shell->ctx->temp_buff,
    97f2:	68a0      	ldr	r0, [r4, #8]
    97f4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    97f6:	f100 0138 	add.w	r1, r0, #56	; 0x38
    97fa:	f500 709c 	add.w	r0, r0, #312	; 0x138
    97fe:	f000 fa1d 	bl	9c3c <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
    9802:	68a0      	ldr	r0, [r4, #8]
    9804:	f500 709c 	add.w	r0, r0, #312	; 0x138
    9808:	f7ff fb33 	bl	8e72 <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
    980c:	68a3      	ldr	r3, [r4, #8]
    980e:	f513 709c 	adds.w	r0, r3, #312	; 0x138
    9812:	d006      	beq.n	9822 <shell_wildcard_prepare+0x44>
    9814:	f000 f9c9 	bl	9baa <strlen>
    9818:	b283      	uxth	r3, r0
    981a:	68a2      	ldr	r2, [r4, #8]
    981c:	3301      	adds	r3, #1
    981e:	86d3      	strh	r3, [r2, #54]	; 0x36
}
    9820:	bd10      	pop	{r4, pc}
    9822:	4603      	mov	r3, r0
    9824:	e7f9      	b.n	981a <shell_wildcard_prepare+0x3c>

00009826 <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
    9826:	b510      	push	{r4, lr}
    9828:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    982a:	6880      	ldr	r0, [r0, #8]
    982c:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    982e:	f500 719c 	add.w	r1, r0, #312	; 0x138
    9832:	3038      	adds	r0, #56	; 0x38
    9834:	f000 fa02 	bl	9c3c <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    9838:	68a3      	ldr	r3, [r4, #8]
    983a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    983c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    983e:	bd10      	pop	{r4, pc}

00009840 <get_status>:
	if (data->started) {
    9840:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
    9842:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    9844:	b2c9      	uxtb	r1, r1
	if (data->started) {
    9846:	fb02 3101 	mla	r1, r2, r1, r3
    984a:	7a4b      	ldrb	r3, [r1, #9]
    984c:	b923      	cbnz	r3, 9858 <get_status+0x18>
	if (data->ref > 0) {
    984e:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    9850:	fab0 f080 	clz	r0, r0
    9854:	0940      	lsrs	r0, r0, #5
    9856:	4770      	bx	lr
    9858:	2002      	movs	r0, #2
}
    985a:	4770      	bx	lr

0000985c <clock_stop>:
{
    985c:	b570      	push	{r4, r5, r6, lr}
    985e:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    9860:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    9862:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    9864:	f04f 0320 	mov.w	r3, #32
    9868:	f3ef 8611 	mrs	r6, BASEPRI
    986c:	f383 8811 	msr	BASEPRI, r3
    9870:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    9874:	220c      	movs	r2, #12
    9876:	434a      	muls	r2, r1
    9878:	18ab      	adds	r3, r5, r2
    987a:	7a18      	ldrb	r0, [r3, #8]
    987c:	b190      	cbz	r0, 98a4 <clock_stop+0x48>
	data->ref--;
    987e:	3801      	subs	r0, #1
    9880:	b2c0      	uxtb	r0, r0
    9882:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    9884:	b988      	cbnz	r0, 98aa <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    9886:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
    988a:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    988c:	78ca      	ldrb	r2, [r1, #3]
    988e:	2101      	movs	r1, #1
    9890:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
	list->tail = NULL;
    9894:	6058      	str	r0, [r3, #4]
    9896:	6011      	str	r1, [r2, #0]
		data->started = false;
    9898:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    989a:	f386 8811 	msr	BASEPRI, r6
    989e:	f3bf 8f6f 	isb	sy
}
    98a2:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    98a4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    98a8:	e7f7      	b.n	989a <clock_stop+0x3e>
	int err = 0;
    98aa:	2000      	movs	r0, #0
    98ac:	e7f5      	b.n	989a <clock_stop+0x3e>

000098ae <clock_async_start>:
{
    98ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    98b2:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    98b4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
    98b8:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
    98ba:	b14a      	cbz	r2, 98d0 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    98bc:	230c      	movs	r3, #12
    98be:	437b      	muls	r3, r7
    98c0:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    98c4:	429a      	cmp	r2, r3
    98c6:	d052      	beq.n	996e <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    98c8:	b113      	cbz	r3, 98d0 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    98ca:	681b      	ldr	r3, [r3, #0]
	} while (item);
    98cc:	2b00      	cmp	r3, #0
    98ce:	d1f9      	bne.n	98c4 <clock_async_start+0x16>
	__asm__ volatile(
    98d0:	f04f 0320 	mov.w	r3, #32
    98d4:	f3ef 8c11 	mrs	ip, BASEPRI
    98d8:	f383 8811 	msr	BASEPRI, r3
    98dc:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    98e0:	250c      	movs	r5, #12
    98e2:	437d      	muls	r5, r7
    98e4:	eb0e 0305 	add.w	r3, lr, r5
    98e8:	7a1c      	ldrb	r4, [r3, #8]
    98ea:	3401      	adds	r4, #1
    98ec:	b2e4      	uxtb	r4, r4
    98ee:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    98f0:	f38c 8811 	msr	BASEPRI, ip
    98f4:	f3bf 8f6f 	isb	sy
	if (data) {
    98f8:	b35a      	cbz	r2, 9952 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
    98fa:	f04f 2c50 	mov.w	ip, #1342197760	; 0x50005000
    98fe:	f04f 0803 	mov.w	r8, #3
    9902:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    9906:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    990a:	f1bc 0f00 	cmp.w	ip, #0
    990e:	d115      	bne.n	993c <clock_async_start+0x8e>
	__asm__ volatile(
    9910:	f04f 0820 	mov.w	r8, #32
    9914:	f3ef 8911 	mrs	r9, BASEPRI
    9918:	f388 8811 	msr	BASEPRI, r8
    991c:	f3bf 8f6f 	isb	sy
	parent->next = child;
    9920:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    9924:	f8d3 8004 	ldr.w	r8, [r3, #4]
    9928:	f1b8 0f00 	cmp.w	r8, #0
    992c:	d11b      	bne.n	9966 <clock_async_start+0xb8>
	list->tail = node;
    992e:	605a      	str	r2, [r3, #4]
	list->head = node;
    9930:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    9934:	f389 8811 	msr	BASEPRI, r9
    9938:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    993c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9940:	2503      	movs	r5, #3
    9942:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
    9946:	f1bc 0f00 	cmp.w	ip, #0
    994a:	d002      	beq.n	9952 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
    994c:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    9950:	4798      	blx	r3
	if (ref == 1) {
    9952:	2c01      	cmp	r4, #1
    9954:	d105      	bne.n	9962 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    9956:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    995a:	78b3      	ldrb	r3, [r6, #2]
    995c:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    9960:	601c      	str	r4, [r3, #0]
	return 0;
    9962:	2000      	movs	r0, #0
    9964:	e005      	b.n	9972 <clock_async_start+0xc4>
	parent->next = child;
    9966:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    996a:	605a      	str	r2, [r3, #4]
}
    996c:	e7e2      	b.n	9934 <clock_async_start+0x86>
		return -EBUSY;
    996e:	f06f 000f 	mvn.w	r0, #15
}
    9972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009976 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    9976:	2200      	movs	r2, #0
    9978:	f7ff bf99 	b.w	98ae <clock_async_start>

0000997c <clk_init>:
{
    997c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    997e:	2200      	movs	r2, #0
{
    9980:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9982:	2101      	movs	r1, #1
    9984:	2005      	movs	r0, #5
    9986:	f7fa fc05 	bl	4194 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    998a:	2005      	movs	r0, #5
    998c:	f7fa fbf2 	bl	4174 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    9990:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9994:	2202      	movs	r2, #2
    9996:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    999a:	2203      	movs	r2, #3
	list->head = NULL;
    999c:	2000      	movs	r0, #0
    999e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    99a2:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    99a4:	e9c3 0000 	strd	r0, r0, [r3]
    99a8:	68e3      	ldr	r3, [r4, #12]
    99aa:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    99ae:	bd10      	pop	{r4, pc}

000099b0 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    99b0:	4770      	bx	lr

000099b2 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    99b2:	4770      	bx	lr

000099b4 <abort_function>:
	while(1);
    99b4:	e7fe      	b.n	99b4 <abort_function>

000099b6 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    99b6:	2100      	movs	r1, #0
    99b8:	2001      	movs	r0, #1
    99ba:	f7fa bc59 	b.w	4270 <z_arm_fatal_error>

000099be <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    99be:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    99c0:	6800      	ldr	r0, [r0, #0]
    99c2:	f7fa bc55 	b.w	4270 <z_arm_fatal_error>

000099c6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    99c6:	b508      	push	{r3, lr}
	handler();
    99c8:	f7fa fc9a 	bl	4300 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    99cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    99d0:	f7fa bff4 	b.w	49bc <z_arm_exc_exit>

000099d4 <mpu_configure_region>:
{
    99d4:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
    99d6:	890a      	ldrh	r2, [r1, #8]
    99d8:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    99da:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    99dc:	684c      	ldr	r4, [r1, #4]
    99de:	f002 021f 	and.w	r2, r2, #31
{
    99e2:	b085      	sub	sp, #20
    99e4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
    99e8:	9300      	str	r3, [sp, #0]
    99ea:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    99ee:	f023 031f 	bic.w	r3, r3, #31
    99f2:	1e62      	subs	r2, r4, #1
    99f4:	4413      	add	r3, r2
    99f6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    99fa:	280f      	cmp	r0, #15
    99fc:	4604      	mov	r4, r0
    99fe:	9303      	str	r3, [sp, #12]
    9a00:	d905      	bls.n	9a0e <mpu_configure_region+0x3a>
    9a02:	f7fb f871 	bl	4ae8 <region_allocate_and_init.part.0>
    9a06:	4604      	mov	r4, r0
}
    9a08:	4620      	mov	r0, r4
    9a0a:	b005      	add	sp, #20
    9a0c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    9a0e:	4669      	mov	r1, sp
    9a10:	f7fb f852 	bl	4ab8 <region_init>
	return region_allocate_and_init(index,
    9a14:	e7f8      	b.n	9a08 <mpu_configure_region+0x34>

00009a16 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    9a16:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    9a1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9a1e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    9a20:	bf08      	it	eq
    9a22:	f06f 0015 	mvneq.w	r0, #21
    9a26:	4770      	bx	lr

00009a28 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    9a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a2c:	4684      	mov	ip, r0
    9a2e:	4688      	mov	r8, r1
	register const char *s = nptr;
    9a30:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    9a32:	460c      	mov	r4, r1
    9a34:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    9a38:	2b20      	cmp	r3, #32
    9a3a:	d033      	beq.n	9aa4 <strtol+0x7c>
    9a3c:	f1a3 0009 	sub.w	r0, r3, #9
    9a40:	2804      	cmp	r0, #4
    9a42:	d92f      	bls.n	9aa4 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
    9a44:	2b2d      	cmp	r3, #45	; 0x2d
    9a46:	d12f      	bne.n	9aa8 <strtol+0x80>
		neg = 1;
		c = *s++;
    9a48:	784b      	ldrb	r3, [r1, #1]
    9a4a:	1c8c      	adds	r4, r1, #2
		neg = 1;
    9a4c:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    9a4e:	2a00      	cmp	r2, #0
    9a50:	d05c      	beq.n	9b0c <strtol+0xe4>
    9a52:	2a10      	cmp	r2, #16
    9a54:	d109      	bne.n	9a6a <strtol+0x42>
    9a56:	2b30      	cmp	r3, #48	; 0x30
    9a58:	d107      	bne.n	9a6a <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    9a5a:	7823      	ldrb	r3, [r4, #0]
    9a5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9a60:	2b58      	cmp	r3, #88	; 0x58
    9a62:	d14e      	bne.n	9b02 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
    9a64:	2210      	movs	r2, #16
		c = s[1];
    9a66:	7863      	ldrb	r3, [r4, #1]
		s += 2;
    9a68:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    9a6a:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    9a6c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    9a70:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
    9a72:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    9a76:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    9a78:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9a7c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    9a80:	2d09      	cmp	r5, #9
    9a82:	d817      	bhi.n	9ab4 <strtol+0x8c>
			c -= '0';
    9a84:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    9a86:	429a      	cmp	r2, r3
    9a88:	dd24      	ble.n	9ad4 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    9a8a:	1c75      	adds	r5, r6, #1
    9a8c:	d007      	beq.n	9a9e <strtol+0x76>
    9a8e:	4570      	cmp	r0, lr
    9a90:	d81d      	bhi.n	9ace <strtol+0xa6>
    9a92:	d101      	bne.n	9a98 <strtol+0x70>
    9a94:	454b      	cmp	r3, r9
    9a96:	dc1a      	bgt.n	9ace <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
    9a98:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
    9a9a:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
    9a9e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    9aa2:	e7eb      	b.n	9a7c <strtol+0x54>
{
    9aa4:	4621      	mov	r1, r4
    9aa6:	e7c4      	b.n	9a32 <strtol+0xa>
	} else if (c == '+') {
    9aa8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    9aaa:	bf04      	itt	eq
    9aac:	784b      	ldrbeq	r3, [r1, #1]
    9aae:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    9ab0:	2100      	movs	r1, #0
    9ab2:	e7cc      	b.n	9a4e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    9ab4:	f043 0520 	orr.w	r5, r3, #32
    9ab8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    9aba:	2d19      	cmp	r5, #25
    9abc:	d80a      	bhi.n	9ad4 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9abe:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    9ac2:	2d1a      	cmp	r5, #26
    9ac4:	bf34      	ite	cc
    9ac6:	2537      	movcc	r5, #55	; 0x37
    9ac8:	2557      	movcs	r5, #87	; 0x57
    9aca:	1b5b      	subs	r3, r3, r5
    9acc:	e7db      	b.n	9a86 <strtol+0x5e>
			any = -1;
    9ace:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9ad2:	e7e4      	b.n	9a9e <strtol+0x76>
		}
	}

	if (any < 0) {
    9ad4:	1c73      	adds	r3, r6, #1
    9ad6:	d109      	bne.n	9aec <strtol+0xc4>
    9ad8:	f7fc fc20 	bl	631c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    9adc:	2326      	movs	r3, #38	; 0x26
    9ade:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    9ae0:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    9ae2:	f1b8 0f00 	cmp.w	r8, #0
    9ae6:	d107      	bne.n	9af8 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    9ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    9aec:	b101      	cbz	r1, 9af0 <strtol+0xc8>
		acc = -acc;
    9aee:	4240      	negs	r0, r0
	if (endptr != NULL) {
    9af0:	f1b8 0f00 	cmp.w	r8, #0
    9af4:	d0f8      	beq.n	9ae8 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
    9af6:	b10e      	cbz	r6, 9afc <strtol+0xd4>
    9af8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    9afc:	f8c8 c000 	str.w	ip, [r8]
	return acc;
    9b00:	e7f2      	b.n	9ae8 <strtol+0xc0>
	if (base == 0) {
    9b02:	2330      	movs	r3, #48	; 0x30
    9b04:	2a00      	cmp	r2, #0
    9b06:	d1b0      	bne.n	9a6a <strtol+0x42>
		base = c == '0' ? 8 : 10;
    9b08:	2208      	movs	r2, #8
    9b0a:	e7ae      	b.n	9a6a <strtol+0x42>
	if ((base == 0 || base == 16) &&
    9b0c:	2b30      	cmp	r3, #48	; 0x30
    9b0e:	d0a4      	beq.n	9a5a <strtol+0x32>
		base = c == '0' ? 8 : 10;
    9b10:	220a      	movs	r2, #10
    9b12:	e7aa      	b.n	9a6a <strtol+0x42>

00009b14 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    9b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    9b18:	f891 8000 	ldrb.w	r8, [r1]
{
    9b1c:	4605      	mov	r5, r0
	if (c != 0) {
    9b1e:	f1b8 0f00 	cmp.w	r8, #0
    9b22:	d010      	beq.n	9b46 <strstr+0x32>
	c = *find++;
    9b24:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    9b26:	4620      	mov	r0, r4
    9b28:	f000 f83f 	bl	9baa <strlen>
    9b2c:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
    9b2e:	462e      	mov	r6, r5
    9b30:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    9b34:	b163      	cbz	r3, 9b50 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
    9b36:	4598      	cmp	r8, r3
    9b38:	d108      	bne.n	9b4c <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
    9b3a:	463a      	mov	r2, r7
    9b3c:	4621      	mov	r1, r4
    9b3e:	4630      	mov	r0, r6
    9b40:	f000 f846 	bl	9bd0 <strncmp>
    9b44:	b910      	cbnz	r0, 9b4c <strstr+0x38>
	s--;
	}
	return (char *)s;
}
    9b46:	4628      	mov	r0, r5
    9b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    9b4c:	4635      	mov	r5, r6
    9b4e:	e7ee      	b.n	9b2e <strstr+0x1a>
					return NULL;
    9b50:	461d      	mov	r5, r3
    9b52:	e7f8      	b.n	9b46 <strstr+0x32>

00009b54 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    9b54:	4603      	mov	r3, r0
    9b56:	3901      	subs	r1, #1
    9b58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    9b5c:	b90a      	cbnz	r2, 9b62 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    9b5e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    9b60:	4770      	bx	lr
		*d = *s;
    9b62:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    9b66:	e7f7      	b.n	9b58 <strcpy+0x4>

00009b68 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    9b68:	b570      	push	{r4, r5, r6, lr}
    9b6a:	4605      	mov	r5, r0
    9b6c:	3901      	subs	r1, #1
    9b6e:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    9b70:	b142      	cbz	r2, 9b84 <strncpy+0x1c>
    9b72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    9b76:	1e56      	subs	r6, r2, #1
    9b78:	b92b      	cbnz	r3, 9b86 <strncpy+0x1e>
    9b7a:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    9b7c:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    9b80:	42a2      	cmp	r2, r4
    9b82:	d1fb      	bne.n	9b7c <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    9b84:	bd70      	pop	{r4, r5, r6, pc}
		n--;
    9b86:	4632      	mov	r2, r6
		*d = *s;
    9b88:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    9b8c:	e7ef      	b.n	9b6e <strncpy+0x6>

00009b8e <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    9b8e:	4603      	mov	r3, r0
    9b90:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    9b92:	781a      	ldrb	r2, [r3, #0]
    9b94:	4618      	mov	r0, r3
    9b96:	428a      	cmp	r2, r1
    9b98:	f103 0301 	add.w	r3, r3, #1
    9b9c:	d004      	beq.n	9ba8 <strchr+0x1a>
    9b9e:	2a00      	cmp	r2, #0
    9ba0:	d1f7      	bne.n	9b92 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    9ba2:	2900      	cmp	r1, #0
    9ba4:	bf18      	it	ne
    9ba6:	2000      	movne	r0, #0
}
    9ba8:	4770      	bx	lr

00009baa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9baa:	4603      	mov	r3, r0
	size_t n = 0;
    9bac:	2000      	movs	r0, #0

	while (*s != '\0') {
    9bae:	5c1a      	ldrb	r2, [r3, r0]
    9bb0:	b902      	cbnz	r2, 9bb4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    9bb2:	4770      	bx	lr
		n++;
    9bb4:	3001      	adds	r0, #1
    9bb6:	e7fa      	b.n	9bae <strlen+0x4>

00009bb8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9bb8:	1e43      	subs	r3, r0, #1
    9bba:	3901      	subs	r1, #1
    9bbc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9bc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9bc4:	4282      	cmp	r2, r0
    9bc6:	d101      	bne.n	9bcc <strcmp+0x14>
    9bc8:	2a00      	cmp	r2, #0
    9bca:	d1f7      	bne.n	9bbc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9bcc:	1a10      	subs	r0, r2, r0
    9bce:	4770      	bx	lr

00009bd0 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    9bd0:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    9bd2:	2400      	movs	r4, #0
    9bd4:	42a2      	cmp	r2, r4
    9bd6:	d008      	beq.n	9bea <strncmp+0x1a>
    9bd8:	5d03      	ldrb	r3, [r0, r4]
    9bda:	5d0d      	ldrb	r5, [r1, r4]
    9bdc:	42ab      	cmp	r3, r5
    9bde:	d102      	bne.n	9be6 <strncmp+0x16>
    9be0:	3401      	adds	r4, #1
    9be2:	2b00      	cmp	r3, #0
    9be4:	d1f6      	bne.n	9bd4 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    9be6:	1b58      	subs	r0, r3, r5
    9be8:	e000      	b.n	9bec <strncmp+0x1c>
    9bea:	2000      	movs	r0, #0
}
    9bec:	bd30      	pop	{r4, r5, pc}

00009bee <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    9bee:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    9bf0:	b15a      	cbz	r2, 9c0a <memcmp+0x1c>
    9bf2:	3901      	subs	r1, #1
    9bf4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    9bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
    9bfa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    9bfe:	42a0      	cmp	r0, r4
    9c00:	d001      	beq.n	9c06 <memcmp+0x18>
    9c02:	429a      	cmp	r2, r3
    9c04:	d0f7      	beq.n	9bf6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    9c06:	1ad0      	subs	r0, r2, r3
}
    9c08:	bd10      	pop	{r4, pc}
		return 0;
    9c0a:	4610      	mov	r0, r2
    9c0c:	e7fc      	b.n	9c08 <memcmp+0x1a>

00009c0e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    9c0e:	1a43      	subs	r3, r0, r1
    9c10:	4293      	cmp	r3, r2
{
    9c12:	b510      	push	{r4, lr}
    9c14:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    9c18:	d308      	bcc.n	9c2c <memmove+0x1e>
	char *dest = d;
    9c1a:	4602      	mov	r2, r0
    9c1c:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    9c1e:	429a      	cmp	r2, r3
    9c20:	d00b      	beq.n	9c3a <memmove+0x2c>
			*dest = *src;
    9c22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    9c26:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    9c2a:	e7f8      	b.n	9c1e <memmove+0x10>
    9c2c:	440a      	add	r2, r1
			dest[n] = src[n];
    9c2e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    9c32:	428a      	cmp	r2, r1
			dest[n] = src[n];
    9c34:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    9c38:	d1f9      	bne.n	9c2e <memmove+0x20>
		}
	}

	return d;
}
    9c3a:	bd10      	pop	{r4, pc}

00009c3c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    9c3c:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    9c3e:	ea81 0400 	eor.w	r4, r1, r0
    9c42:	07a5      	lsls	r5, r4, #30
    9c44:	4603      	mov	r3, r0
    9c46:	d00b      	beq.n	9c60 <memcpy+0x24>
    9c48:	3b01      	subs	r3, #1
    9c4a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    9c4c:	4291      	cmp	r1, r2
    9c4e:	d11b      	bne.n	9c88 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    9c52:	2a00      	cmp	r2, #0
    9c54:	d0fc      	beq.n	9c50 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    9c56:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    9c5a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    9c5c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    9c60:	079c      	lsls	r4, r3, #30
    9c62:	d1f6      	bne.n	9c52 <memcpy+0x16>
    9c64:	f022 0403 	bic.w	r4, r2, #3
    9c68:	1f1d      	subs	r5, r3, #4
    9c6a:	0896      	lsrs	r6, r2, #2
    9c6c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    9c6e:	42b9      	cmp	r1, r7
    9c70:	d105      	bne.n	9c7e <memcpy+0x42>
    9c72:	f06f 0503 	mvn.w	r5, #3
    9c76:	4423      	add	r3, r4
    9c78:	fb05 2206 	mla	r2, r5, r6, r2
    9c7c:	e7e4      	b.n	9c48 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    9c7e:	f851 cb04 	ldr.w	ip, [r1], #4
    9c82:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    9c86:	e7f2      	b.n	9c6e <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    9c88:	f811 4b01 	ldrb.w	r4, [r1], #1
    9c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9c90:	e7dc      	b.n	9c4c <memcpy+0x10>

00009c92 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    9c92:	4603      	mov	r3, r0
{
    9c94:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    9c96:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    9c98:	079c      	lsls	r4, r3, #30
    9c9a:	d111      	bne.n	9cc0 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    9c9c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    9ca0:	f022 0603 	bic.w	r6, r2, #3
    9ca4:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    9ca8:	441e      	add	r6, r3
    9caa:	0894      	lsrs	r4, r2, #2
    9cac:	42b3      	cmp	r3, r6
    9cae:	d10d      	bne.n	9ccc <memset+0x3a>
    9cb0:	f06f 0503 	mvn.w	r5, #3
    9cb4:	fb05 2204 	mla	r2, r5, r4, r2
    9cb8:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    9cba:	4293      	cmp	r3, r2
    9cbc:	d109      	bne.n	9cd2 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9cbe:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    9cc0:	2a00      	cmp	r2, #0
    9cc2:	d0fc      	beq.n	9cbe <memset+0x2c>
		*(d_byte++) = c_byte;
    9cc4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9cc8:	3a01      	subs	r2, #1
    9cca:	e7e5      	b.n	9c98 <memset+0x6>
		*(d_word++) = c_word;
    9ccc:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    9cd0:	e7ec      	b.n	9cac <memset+0x1a>
		*(d_byte++) = c_byte;
    9cd2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9cd6:	e7f0      	b.n	9cba <memset+0x28>

00009cd8 <_to_x>:
{
    9cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cda:	4603      	mov	r3, r0
    9cdc:	4614      	mov	r4, r2
    9cde:	4602      	mov	r2, r0
		unsigned int d = n % base;
    9ce0:	fbb1 f0f4 	udiv	r0, r1, r4
    9ce4:	fb04 1510 	mls	r5, r4, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    9ce8:	2d09      	cmp	r5, #9
    9cea:	460f      	mov	r7, r1
    9cec:	bf8c      	ite	hi
    9cee:	2627      	movhi	r6, #39	; 0x27
    9cf0:	2600      	movls	r6, #0
		n /= base;
    9cf2:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    9cf4:	4610      	mov	r0, r2
    9cf6:	3530      	adds	r5, #48	; 0x30
    9cf8:	4435      	add	r5, r6
	} while (n);
    9cfa:	42a7      	cmp	r7, r4
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    9cfc:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
    9d00:	d205      	bcs.n	9d0e <_to_x+0x36>
	*buf = 0;
    9d02:	2100      	movs	r1, #0
    9d04:	7001      	strb	r1, [r0, #0]
	len = buf - start;
    9d06:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
    9d08:	429a      	cmp	r2, r3
    9d0a:	d802      	bhi.n	9d12 <_to_x+0x3a>
}
    9d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d0e:	4602      	mov	r2, r0
    9d10:	e7e6      	b.n	9ce0 <_to_x+0x8>
		char tmp = *buf;
    9d12:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
    9d14:	781c      	ldrb	r4, [r3, #0]
    9d16:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
    9d1a:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
    9d1e:	e7f3      	b.n	9d08 <_to_x+0x30>

00009d20 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
    9d20:	2100      	movs	r1, #0
{
    9d22:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    9d24:	e9d0 6500 	ldrd	r6, r5, [r0]
    9d28:	0872      	lsrs	r2, r6, #1
    9d2a:	f006 0301 	and.w	r3, r6, #1
    9d2e:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    9d32:	189b      	adds	r3, r3, r2
    9d34:	ea4f 0455 	mov.w	r4, r5, lsr #1
    9d38:	eb44 0101 	adc.w	r1, r4, r1
    9d3c:	e9c0 3100 	strd	r3, r1, [r0]
}
    9d40:	bd70      	pop	{r4, r5, r6, pc}

00009d42 <_ldiv5>:
{
    9d42:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t rem = *v, quot = 0U, q;
    9d44:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
    9d48:	2705      	movs	r7, #5
	rem += 2U;
    9d4a:	3302      	adds	r3, #2
    9d4c:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
    9d50:	fbb2 fef7 	udiv	lr, r2, r7
    9d54:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
    9d58:	fb07 f10e 	mul.w	r1, r7, lr
    9d5c:	ebb3 060c 	subs.w	r6, r3, ip
    9d60:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    9d64:	08f2      	lsrs	r2, r6, #3
    9d66:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    9d6a:	fbb2 f1f7 	udiv	r1, r2, r7
    9d6e:	00ca      	lsls	r2, r1, #3
		quot += q;
    9d70:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    9d74:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    9d78:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
    9d7c:	fba2 2307 	umull	r2, r3, r2, r7
    9d80:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    9d82:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    9d86:	18e4      	adds	r4, r4, r3
    9d88:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
    9d8c:	e9c0 4500 	strd	r4, r5, [r0]
}
    9d90:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009d92 <_get_digit>:
	if (*digit_count > 0) {
    9d92:	680b      	ldr	r3, [r1, #0]
{
    9d94:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    9d96:	2b00      	cmp	r3, #0
{
    9d98:	4604      	mov	r4, r0
	if (*digit_count > 0) {
    9d9a:	dd0f      	ble.n	9dbc <_get_digit+0x2a>
		*digit_count -= 1;
    9d9c:	3b01      	subs	r3, #1
    9d9e:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    9da0:	210a      	movs	r1, #10
    9da2:	6822      	ldr	r2, [r4, #0]
    9da4:	6840      	ldr	r0, [r0, #4]
    9da6:	fba2 5601 	umull	r5, r6, r2, r1
    9daa:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    9dae:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    9db2:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
    9db6:	0f30      	lsrs	r0, r6, #28
    9db8:	3030      	adds	r0, #48	; 0x30
}
    9dba:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    9dbc:	2030      	movs	r0, #48	; 0x30
    9dbe:	e7fc      	b.n	9dba <_get_digit+0x28>

00009dc0 <_stdout_hook_default>:
}
    9dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9dc4:	4770      	bx	lr

00009dc6 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    9dc6:	684b      	ldr	r3, [r1, #4]
    9dc8:	2b01      	cmp	r3, #1
    9dca:	dd07      	ble.n	9ddc <sprintf_out+0x16>
		*(p->ptr) = c;
    9dcc:	680b      	ldr	r3, [r1, #0]
    9dce:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    9dd0:	680b      	ldr	r3, [r1, #0]
    9dd2:	3301      	adds	r3, #1
    9dd4:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    9dd6:	684b      	ldr	r3, [r1, #4]
    9dd8:	3b01      	subs	r3, #1
    9dda:	604b      	str	r3, [r1, #4]
}
    9ddc:	2000      	movs	r0, #0
    9dde:	4770      	bx	lr

00009de0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9de0:	6843      	ldr	r3, [r0, #4]
}
    9de2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9de4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9de6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    9de8:	600b      	str	r3, [r1, #0]
}
    9dea:	4770      	bx	lr

00009dec <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9dec:	6843      	ldr	r3, [r0, #4]
    9dee:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9df0:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9df2:	4042      	eors	r2, r0
    9df4:	400a      	ands	r2, r1
    9df6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9df8:	605a      	str	r2, [r3, #4]
}
    9dfa:	2000      	movs	r0, #0
    9dfc:	4770      	bx	lr

00009dfe <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9dfe:	6843      	ldr	r3, [r0, #4]
}
    9e00:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e02:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    9e04:	6099      	str	r1, [r3, #8]
}
    9e06:	4770      	bx	lr

00009e08 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e08:	6843      	ldr	r3, [r0, #4]
}
    9e0a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e0c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    9e0e:	60d9      	str	r1, [r3, #12]
}
    9e10:	4770      	bx	lr

00009e12 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e12:	6843      	ldr	r3, [r0, #4]
}
    9e14:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e16:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9e18:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    9e1a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9e1c:	6053      	str	r3, [r2, #4]
}
    9e1e:	4770      	bx	lr

00009e20 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9e20:	68c3      	ldr	r3, [r0, #12]
{
    9e22:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    9e24:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    9e26:	b158      	cbz	r0, 9e40 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9e28:	2400      	movs	r4, #0
    9e2a:	4281      	cmp	r1, r0
    9e2c:	d113      	bne.n	9e56 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    9e2e:	6808      	ldr	r0, [r1, #0]
    9e30:	b95c      	cbnz	r4, 9e4a <gpio_nrfx_manage_callback+0x2a>
    9e32:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    9e34:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9e36:	42a1      	cmp	r1, r4
    9e38:	d100      	bne.n	9e3c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    9e3a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    9e3c:	2000      	movs	r0, #0
    9e3e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    9e40:	b972      	cbnz	r2, 9e60 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    9e42:	2000      	movs	r0, #0
}
    9e44:	bd30      	pop	{r4, r5, pc}
    9e46:	4628      	mov	r0, r5
    9e48:	e7ef      	b.n	9e2a <gpio_nrfx_manage_callback+0xa>
    9e4a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9e4c:	6898      	ldr	r0, [r3, #8]
    9e4e:	4281      	cmp	r1, r0
	list->tail = node;
    9e50:	bf08      	it	eq
    9e52:	609c      	streq	r4, [r3, #8]
}
    9e54:	e7f2      	b.n	9e3c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9e56:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9e58:	4604      	mov	r4, r0
    9e5a:	2d00      	cmp	r5, #0
    9e5c:	d1f3      	bne.n	9e46 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    9e5e:	b13a      	cbz	r2, 9e70 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    9e60:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    9e62:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    9e64:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    9e66:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    9e68:	2800      	cmp	r0, #0
    9e6a:	d1ea      	bne.n	9e42 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    9e6c:	6099      	str	r1, [r3, #8]
}
    9e6e:	e7e9      	b.n	9e44 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    9e70:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9e74:	e7e6      	b.n	9e44 <gpio_nrfx_manage_callback+0x24>

00009e76 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
    9e76:	2301      	movs	r3, #1
{
    9e78:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    9e7a:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    9e7c:	fa03 f201 	lsl.w	r2, r3, r1
    9e80:	6923      	ldr	r3, [r4, #16]
    9e82:	ea23 0302 	bic.w	r3, r3, r2
    9e86:	6123      	str	r3, [r4, #16]
}
    9e88:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    9e8a:	f7fb be61 	b.w	5b50 <gpiote_pin_int_cfg>

00009e8e <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
    9e8e:	2301      	movs	r3, #1
{
    9e90:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    9e92:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    9e94:	fa03 f201 	lsl.w	r2, r3, r1
    9e98:	6923      	ldr	r3, [r4, #16]
    9e9a:	4313      	orrs	r3, r2
    9e9c:	6123      	str	r3, [r4, #16]
}
    9e9e:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    9ea0:	f7fb be56 	b.w	5b50 <gpiote_pin_int_cfg>

00009ea4 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
    9ea4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    9ea6:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
    9ea8:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    9eaa:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
    9eac:	7b91      	ldrb	r1, [r2, #14]
    9eae:	b159      	cbz	r1, 9ec8 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9eb0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9eb4:	b141      	cbz	r1, 9ec8 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
    9eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
    9eba:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9ebe:	2101      	movs	r1, #1
    9ec0:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
    9ec2:	2300      	movs	r3, #0
    9ec4:	7393      	strb	r3, [r2, #14]
		return;
    9ec6:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ec8:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    9ecc:	b111      	cbz	r1, 9ed4 <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ece:	2100      	movs	r1, #0
    9ed0:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    9ed4:	6813      	ldr	r3, [r2, #0]
    9ed6:	b10b      	cbz	r3, 9edc <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
    9ed8:	6850      	ldr	r0, [r2, #4]
    9eda:	4718      	bx	r3
}
    9edc:	4770      	bx	lr

00009ede <uarte_nrfx_config_get>:
{
    9ede:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    9ee0:	68c2      	ldr	r2, [r0, #12]
    9ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
    9ee6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9eea:	2000      	movs	r0, #0
    9eec:	4770      	bx	lr

00009eee <uarte_nrfx_err_check>:
	return config->uarte_regs;
    9eee:	6843      	ldr	r3, [r0, #4]
    9ef0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9ef2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9ef6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9efa:	4770      	bx	lr

00009efc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9efc:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    9efe:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    9f00:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f02:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f06:	b138      	cbz	r0, 9f18 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
    9f08:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f0a:	2000      	movs	r0, #0
    9f0c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f0e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f10:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f14:	601a      	str	r2, [r3, #0]
	return 0;
    9f16:	4770      	bx	lr
		return -1;
    9f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9f1c:	4770      	bx	lr

00009f1e <uarte_nrfx_fifo_fill>:
{
    9f1e:	4603      	mov	r3, r0
	return config->uarte_regs;
    9f20:	6840      	ldr	r0, [r0, #4]
{
    9f22:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    9f24:	6804      	ldr	r4, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f26:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9f2a:	b190      	cbz	r0, 9f52 <uarte_nrfx_fifo_fill+0x34>
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9f2c:	68dd      	ldr	r5, [r3, #12]
	if (len > data->int_driven->tx_buff_size) {
    9f2e:	68ab      	ldr	r3, [r5, #8]
    9f30:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f32:	2300      	movs	r3, #0
    9f34:	4290      	cmp	r0, r2
    9f36:	bfa8      	it	ge
    9f38:	4610      	movge	r0, r2
    9f3a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
    9f3e:	68aa      	ldr	r2, [r5, #8]
    9f40:	4283      	cmp	r3, r0
    9f42:	6892      	ldr	r2, [r2, #8]
    9f44:	db06      	blt.n	9f54 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f46:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9f48:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9f4c:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f50:	60a3      	str	r3, [r4, #8]
}
    9f52:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    9f54:	5cce      	ldrb	r6, [r1, r3]
    9f56:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
    9f58:	3301      	adds	r3, #1
    9f5a:	e7f0      	b.n	9f3e <uarte_nrfx_fifo_fill+0x20>

00009f5c <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
    9f5c:	6842      	ldr	r2, [r0, #4]
{
    9f5e:	4603      	mov	r3, r0
	return config->uarte_regs;
    9f60:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f62:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f66:	b138      	cbz	r0, 9f78 <uarte_nrfx_fifo_read+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f68:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    9f6a:	68db      	ldr	r3, [r3, #12]
    9f6c:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f70:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
    9f72:	7c1b      	ldrb	r3, [r3, #16]
    9f74:	700b      	strb	r3, [r1, #0]
    9f76:	6010      	str	r0, [r2, #0]
}
    9f78:	4770      	bx	lr

00009f7a <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
    9f7a:	2100      	movs	r1, #0
    9f7c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    9f7e:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
    9f80:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    9f82:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
    9f84:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
    9f86:	f44f 7280 	mov.w	r2, #256	; 0x100
    9f8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9f8e:	4770      	bx	lr

00009f90 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    9f90:	2201      	movs	r2, #1
    9f92:	68c3      	ldr	r3, [r0, #12]
    9f94:	689b      	ldr	r3, [r3, #8]
    9f96:	739a      	strb	r2, [r3, #14]
}
    9f98:	4770      	bx	lr

00009f9a <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
    9f9a:	68c3      	ldr	r3, [r0, #12]
    9f9c:	689b      	ldr	r3, [r3, #8]
    9f9e:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    9fa0:	b94b      	cbnz	r3, 9fb6 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
    9fa2:	6843      	ldr	r3, [r0, #4]
    9fa4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9fa6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
    9faa:	b128      	cbz	r0, 9fb8 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
    9fac:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    9fb0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9fb4:	4770      	bx	lr
    9fb6:	2000      	movs	r0, #0
}
    9fb8:	4770      	bx	lr

00009fba <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    9fba:	6843      	ldr	r3, [r0, #4]
    9fbc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9fbe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    9fc2:	3800      	subs	r0, #0
    9fc4:	bf18      	it	ne
    9fc6:	2001      	movne	r0, #1
    9fc8:	4770      	bx	lr

00009fca <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    9fca:	2210      	movs	r2, #16
	return config->uarte_regs;
    9fcc:	6843      	ldr	r3, [r0, #4]
    9fce:	681b      	ldr	r3, [r3, #0]
    9fd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9fd4:	4770      	bx	lr

00009fd6 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    9fd6:	2210      	movs	r2, #16
	return config->uarte_regs;
    9fd8:	6843      	ldr	r3, [r0, #4]
    9fda:	681b      	ldr	r3, [r3, #0]
    9fdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9fe0:	4770      	bx	lr

00009fe2 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    9fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    9fe6:	6843      	ldr	r3, [r0, #4]
    9fe8:	681b      	ldr	r3, [r3, #0]
    9fea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9fee:	4770      	bx	lr

00009ff0 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    9ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    9ff4:	6843      	ldr	r3, [r0, #4]
    9ff6:	681b      	ldr	r3, [r3, #0]
    9ff8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9ffc:	4770      	bx	lr

00009ffe <uarte_nrfx_irq_update>:
}
    9ffe:	2001      	movs	r0, #1
    a000:	4770      	bx	lr

0000a002 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    a002:	68c3      	ldr	r3, [r0, #12]
    a004:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
    a006:	e9c3 1200 	strd	r1, r2, [r3]
}
    a00a:	4770      	bx	lr

0000a00c <uarte_nrfx_irq_is_pending>:
{
    a00c:	b508      	push	{r3, lr}
	return config->uarte_regs;
    a00e:	6843      	ldr	r3, [r0, #4]
{
    a010:	4602      	mov	r2, r0
	return config->uarte_regs;
    a012:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
    a014:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
    a018:	05db      	lsls	r3, r3, #23
    a01a:	d405      	bmi.n	a028 <uarte_nrfx_irq_is_pending+0x1c>
    a01c:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
    a020:	f010 0010 	ands.w	r0, r0, #16
    a024:	d106      	bne.n	a034 <uarte_nrfx_irq_is_pending+0x28>
}
    a026:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    a028:	f7ff ffb7 	bl	9f9a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
    a02c:	2800      	cmp	r0, #0
    a02e:	d0f5      	beq.n	a01c <uarte_nrfx_irq_is_pending+0x10>
		||
    a030:	2001      	movs	r0, #1
    a032:	e7f8      	b.n	a026 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    a034:	4610      	mov	r0, r2
    a036:	f7ff ffc0 	bl	9fba <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    a03a:	3800      	subs	r0, #0
    a03c:	bf18      	it	ne
    a03e:	2001      	movne	r0, #1
    a040:	e7f1      	b.n	a026 <uarte_nrfx_irq_is_pending+0x1a>

0000a042 <uarte_nrfx_poll_out>:
{
    a042:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    a046:	6843      	ldr	r3, [r0, #4]
{
    a048:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    a04c:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a04e:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    a050:	f000 f99c 	bl	a38c <k_is_in_isr>
    a054:	b9c0      	cbnz	r0, a088 <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
    a056:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a058:	f04f 0801 	mov.w	r8, #1
    a05c:	f106 070c 	add.w	r7, r6, #12
    a060:	e8d7 3fef 	ldaex	r3, [r7]
    a064:	2b00      	cmp	r3, #0
    a066:	d103      	bne.n	a070 <uarte_nrfx_poll_out+0x2e>
    a068:	e8c7 8fe2 	stlex	r2, r8, [r7]
    a06c:	2a00      	cmp	r2, #0
    a06e:	d1f7      	bne.n	a060 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    a070:	d00c      	beq.n	a08c <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
    a072:	2021      	movs	r0, #33	; 0x21
    a074:	2100      	movs	r1, #0
    a076:	3d01      	subs	r5, #1
    a078:	f7fc ffd4 	bl	7024 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    a07c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    a080:	d1ee      	bne.n	a060 <uarte_nrfx_poll_out+0x1e>
}
    a082:	b002      	add	sp, #8
    a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    a088:	2301      	movs	r3, #1
    a08a:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a08c:	2300      	movs	r3, #0
    a08e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a092:	f10d 0307 	add.w	r3, sp, #7
    a096:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a09a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a09c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    a0a0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a0a4:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a0a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    a0aa:	b923      	cbnz	r3, a0b6 <uarte_nrfx_poll_out+0x74>
    a0ac:	2001      	movs	r0, #1
    a0ae:	f000 f810 	bl	a0d2 <nrfx_busy_wait>
    a0b2:	3d01      	subs	r5, #1
    a0b4:	d1f7      	bne.n	a0a6 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a0b6:	2301      	movs	r3, #1
    a0b8:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    a0ba:	2300      	movs	r3, #0
    a0bc:	60f3      	str	r3, [r6, #12]
    a0be:	e7e0      	b.n	a082 <uarte_nrfx_poll_out+0x40>

0000a0c0 <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
    a0c0:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    a0c2:	f7f9 ff6b 	bl	3f9c <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    a0c6:	f7f9 ffed 	bl	40a4 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    a0ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    a0ce:	f7fd bbb1 	b.w	7834 <nrf_cc310_platform_init_no_rng>

0000a0d2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    a0d2:	f000 b961 	b.w	a398 <z_impl_k_busy_wait>

0000a0d6 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    a0d6:	f7ff bc6c 	b.w	99b2 <z_clock_idle_exit>

0000a0da <k_mem_slab_init>:
{
    a0da:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    a0dc:	2400      	movs	r4, #0
    a0de:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a0e0:	ea41 0402 	orr.w	r4, r1, r2
    a0e4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    a0e8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    a0ec:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a0ee:	d10c      	bne.n	a10a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    a0f0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a0f2:	42a3      	cmp	r3, r4
    a0f4:	d103      	bne.n	a0fe <k_mem_slab_init+0x24>
    a0f6:	e9c0 0000 	strd	r0, r0, [r0]
}
    a0fa:	2000      	movs	r0, #0
}
    a0fc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    a0fe:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a100:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    a102:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    a104:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    a106:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    a108:	e7f3      	b.n	a0f2 <k_mem_slab_init+0x18>
		return -EINVAL;
    a10a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    a10e:	e7f5      	b.n	a0fc <k_mem_slab_init+0x22>

0000a110 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
    a110:	4603      	mov	r3, r0
    a112:	b510      	push	{r4, lr}
    a114:	4608      	mov	r0, r1
	__asm__ volatile(
    a116:	f04f 0220 	mov.w	r2, #32
    a11a:	f3ef 8411 	mrs	r4, BASEPRI
    a11e:	f382 8811 	msr	BASEPRI, r2
    a122:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0) {
    a126:	6a1a      	ldr	r2, [r3, #32]
    a128:	b14a      	cbz	r2, a13e <z_impl_k_msgq_peek+0x2e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    a12a:	689a      	ldr	r2, [r3, #8]
    a12c:	6999      	ldr	r1, [r3, #24]
    a12e:	f7ff fd85 	bl	9c3c <memcpy>
		result = 0;
    a132:	2000      	movs	r0, #0
	__asm__ volatile(
    a134:	f384 8811 	msr	BASEPRI, r4
    a138:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    a13c:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
    a13e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
    a142:	e7f7      	b.n	a134 <z_impl_k_msgq_peek+0x24>

0000a144 <z_impl_k_mutex_init>:
{
    a144:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a146:	2000      	movs	r0, #0
    a148:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    a14c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    a150:	4770      	bx	lr

0000a152 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    a152:	f990 000e 	ldrsb.w	r0, [r0, #14]
    a156:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    a15a:	4298      	cmp	r0, r3
    a15c:	bfac      	ite	ge
    a15e:	2000      	movge	r0, #0
    a160:	2001      	movlt	r0, #1
    a162:	4770      	bx	lr

0000a164 <z_find_first_thread_to_unpend>:
{
    a164:	b510      	push	{r4, lr}
	__asm__ volatile(
    a166:	f04f 0320 	mov.w	r3, #32
    a16a:	f3ef 8411 	mrs	r4, BASEPRI
    a16e:	f383 8811 	msr	BASEPRI, r3
    a172:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    a176:	f000 f85c 	bl	a232 <z_priq_dumb_best>
	__asm__ volatile(
    a17a:	f384 8811 	msr	BASEPRI, r4
    a17e:	f3bf 8f6f 	isb	sy
}
    a182:	bd10      	pop	{r4, pc}

0000a184 <z_unpend_thread_no_timeout>:
{
    a184:	b538      	push	{r3, r4, r5, lr}
    a186:	4604      	mov	r4, r0
	__asm__ volatile(
    a188:	f04f 0320 	mov.w	r3, #32
    a18c:	f3ef 8511 	mrs	r5, BASEPRI
    a190:	f383 8811 	msr	BASEPRI, r3
    a194:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a198:	4601      	mov	r1, r0
    a19a:	6880      	ldr	r0, [r0, #8]
    a19c:	f7fc fc6c 	bl	6a78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a1a0:	7b63      	ldrb	r3, [r4, #13]
    a1a2:	f023 0302 	bic.w	r3, r3, #2
    a1a6:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    a1a8:	2300      	movs	r3, #0
    a1aa:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    a1ac:	f385 8811 	msr	BASEPRI, r5
    a1b0:	f3bf 8f6f 	isb	sy
}
    a1b4:	bd38      	pop	{r3, r4, r5, pc}

0000a1b6 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a1b6:	b921      	cbnz	r1, a1c2 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a1b8:	f3ef 8005 	mrs	r0, IPSR
    a1bc:	b908      	cbnz	r0, a1c2 <z_reschedule+0xc>
    a1be:	f7f9 bf87 	b.w	40d0 <arch_swap>
    a1c2:	f381 8811 	msr	BASEPRI, r1
    a1c6:	f3bf 8f6f 	isb	sy
}
    a1ca:	4770      	bx	lr

0000a1cc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a1cc:	4603      	mov	r3, r0
    a1ce:	b920      	cbnz	r0, a1da <z_reschedule_irqlock+0xe>
    a1d0:	f3ef 8205 	mrs	r2, IPSR
    a1d4:	b90a      	cbnz	r2, a1da <z_reschedule_irqlock+0xe>
    a1d6:	f7f9 bf7b 	b.w	40d0 <arch_swap>
    a1da:	f383 8811 	msr	BASEPRI, r3
    a1de:	f3bf 8f6f 	isb	sy
}
    a1e2:	4770      	bx	lr

0000a1e4 <z_reschedule_unlocked>:
	__asm__ volatile(
    a1e4:	f04f 0320 	mov.w	r3, #32
    a1e8:	f3ef 8011 	mrs	r0, BASEPRI
    a1ec:	f383 8811 	msr	BASEPRI, r3
    a1f0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a1f4:	f7ff bfea 	b.w	a1cc <z_reschedule_irqlock>

0000a1f8 <z_unpend_thread>:
{
    a1f8:	b510      	push	{r4, lr}
    a1fa:	4601      	mov	r1, r0
    a1fc:	f04f 0320 	mov.w	r3, #32
    a200:	f3ef 8411 	mrs	r4, BASEPRI
    a204:	f383 8811 	msr	BASEPRI, r3
    a208:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a20c:	6880      	ldr	r0, [r0, #8]
    a20e:	f7fc fc33 	bl	6a78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a212:	7b4b      	ldrb	r3, [r1, #13]
    a214:	f023 0302 	bic.w	r3, r3, #2
    a218:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
    a21a:	2300      	movs	r3, #0
    a21c:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
    a21e:	f384 8811 	msr	BASEPRI, r4
    a222:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    a226:	f101 0018 	add.w	r0, r1, #24
}
    a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a22e:	f000 b8c5 	b.w	a3bc <z_abort_timeout>

0000a232 <z_priq_dumb_best>:
{
    a232:	4603      	mov	r3, r0
	return list->head == list;
    a234:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a236:	4283      	cmp	r3, r0
    a238:	d003      	beq.n	a242 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    a23a:	2800      	cmp	r0, #0
    a23c:	bf38      	it	cc
    a23e:	2000      	movcc	r0, #0
    a240:	4770      	bx	lr
	struct k_thread *thread = NULL;
    a242:	2000      	movs	r0, #0
}
    a244:	4770      	bx	lr

0000a246 <z_ready_thread>:
{
    a246:	b510      	push	{r4, lr}
	__asm__ volatile(
    a248:	f04f 0320 	mov.w	r3, #32
    a24c:	f3ef 8411 	mrs	r4, BASEPRI
    a250:	f383 8811 	msr	BASEPRI, r3
    a254:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    a258:	f7fc fc64 	bl	6b24 <ready_thread>
	__asm__ volatile(
    a25c:	f384 8811 	msr	BASEPRI, r4
    a260:	f3bf 8f6f 	isb	sy
}
    a264:	bd10      	pop	{r4, pc}

0000a266 <z_thread_timeout>:
{
    a266:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    a268:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    a26c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    a26e:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    a272:	b1c3      	cbz	r3, a2a6 <z_thread_timeout+0x40>
	__asm__ volatile(
    a274:	f04f 0320 	mov.w	r3, #32
    a278:	f3ef 8511 	mrs	r5, BASEPRI
    a27c:	f383 8811 	msr	BASEPRI, r3
    a280:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a284:	f850 0c10 	ldr.w	r0, [r0, #-16]
    a288:	f7fc fbf6 	bl	6a78 <z_priq_dumb_remove>
    a28c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    a290:	f023 0302 	bic.w	r3, r3, #2
    a294:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    a298:	2300      	movs	r3, #0
    a29a:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    a29e:	f385 8811 	msr	BASEPRI, r5
    a2a2:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a2a6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    a2aa:	4608      	mov	r0, r1
    a2ac:	f023 0314 	bic.w	r3, r3, #20
    a2b0:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    a2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    a2b8:	f7ff bfc5 	b.w	a246 <z_ready_thread>

0000a2bc <z_remove_thread_from_ready_q>:
{
    a2bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    a2be:	f04f 0320 	mov.w	r3, #32
    a2c2:	f3ef 8411 	mrs	r4, BASEPRI
    a2c6:	f383 8811 	msr	BASEPRI, r3
    a2ca:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    a2ce:	f7fc fd89 	bl	6de4 <unready_thread>
	__asm__ volatile(
    a2d2:	f384 8811 	msr	BASEPRI, r4
    a2d6:	f3bf 8f6f 	isb	sy
}
    a2da:	bd10      	pop	{r4, pc}

0000a2dc <add_to_waitq_locked>:
{
    a2dc:	b538      	push	{r3, r4, r5, lr}
    a2de:	4604      	mov	r4, r0
    a2e0:	460d      	mov	r5, r1
	unready_thread(thread);
    a2e2:	f7fc fd7f 	bl	6de4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a2e6:	7b63      	ldrb	r3, [r4, #13]
    a2e8:	f043 0302 	orr.w	r3, r3, #2
    a2ec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    a2ee:	b1c5      	cbz	r5, a322 <add_to_waitq_locked+0x46>
	return list->head == list;
    a2f0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    a2f2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a2f4:	429d      	cmp	r5, r3
    a2f6:	bf08      	it	eq
    a2f8:	2300      	moveq	r3, #0
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	bf38      	it	cc
    a2fe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a300:	b183      	cbz	r3, a324 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    a302:	f994 100e 	ldrsb.w	r1, [r4, #14]
    a306:	f993 200e 	ldrsb.w	r2, [r3, #14]
    a30a:	4291      	cmp	r1, r2
    a30c:	db04      	blt.n	a318 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    a30e:	686a      	ldr	r2, [r5, #4]
    a310:	429a      	cmp	r2, r3
    a312:	d007      	beq.n	a324 <add_to_waitq_locked+0x48>
    a314:	681b      	ldr	r3, [r3, #0]
    a316:	e7f3      	b.n	a300 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    a318:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a31a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    a31e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a320:	605c      	str	r4, [r3, #4]
}
    a322:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    a324:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    a326:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    a328:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    a32a:	686b      	ldr	r3, [r5, #4]
    a32c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a32e:	606c      	str	r4, [r5, #4]
    a330:	e7f7      	b.n	a322 <add_to_waitq_locked+0x46>

0000a332 <z_unpend_first_thread>:
{
    a332:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a334:	f04f 0320 	mov.w	r3, #32
    a338:	f3ef 8211 	mrs	r2, BASEPRI
    a33c:	f383 8811 	msr	BASEPRI, r3
    a340:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    a344:	f7ff ff75 	bl	a232 <z_priq_dumb_best>
    a348:	4604      	mov	r4, r0
	__asm__ volatile(
    a34a:	f382 8811 	msr	BASEPRI, r2
    a34e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    a352:	b1c8      	cbz	r0, a388 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    a354:	f04f 0320 	mov.w	r3, #32
    a358:	f3ef 8511 	mrs	r5, BASEPRI
    a35c:	f383 8811 	msr	BASEPRI, r3
    a360:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    a364:	4601      	mov	r1, r0
    a366:	6880      	ldr	r0, [r0, #8]
    a368:	f7fc fb86 	bl	6a78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a36c:	7b63      	ldrb	r3, [r4, #13]
    a36e:	f023 0302 	bic.w	r3, r3, #2
    a372:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    a374:	2300      	movs	r3, #0
    a376:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    a378:	f385 8811 	msr	BASEPRI, r5
    a37c:	f3bf 8f6f 	isb	sy
    a380:	f104 0018 	add.w	r0, r4, #24
    a384:	f000 f81a 	bl	a3bc <z_abort_timeout>
}
    a388:	4620      	mov	r0, r4
    a38a:	bd38      	pop	{r3, r4, r5, pc}

0000a38c <k_is_in_isr>:
    a38c:	f3ef 8005 	mrs	r0, IPSR
}
    a390:	3800      	subs	r0, #0
    a392:	bf18      	it	ne
    a394:	2001      	movne	r0, #1
    a396:	4770      	bx	lr

0000a398 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    a398:	f7f6 be9e 	b.w	10d8 <arch_busy_wait>

0000a39c <k_thread_name_get>:
}
    a39c:	3070      	adds	r0, #112	; 0x70
    a39e:	4770      	bx	lr

0000a3a0 <z_impl_k_thread_stack_space_get>:
int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
	const u8_t *start = (u8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
	size_t unused = 0;
    a3a0:	2300      	movs	r3, #0
{
    a3a2:	b510      	push	{r4, lr}
	size_t size = thread->stack_info.size;
    a3a4:	e9d0 4225 	ldrd	r4, r2, [r0, #148]	; 0x94
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    a3a8:	4293      	cmp	r3, r2
    a3aa:	d102      	bne.n	a3b2 <z_impl_k_thread_stack_space_get+0x12>
	}

	*unused_ptr = unused;

	return 0;
}
    a3ac:	2000      	movs	r0, #0
	*unused_ptr = unused;
    a3ae:	600b      	str	r3, [r1, #0]
}
    a3b0:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    a3b2:	5ce0      	ldrb	r0, [r4, r3]
    a3b4:	28aa      	cmp	r0, #170	; 0xaa
    a3b6:	d1f9      	bne.n	a3ac <z_impl_k_thread_stack_space_get+0xc>
			unused++;
    a3b8:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    a3ba:	e7f5      	b.n	a3a8 <z_impl_k_thread_stack_space_get+0x8>

0000a3bc <z_abort_timeout>:
{
    a3bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    a3be:	f04f 0220 	mov.w	r2, #32
    a3c2:	f3ef 8411 	mrs	r4, BASEPRI
    a3c6:	f382 8811 	msr	BASEPRI, r2
    a3ca:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    a3ce:	6803      	ldr	r3, [r0, #0]
    a3d0:	b13b      	cbz	r3, a3e2 <z_abort_timeout+0x26>
			remove_timeout(to);
    a3d2:	f7fd f809 	bl	73e8 <remove_timeout>
			ret = 0;
    a3d6:	2000      	movs	r0, #0
	__asm__ volatile(
    a3d8:	f384 8811 	msr	BASEPRI, r4
    a3dc:	f3bf 8f6f 	isb	sy
}
    a3e0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    a3e2:	f06f 0015 	mvn.w	r0, #21
    a3e6:	e7f7      	b.n	a3d8 <z_abort_timeout+0x1c>

0000a3e8 <z_get_next_timeout_expiry>:
{
    a3e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    a3ea:	f04f 0320 	mov.w	r3, #32
    a3ee:	f3ef 8411 	mrs	r4, BASEPRI
    a3f2:	f383 8811 	msr	BASEPRI, r3
    a3f6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    a3fa:	f7fd f809 	bl	7410 <next_timeout>
	__asm__ volatile(
    a3fe:	f384 8811 	msr	BASEPRI, r4
    a402:	f3bf 8f6f 	isb	sy
}
    a406:	bd10      	pop	{r4, pc}

0000a408 <z_set_timeout_expiry>:
{
    a408:	b570      	push	{r4, r5, r6, lr}
    a40a:	4604      	mov	r4, r0
    a40c:	460d      	mov	r5, r1
	__asm__ volatile(
    a40e:	f04f 0320 	mov.w	r3, #32
    a412:	f3ef 8611 	mrs	r6, BASEPRI
    a416:	f383 8811 	msr	BASEPRI, r3
    a41a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    a41e:	f7fc fff7 	bl	7410 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    a422:	2801      	cmp	r0, #1
    a424:	dd05      	ble.n	a432 <z_set_timeout_expiry+0x2a>
    a426:	42a0      	cmp	r0, r4
    a428:	dd03      	ble.n	a432 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    a42a:	4629      	mov	r1, r5
    a42c:	4620      	mov	r0, r4
    a42e:	f7f9 fd1d 	bl	3e6c <z_clock_set_timeout>
	__asm__ volatile(
    a432:	f386 8811 	msr	BASEPRI, r6
    a436:	f3bf 8f6f 	isb	sy
}
    a43a:	bd70      	pop	{r4, r5, r6, pc}

0000a43c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    a43c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    a43e:	f7fd f8d1 	bl	75e4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    a442:	bd08      	pop	{r3, pc}

0000a444 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
    a444:	f7fd b8ce 	b.w	75e4 <z_tick_get>

0000a448 <k_timer_init>:
	timer->status = 0U;
    a448:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    a44a:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
    a44e:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
    a452:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    a456:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    a45a:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
    a45c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    a45e:	4770      	bx	lr

0000a460 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    a460:	b510      	push	{r4, lr}
    a462:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    a464:	f7ff ffaa 	bl	a3bc <z_abort_timeout>

	if (inactive) {
    a468:	b9d8      	cbnz	r0, a4a2 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    a46a:	69e3      	ldr	r3, [r4, #28]
    a46c:	b10b      	cbz	r3, a472 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    a46e:	4620      	mov	r0, r4
    a470:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    a472:	f104 0010 	add.w	r0, r4, #16
    a476:	2100      	movs	r1, #0
    a478:	f7ff fe74 	bl	a164 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    a47c:	4604      	mov	r4, r0
    a47e:	b180      	cbz	r0, a4a2 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    a480:	f7ff fe80 	bl	a184 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    a484:	4620      	mov	r0, r4
    a486:	f7ff fede 	bl	a246 <z_ready_thread>
	__asm__ volatile(
    a48a:	f04f 0320 	mov.w	r3, #32
    a48e:	f3ef 8011 	mrs	r0, BASEPRI
    a492:	f383 8811 	msr	BASEPRI, r3
    a496:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    a49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    a49e:	f7ff be95 	b.w	a1cc <z_reschedule_irqlock>
    a4a2:	bd10      	pop	{r4, pc}

0000a4a4 <clear_event_registrations>:
	while (num_events--) {
    a4a4:	2314      	movs	r3, #20
{
    a4a6:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
    a4a8:	2400      	movs	r4, #0
    a4aa:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
    a4ae:	4281      	cmp	r1, r0
    a4b0:	d100      	bne.n	a4b4 <clear_event_registrations+0x10>
}
    a4b2:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
    a4b4:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
    a4b8:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
    a4bc:	f003 030f 	and.w	r3, r3, #15
    a4c0:	2b02      	cmp	r3, #2
    a4c2:	d80a      	bhi.n	a4da <clear_event_registrations+0x36>
    a4c4:	b15b      	cbz	r3, a4de <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
    a4c6:	f851 3c14 	ldr.w	r3, [r1, #-20]
    a4ca:	b143      	cbz	r3, a4de <clear_event_registrations+0x3a>
	node->prev->next = node->next;
    a4cc:	f851 5c10 	ldr.w	r5, [r1, #-16]
    a4d0:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
    a4d2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    a4d4:	e941 4405 	strd	r4, r4, [r1, #-20]
}
    a4d8:	e001      	b.n	a4de <clear_event_registrations+0x3a>
	switch (event->type) {
    a4da:	2b04      	cmp	r3, #4
    a4dc:	d0f3      	beq.n	a4c6 <clear_event_registrations+0x22>
	__asm__ volatile(
    a4de:	f382 8811 	msr	BASEPRI, r2
    a4e2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    a4e6:	f04f 0320 	mov.w	r3, #32
    a4ea:	f3ef 8211 	mrs	r2, BASEPRI
    a4ee:	f383 8811 	msr	BASEPRI, r3
    a4f2:	f3bf 8f6f 	isb	sy
    a4f6:	3914      	subs	r1, #20
    a4f8:	e7d9      	b.n	a4ae <clear_event_registrations+0xa>

0000a4fa <signal_poll_event>:
{
    a4fa:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
    a4fc:	6884      	ldr	r4, [r0, #8]
{
    a4fe:	4605      	mov	r5, r0
    a500:	460e      	mov	r6, r1
	if (poller) {
    a502:	b19c      	cbz	r4, a52c <signal_poll_event+0x32>
		if (poller->cb != NULL) {
    a504:	68a3      	ldr	r3, [r4, #8]
    a506:	b95b      	cbnz	r3, a520 <signal_poll_event+0x26>
	int retcode = 0;
    a508:	4618      	mov	r0, r3
		poller->is_polling = false;
    a50a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    a50c:	2300      	movs	r3, #0
    a50e:	60ab      	str	r3, [r5, #8]
	event->state |= state;
    a510:	68eb      	ldr	r3, [r5, #12]
    a512:	f3c3 3104 	ubfx	r1, r3, #12, #5
    a516:	430e      	orrs	r6, r1
    a518:	f366 3310 	bfi	r3, r6, #12, #5
    a51c:	60eb      	str	r3, [r5, #12]
	return retcode;
    a51e:	e004      	b.n	a52a <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
    a520:	4798      	blx	r3
		poller->is_polling = false;
    a522:	2300      	movs	r3, #0
		if (retcode < 0) {
    a524:	2800      	cmp	r0, #0
		poller->is_polling = false;
    a526:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
    a528:	daf0      	bge.n	a50c <signal_poll_event+0x12>
}
    a52a:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
    a52c:	4620      	mov	r0, r4
    a52e:	e7ed      	b.n	a50c <signal_poll_event+0x12>

0000a530 <k_poll_poller_cb>:
{
    a530:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
    a532:	6883      	ldr	r3, [r0, #8]
{
    a534:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
    a536:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
    a538:	7b63      	ldrb	r3, [r4, #13]
    a53a:	079a      	lsls	r2, r3, #30
    a53c:	d50f      	bpl.n	a55e <k_poll_poller_cb+0x2e>
	if (z_is_thread_timeout_expired(thread)) {
    a53e:	6a23      	ldr	r3, [r4, #32]
    a540:	3302      	adds	r3, #2
    a542:	d015      	beq.n	a570 <k_poll_poller_cb+0x40>
	z_unpend_thread(thread);
    a544:	4620      	mov	r0, r4
    a546:	f7ff fe57 	bl	a1f8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    a54a:	2d08      	cmp	r5, #8
    a54c:	bf0c      	ite	eq
    a54e:	f06f 0303 	mvneq.w	r3, #3
    a552:	2300      	movne	r3, #0
    a554:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    a558:	7b63      	ldrb	r3, [r4, #13]
    a55a:	06db      	lsls	r3, r3, #27
    a55c:	d001      	beq.n	a562 <k_poll_poller_cb+0x32>
		return 0;
    a55e:	2000      	movs	r0, #0
}
    a560:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
    a562:	69a5      	ldr	r5, [r4, #24]
    a564:	2d00      	cmp	r5, #0
    a566:	d1fa      	bne.n	a55e <k_poll_poller_cb+0x2e>
	z_ready_thread(thread);
    a568:	4620      	mov	r0, r4
    a56a:	f7ff fe6c 	bl	a246 <z_ready_thread>
	return 0;
    a56e:	e7f6      	b.n	a55e <k_poll_poller_cb+0x2e>
		return -EAGAIN;
    a570:	f06f 000a 	mvn.w	r0, #10
    a574:	e7f4      	b.n	a560 <k_poll_poller_cb+0x30>

0000a576 <add_event>:
{
    a576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a578:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    a57a:	e9d0 2300 	ldrd	r2, r3, [r0]
    a57e:	4290      	cmp	r0, r2
    a580:	4604      	mov	r4, r0
    a582:	460d      	mov	r5, r1
    a584:	d106      	bne.n	a594 <add_event+0x1e>
	node->prev = list->tail;
    a586:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    a588:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
    a58a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    a58c:	6863      	ldr	r3, [r4, #4]
    a58e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a590:	6065      	str	r5, [r4, #4]
}
    a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    a594:	2b00      	cmp	r3, #0
    a596:	d0f6      	beq.n	a586 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
    a598:	689b      	ldr	r3, [r3, #8]
    a59a:	6879      	ldr	r1, [r7, #4]
    a59c:	6858      	ldr	r0, [r3, #4]
    a59e:	f7ff fdd8 	bl	a152 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    a5a2:	2800      	cmp	r0, #0
    a5a4:	d1ef      	bne.n	a586 <add_event+0x10>
	return list->head == list;
    a5a6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a5a8:	42b4      	cmp	r4, r6
    a5aa:	d0ec      	beq.n	a586 <add_event+0x10>
    a5ac:	2e00      	cmp	r6, #0
    a5ae:	bf38      	it	cc
    a5b0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    a5b2:	2e00      	cmp	r6, #0
    a5b4:	d0e7      	beq.n	a586 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
    a5b6:	68b3      	ldr	r3, [r6, #8]
    a5b8:	6878      	ldr	r0, [r7, #4]
    a5ba:	6859      	ldr	r1, [r3, #4]
    a5bc:	f7ff fdc9 	bl	a152 <z_is_t1_higher_prio_than_t2>
    a5c0:	b128      	cbz	r0, a5ce <add_event+0x58>
	node->prev = successor->prev;
    a5c2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    a5c4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
    a5c8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a5ca:	6075      	str	r5, [r6, #4]
			return;
    a5cc:	e7e1      	b.n	a592 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
    a5ce:	6863      	ldr	r3, [r4, #4]
    a5d0:	42b3      	cmp	r3, r6
    a5d2:	d0d8      	beq.n	a586 <add_event+0x10>
    a5d4:	6836      	ldr	r6, [r6, #0]
    a5d6:	e7ec      	b.n	a5b2 <add_event+0x3c>

0000a5d8 <register_events>:
{
    a5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    a5dc:	f04f 0a00 	mov.w	sl, #0
{
    a5e0:	460e      	mov	r6, r1
    a5e2:	4614      	mov	r4, r2
    a5e4:	461f      	mov	r7, r3
    a5e6:	4683      	mov	fp, r0
	int events_registered = 0;
    a5e8:	4655      	mov	r5, sl
	event->poller = NULL;
    a5ea:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
    a5ec:	45b2      	cmp	sl, r6
    a5ee:	db02      	blt.n	a5f6 <register_events+0x1e>
}
    a5f0:	4628      	mov	r0, r5
    a5f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5f6:	f04f 0320 	mov.w	r3, #32
    a5fa:	f3ef 8911 	mrs	r9, BASEPRI
    a5fe:	f383 8811 	msr	BASEPRI, r3
    a602:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    a606:	f89b 200d 	ldrb.w	r2, [fp, #13]
    a60a:	f002 020f 	and.w	r2, r2, #15
    a60e:	2a02      	cmp	r2, #2
    a610:	d006      	beq.n	a620 <register_events+0x48>
    a612:	2a04      	cmp	r2, #4
    a614:	d008      	beq.n	a628 <register_events+0x50>
    a616:	2a01      	cmp	r2, #1
    a618:	d120      	bne.n	a65c <register_events+0x84>
		if (event->signal->signaled != 0U) {
    a61a:	f8db 3010 	ldr.w	r3, [fp, #16]
    a61e:	e001      	b.n	a624 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
    a620:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
    a624:	689b      	ldr	r3, [r3, #8]
    a626:	e002      	b.n	a62e <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
    a628:	f8db 3010 	ldr.w	r3, [fp, #16]
    a62c:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
    a62e:	b1ab      	cbz	r3, a65c <register_events+0x84>
	event->state |= state;
    a630:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
    a634:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
    a638:	f3c3 3104 	ubfx	r1, r3, #12, #5
    a63c:	430a      	orrs	r2, r1
    a63e:	f362 3310 	bfi	r3, r2, #12, #5
    a642:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
    a646:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    a64a:	f389 8811 	msr	BASEPRI, r9
    a64e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    a652:	f10a 0a01 	add.w	sl, sl, #1
    a656:	f10b 0b14 	add.w	fp, fp, #20
    a65a:	e7c7      	b.n	a5ec <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
    a65c:	2f00      	cmp	r7, #0
    a65e:	d1f4      	bne.n	a64a <register_events+0x72>
    a660:	7823      	ldrb	r3, [r4, #0]
    a662:	2b00      	cmp	r3, #0
    a664:	d0f1      	beq.n	a64a <register_events+0x72>
	switch (event->type) {
    a666:	f89b 300d 	ldrb.w	r3, [fp, #13]
    a66a:	f003 030f 	and.w	r3, r3, #15
    a66e:	2b02      	cmp	r3, #2
    a670:	d008      	beq.n	a684 <register_events+0xac>
    a672:	2b04      	cmp	r3, #4
    a674:	d006      	beq.n	a684 <register_events+0xac>
    a676:	2b01      	cmp	r3, #1
    a678:	d10b      	bne.n	a692 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
    a67a:	4622      	mov	r2, r4
    a67c:	4659      	mov	r1, fp
    a67e:	f8db 0010 	ldr.w	r0, [fp, #16]
    a682:	e004      	b.n	a68e <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
    a684:	4622      	mov	r2, r4
    a686:	4659      	mov	r1, fp
    a688:	f8db 0010 	ldr.w	r0, [fp, #16]
    a68c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    a68e:	f7ff ff72 	bl	a576 <add_event>
	event->poller = poller;
    a692:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
    a696:	3501      	adds	r5, #1
    a698:	e7d7      	b.n	a64a <register_events+0x72>

0000a69a <k_poll_event_init>:
{
    a69a:	b510      	push	{r4, lr}
	event->poller = NULL;
    a69c:	2400      	movs	r4, #0
	event->type = type;
    a69e:	0452      	lsls	r2, r2, #17
    a6a0:	0209      	lsls	r1, r1, #8
    a6a2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
    a6a6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
    a6aa:	430a      	orrs	r2, r1
    a6ac:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    a6ae:	6084      	str	r4, [r0, #8]
	event->type = type;
    a6b0:	430a      	orrs	r2, r1
	event->obj = obj;
    a6b2:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
    a6b6:	bd10      	pop	{r4, pc}

0000a6b8 <z_handle_obj_poll_events>:
{
    a6b8:	4603      	mov	r3, r0
	return list->head == list;
    a6ba:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    a6bc:	4283      	cmp	r3, r0
    a6be:	d008      	beq.n	a6d2 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
    a6c0:	e9d0 3200 	ldrd	r3, r2, [r0]
    a6c4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    a6c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a6c8:	2300      	movs	r3, #0
	node->prev = NULL;
    a6ca:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    a6ce:	f7ff bf14 	b.w	a4fa <signal_poll_event>
}
    a6d2:	4770      	bx	lr

0000a6d4 <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
    a6d4:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    a6d6:	e9c0 0000 	strd	r0, r0, [r0]
    a6da:	6083      	str	r3, [r0, #8]
}
    a6dc:	4770      	bx	lr

0000a6de <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
    a6de:	6883      	ldr	r3, [r0, #8]
    a6e0:	600b      	str	r3, [r1, #0]
	*result = signal->result;
    a6e2:	68c3      	ldr	r3, [r0, #12]
    a6e4:	6013      	str	r3, [r2, #0]
}
    a6e6:	4770      	bx	lr

0000a6e8 <k_heap_init>:
{
    a6e8:	b410      	push	{r4}
    a6ea:	f100 040c 	add.w	r4, r0, #12
    a6ee:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    a6f2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    a6f4:	f7fd bd2d 	b.w	8152 <sys_heap_init>

0000a6f8 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    a6f8:	4770      	bx	lr
